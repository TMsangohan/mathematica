(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 6.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    471549,      13211]
NotebookOptionsPosition[    392612,      10876]
NotebookOutlinePosition[    420414,      11613]
CellTagsIndexPosition[    419532,      11588]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["CERN SL Note 97-55  (AP)", "Text",
 TextAlignment->Right],

Cell[CellGroupData[{

Cell[TextData[{
 "Basic MAD Tables in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " "
}], "Title"],

Cell["\<\
John M. Jowett
18/8/1997, Revised 5/3/2013\
\>", "Subtitle",
 CellChangeTimes->{{3.3951364540497503`*^9, 3.3951364540966244`*^9}, {
  3.4259903094805975`*^9, 3.425990311402398*^9}, {3.434715399198671*^9, 
  3.434715400386148*^9}, {3.57147558866179*^9, 3.5714755908410077`*^9}}],

Cell[CellGroupData[{

Cell["Introduction", "Section",
 CellTags->"Intrduction section"],

Cell[TextData[{
 "This note is the documentation for a ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 "[",
 ButtonBox["1",
  BaseStyle->"Hyperlink",
  ButtonData:>"Wolfram book"],
 ",",
 ButtonBox["2",
  BaseStyle->"Hyperlink",
  ButtonData:>"Maeder book"],
 "] package designed to handle data in a form typical of a class of table \
files.  These include the ",
 ButtonBox["TFS",
  BaseStyle->"Hyperlink",
  ButtonData:>{
    URL["http://wwwslap.cern.ch/~fci/mad/mad8/tfs_desc.html"], None}],
 " files generated by certain ",
 ButtonBox["MAD",
  BaseStyle->"Hyperlink",
  ButtonData:>{
    URL["http://wwwslap.cern.ch/~fci/mad/mad.html"], None}],
 " [",
 ButtonBox["3",
  BaseStyle->"Hyperlink",
  ButtonData:>"MAD manual"],
 "] commands (TRACK, EIGEN, TWISS3, OPTICS, etc., possibly  via MAD's ARCHIVE \
command) and a number of different types of files saved by application \
programs in the LEP control system.  Although some of these do not strictly \
adhere to the TFS conventions, their data is easily assimilated into a common \
data type ",
 StyleBox["mfs", "Input"],
 " in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". "
}], "Text",
 CellTags->"Intrduction section"],

Cell[TextData[{
 "Although not very interesting in itself, this package can be used in many \
ways.  Moreover it provides a basis for a number of other application \
packages  (such as ",
 StyleBox["TrackTable", "Input"],
 ")  that  extend its  functionality in various directions."
}], "Text",
 CellTags->"Intrduction section"],

Cell[TextData[{
 "These packages will allow you to operate ",
 StyleBox["directly",
  FontSlant->"Italic"],
 " with physically interesting quantities (eigenvectors, orbits, transfer \
matrices, maps,  etc.) and manipulate them in natural mathematical style, \
without having to worry about the technicalities of file and data formats.  \
While MAD itself provides an excellent framework for many kinds of beam \
optics and particle tracking calculations, I think it is fair to say that \
it's capabilities are still somewhat under-exploited because of the lack of \
tools for making sense of the abundance of results it can produce.   "
}], "Text",
 CellTags->"Intrduction section"],

Cell[TextData[{
 "There have been a number of attempts to fill this gap in recent years.  \
Personally I have found that the environment provided by ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " is particularly fruitful and easy to work in.  However my experience has \
shown that the speed with which applications can be developed tends to leave \
documentation far behind.  This series of packages, developed in \
collaboration with K. Goral, is being organised systematically according to \
established guidelines for package development.  This should make them robust \
and easy to use and maintain."
}], "Text",
 CellTags->"Intrduction section"],

Cell[TextData[{
 "These packages and others relating to the use of MAD will all be made \
available in the context ",
 StyleBox["Madtomma", "Input"],
 "  (the word ",
 StyleBox["context",
  FontSlant->"Italic"],
 " is used in a special sense in ",
 StyleBox["Mathematica).",
  FontSlant->"Italic"]
}], "Text",
 CellTags->"Intrduction section"],

Cell["\<\
The package has been thoroughly tested with tables from both MAD Version 8 \
and Version 9.\
\>", "Text"],

Cell[TextData[{
 "A useful feature is a ",
 StyleBox["palette",
  FontSlant->"Italic"],
 " of buttons that frees the user from most of the need to remember and type \
in the syntax of the functions in the package.  See ",
 ButtonBox["Section ",
  BaseStyle->"Hyperlink",
  ButtonData:>"palette"],
 
 CounterBox["Section", "palette"],
 " below."
}], "Text"],

Cell[TextData[{
 "Access to the packages has been simplified thanks to changes in the CERN \
computer systems and the \"",
 ButtonBox["User's Guide and Examples",
  BaseStyle->"Hyperlink",
  ButtonData:>"Examples section"],
 "\" below have been enhanced since the first version of the package."
}], "Text"],

Cell[TextData[{
 StyleBox["It is very likely that further functions will be added in future \
versions of the package.  ",
  FontSlant->"Italic"],
 "Therefore it is always worth checking the latest version of this notebook \
at the Madtomma Web site"
}], "Text"],

Cell[TextData[ButtonBox["\thttp://wwwslap.cern.ch/jowett/Madtomma",
 BaseStyle->"Hyperlink",
 ButtonData:>{
   URL["http://wwwslap.cern.ch/jowett/Madtomma"], None}]], "Program"],

Cell[TextData[{
 "This notebook adheres to the conventions for ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " package structure and documentation set out in [",
 ButtonBox["2",
  BaseStyle->"Hyperlink",
  ButtonData:>"Maeder book"],
 "].  As such it serves as the development medium for the package itself.  ",
 StyleBox["For this reason , some sections of the printed versions of this \
document are hidden.  ",
  FontWeight->"Bold"],
 "They contain the definitions (\"code\") of the functions.  The visible \
sections contain the documentation and examples of interest to users."
}], "Text",
 CellTags->"Intrduction section"],

Cell[TextData[{
 "To make the package available, you need only copy a couple of commands from \
the ",
 ButtonBox["\"Setup\"",
  BaseStyle->"Hyperlink",
  ButtonData:>"Setup section"],
 " section.  The \"",
 ButtonBox["Examples",
  BaseStyle->"Hyperlink",
  ButtonData:>"Examples section"],
 "\" section illustrates basic use of the package and is the best place to \
start learning how to use the package.  More elaborate \"real-life\" examples \
(e.g. applications to the LHC) can be found at the Web site."
}], "Text",
 CellTags->"Intrduction section"],

Cell["\<\
A final subsection illustrating some less useful features is hidden.\
\>", "Text"],

Cell[TextData[{
 "This notebook is based on the template for package and notebook development \
by R. Maeder  and supplied with ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " 3.0."
}], "Text",
 CellTags->"Intrduction section"],

Cell[CellGroupData[{

Cell["New in version 2.0", "Subsection"],

Cell[TextData[{
 "The names of several functions have been changed to make them more \
consistent and easier to guess or remember,The old function names are still \
accepted but generate warning messages.  A function ",
 StyleBox["mfsVersion2Update", "Input"],
 " has been provided to facilitate the updating of existing files."
}], "Text"],

Cell["The package is now compatible with MAD Versions 8 and 9.", "Text"],

Cell["\<\
New functions have been added to allow different TFS tables to be merged with \
checking that the merging is valid.\
\>", "Text"],

Cell["\<\
The notion of interpreting the data in the mfs object to assign values to new \
variables has been extended to both the keys in the headers and the data in \
the columns.\
\>", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Note about saving this package", "Subsection"],

Cell["\<\
10:26:98 17/5/2006 I was having some problems with this package when \
auto-saved from the Windows Front End.  It would work fine when read in from \
a Windows kernel but not from a Unix kernel.  Changing the Mfs.m file to Unix \
format (with KEDIT or DOStoUnix) would fix the problem.  This does not occur \
with all packages.  Finally it seems that the problem was due to a usage \
message where I had typed a blank in between the final double quote and the \
semi-colon.  This caused a line break in the .m file and the problem.  This \
is a Front-End bug but at least I know the solution.   I think it may only \
happen when the usage message is of an appropriate length to cause a line \
break.\
\>", "Text"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Reference", "Section",
 CellTags->"Reference section"],

Cell[CellGroupData[{

Cell["Title", "Subsubsection",
 CellTags->"Reference section"],

Cell[TextData[{
 "Basic MAD Tables in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Text",
 CellTags->"Reference section"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Author", "Subsubsection",
 CellTags->"Reference section"],

Cell["John M. Jowett", "Text",
 CellTags->"Reference section"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Summary", "Subsubsection",
 CellTags->"Reference section"],

Cell["\<\
This notebook provides functions for creating and manipulating the mfs data \
type created by various other packages.  In particular it creates mfs data \
itself from TFS data files saved by  MAD and other programs. \
\>", "Text",
 CellTags->"Reference section"],

Cell["\<\
This package provides a basis for other packages that will be dependent upon \
it.\
\>", "Text",
 CellTags->"Reference section"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Copyright", "Subsubsection"],

Cell[TextData[{
 "\[Copyright] Copyright ",
 StyleBox["CERN.1997, 1999",
  FontSlant->"Italic"],
 "\n\n",
 "The copyright and all other rights relating to this computer software, in \
whatever form, including but not\nlimited to the source code, the object code \
and user documentation, are vested in CERN. \n\nCERN, on a royalty-free and \
non-exclusive basis, hereby grants permission to use, copy, change, modify,\n\
translate, display, distribute and make available this computer software, \
subject to the following conditions:\n\n(1) this computer software is \
provided on an as-is basis and CERN provides no express or implied\n\
warranties of any kind, including but not limited to those of \
merchantability, fitness for a particular purpose\nand non-infringement of \
the proprietary rights, such as copyrights, patents and trade secrets, of \
third\nparties. CERN accepts no liability whatsoever for or in connection \
with the use of this computer software; \n\n(2) all copies made of this \
computer software or of parts thereof shall include this copyright statement \
in\nfull; \n\n(3) however, if this computer software or parts thereof are \
made available in any other form than their\noriginal form, or are included \
in any other computer software, the following short acknowledgement only\n\
must be mentioned in the copyright statement and in the user documentation \
(or, in the absence thereof, in\nany other appropriate place) concerning the \
computer software thus made available or created: \n\n\"This product includes \
computer software created and made available by CERN. This acknowledgement\n\
shall be mentioned in full in any product which includes the CERN computer \
software included herein or\nparts thereof.\" "
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Notebook Version", "Subsubsection",
 CellTags->"Reference section"],

Cell["3.03", "Text",
 CellTags->"Reference section"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Version"
}], "Subsubsection",
 CellTags->"Reference section"],

Cell["\<\
5.1 or later (for ability to read URLs, package should work with Version 4.0 \
or later without that possibility)\
\>", "Text",
 CellTags->"Reference section"]
}, Open  ]],

Cell[CellGroupData[{

Cell["History", "Subsubsection",
 CellTags->"Reference section"],

Cell["\<\
Starting from ReadTrackTable.nb 12/6/97.
Added removeQuotes function to fix a bug, 13/8/97.
Added colValue, mfsSelect, mfsMember, mfsRange, mfsReverse functions 15/8/97.
Added keepTemporaryFile option to tfsRead, improved the setting of $Path and \
finding the example file 24/4/98.
Modified mfsRange to include the endpoints of the interval (< replaced by \
\[LessEqual], etc.), 18/9/98.
Added handling of %le format obtained when OPTION,DOUBLE is used in MAD, \
21/9/98.
Addition of palette, simplification of Setup section, etc. 3/2/1999.
Added %s format specifier used by MAD9 TFS output, 6/9/1999.
Modified tfsParseHeaderBlock to allow arbitrary order of header lines for \
MAD9, 7/9/1999.\
\>", "Text",
 CellTags->"Reference section"],

Cell[TextData[{
 "Version 2.0 created with major changes, 13/9/1999.  \nThe main motivation \
is compatibility with MAD9 but other improvements have been mae.\n",
 StyleBox["Several functions have been given new, more logical names, \
beginning \"mfs...\".  The list of changes that need to be made in any \
existing files is given as ",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["mfsVersion2UpdateRules", "Input",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[" and a function",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[" mfsVersion2Update", "Input",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[" has been provided to facilitate the updating of files.   The old \
names of functions will continue to work but generate a warning message. All \
cells containing code to facilitate the transition are coloured red in this \
notebook.  They may eventually be removed.",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["\n", "Input"],
 "The function ",
 StyleBox["mfsMerge", "Input"],
 " has been created to allow mfs objects to be merged.\nSome other editing \
functions also added."
}], "Text",
 CellTags->"Reference section"],

Cell[TextData[{
 "Version 2.1 added the ",
 StyleBox["stringRemoveLeadingTrailingBlanks", "Input"],
 " function so that makeEigenTable etc. work for MAD Version 9.\nVersion 2.2 \
22/3/2000, added change of name of symplecticJ here so as to take care of \
today's update to TrackTable package.\nVersion 2.21   17/8/2000 added %d \
format specifier for columns - perhaps to be taken out again later.  \n\t\
Added ",
 StyleBox["mfsInterpretColumns", "Input"],
 ",  ",
 StyleBox["mfsInterpret.\n\t", "Input"],
 "Changed Verbose to mfsVerbose because of clash with ",
 StyleBox["Mathematica4's ",
  FontSlant->"Italic"],
 "option on Import function.\n\tDeactivate ",
 StyleBox["tfsInterpretDescriptorLine", "Input"],
 "  function, since not useful.   Delete later. \n",
 StyleBox["\tSuch de-activated stuff marked for deletion in blue.",
  FontColor->RGBColor[0, 0, 1]],
 "\n\tConsider eliminating other stuff too."
}], "Text",
 CellTags->"Reference section"],

Cell["\<\
Version 2.22 Fixes suggested by James Jones at Daresbury to not leave input \
streams open.  Also various cleaning up operations, replacing Block with \
Module and checking that all local variables are declared in modules.\
\>", "Text"],

Cell["\<\
Version 2.3 Added mfsToCSV export utility  and mfsSortKey, found useful in \
generating LHC Optics Web.\
\>", "Text"],

Cell["\<\
Version 2.3 12/3/2002 Put mfsRemoveDrifts into thi s package: this function \
has been hanging around in various applications for a while.\
\>", "Text"],

Cell["\<\
Version 2.4 20/3/2002 Applied mfsFixMAD8inconsistencies  in tfsRead, mainly \
for compatibility with new version of TrackTable package that is being \
created just now. 
08:55:51 3/7/2007 Although this should no longer have been necessary with \
MAD-X,  MAD-X has continued some of the MAD8 inconsistencies (such as X for \
orbit).  This is a real nuisance when putting rules created by mfsToRules \
back into MAD-X input.\
\>", "Text"],

Cell["\<\
Version 2.5 20/8/2002 Treating the case of non-existent TFS files better in \
tfsRead.  Making mfsRead treat the \"S\" column as periodic. \
\>", "Text"],

Cell["\<\
Version 2.51 2/5/2003 Adding mfsToRules for another flexible way to work.  \
This makes mfsInterpret redundant.\
\>", "Text"],

Cell[TextData[{
 "It might be worth aborbing tfsRead into ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s Import command?  See 2003 ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Developer Conference."
}], "Text"],

Cell[TextData[{
 "Version 3.00 removed removeUnwantedLines function and made tfsRead work \
with URLs.   Removing the old deprecated stuff that has been flagged since \
Version 2.0.   ",
 StyleBox["So the old names of functions will no longer work.",
  FontColor->RGBColor[1, 0, 0]]
}], "Text"],

Cell["\<\
Version 3.01 16/2/2006 rewrote mfsKeyValue and overloaded it to return all \
keyvalue pairs when no key argument is given.  So I can avoid First[qp] in \
future. \
\>", "Text"],

Cell["\<\
Version3.02 30/3/2006 mfsFixMAD8inconsistencies now deals with the APERTURE \
table from MAD-X; although this particular table still does not conform to \
TFS format, an mfs object is still returned with loss of some information.\
\>", "Text"],

Cell[TextData[{
 "Version 3.03 1/8/2006 Removing dependence on \
Statistics`DataManiplulation`Column function because it will be obsoleted \
(actually do something else) in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Version 6.  However the package may still needed for TakeWhile and maybe \
other things.  It seems that TakeWhile is a System function in V6.  "
}], "Text"],

Cell["\<\
Version 3.04 27/9/2006 overloaded the mfsToRules function with second and \
third arguments, providing an easy way to get hold of all or a specific set \
of column values at a given element as a list of rules. This does away with \
the need to use BETA0 blocks in MAD-X.   Now one can just take the values \
from a table and give them to MADtwiss (see MADinput package).   Examples \
still to be written properly.\
\>", "Text"],

Cell[TextData[{
 "Version 4.0 3/8/2007 made compatible with ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Version 6."
}], "Text",
 CellChangeTimes->{{3.395136473127753*^9, 3.39513649228388*^9}}],

Cell["\<\
Version 4.01 modified mfsAddColumn so as not to use mfsMerge (and keep \
columns in order).  Added mfsFromCSV.\
\>", "Text",
 CellChangeTimes->{{3.425791700744923*^9, 3.4257917252444525`*^9}}],

Cell["\<\
Version 4.1 3/11/2008 mfsKeyCheck, mfsColumnCheck moved here from \
OpticsUtiilities.  Adding powerful new mfsRow function. 
Removing mfsInterpret and related functions.\
\>", "Text",
 CellChangeTimes->{{3.4347128971217117`*^9, 3.4347129451989136`*^9}, {
  3.4347223661274033`*^9, 3.4347223762522087`*^9}}],

Cell["\<\
Version 4.1.4 changed the basic mfsColumn to use Append rather than AppendTo  \
(how did it ever work?).  May not work with multiple columns but for that one \
can now use Fold.\
\>", "Text",
 CellChangeTimes->{{3.452309253383319*^9, 3.4523093081628156`*^9}}],

Cell[TextData[{
 "Version 5.0 Adapted for ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Version 9.  The old version of tfsRead using ReadList no longer works \
(this seems to be a bug in ReadList in V9, so a new version of tfsReadWork is \
used in Version 9.  It\[CloseCurlyQuote]s a bit slower but a cleaner \
implementation using more recent functions.  Some other minor cleanups done.  \
 "
}], "Text",
 CellChangeTimes->{{3.5714101039471517`*^9, 3.5714101601397705`*^9}, {
  3.5714102164193974`*^9, 3.5714102369584513`*^9}}],

Cell["\<\
Version 5.1 Being adapted for Mathematica Version 10.  No obvious changes so \
far.  Adding mfsSpan function.  Replacing stringRemoveLeadingTrailingBlanks \
with StringTrim.\
\>", "Text",
 CellChangeTimes->{{3.630048892422965*^9, 3.6300489284348016`*^9}, {
  3.6300495168445606`*^9, 3.6300495229864006`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Keywords", "Subsubsection",
 CellTags->"Reference section"],

Cell["TFS, MAD, data, table, OPTICS, TRACK, mfs", "Text",
 CellTags->"Reference section"]
}, Closed]],

Cell[CellGroupData[{

Cell["Source", "Subsubsection",
 CellTags->"Reference section"],

Cell["\<\
For a brief description of the TFS file format as used in MAD, see Appendix C \
of H. Grote, F.C. Iselin, \"The MAD Program, Version 8.16, User's Reference \
Manual\", CERN/SL/90-13 (AP) 1995, or the version of the information in the \
MADX user guide:\
\>", "Text",
 CellTags->"Reference section"],

Cell[TextData[ButtonBox["http://mad.home.cern.ch/mad/Introduction/tfs.html",
 BaseStyle->"Hyperlink",
 ButtonData:>{
   URL["http://mad.home.cern.ch/mad/Introduction/tfs.htmll"], 
   None}]], "Program",
 CellTags->"Reference section"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Warnings", "Subsubsection",
 CellTags->"Reference section"],

Cell[TextData[{
 "Note: all cells marked as \"InitializationCell\" will be written to the \
Auto-Save package. This package can then be read in programs that use it with \
",
 StyleBox["Needs[\"Madtomma`Mfs`Mfs`\"]", "Input"],
 ". Cells not intended to belong to the package should not have this property."
}], "Text",
 CellTags->"Reference section"]
}, Closed]],

Cell[CellGroupData[{

Cell["Discussion", "Subsubsection",
 CellTags->"Reference section"],

Cell[TextData[{
 "Here we provide the internal specification of ",
 StyleBox["mfs", "Input"],
 " data objects.  Normal users may skip it."
}], "Text",
 CellTags->"Reference section"],

Cell[TextData[{
 "Basically an mfs data object is a list with head ",
 StyleBox["mfs", "Input"],
 " and three or more elements."
}], "Text",
 CellTags->"Reference section"],

Cell[TextData[{
 "The ",
 StyleBox["first",
  FontSlant->"Italic"],
 " element is a list of keys.  Each ",
 "key",
 " consists of a descriptive string, usually in uppercase, such as ",
 StyleBox["\"QX\"", "Input"],
 " and a corresponding value, such as ",
 StyleBox["96.24", "Input"],
 ".  In TFS data files the value is either a number or a string.  In mfs \
data, it can be any kind of object definable in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", e.g., a matrix consisting of numerical and symbolic elements.  "
}], "Text",
 CellTags->"Reference section"],

Cell[TextData[{
 "The ",
 StyleBox["last",
  FontSlant->"Italic"],
 " element is a table, consisting of columns of data.  If the data comes from \
a TFS file, then the elements of a given  column are  all or the same type, \
either numbers or strings."
}], "Text",
 CellTags->"Reference section"],

Cell[TextData[{
 "The ",
 StyleBox["second-last",
  FontSlant->"Italic"],
 " element is a set of string labels, one for each of the columns in the last \
part."
}], "Text",
 CellTags->"Reference section"],

Cell["\<\
Additional parts between the first and the second-last may be used for other \
purposes.  \
\>", "Text",
 CellTags->"Reference section"],

Cell[TextData[{
 "Note that the first element of an mfs data object is actually an ",
 StyleBox["associative array",
  FontWeight->"Bold"],
 " in the sense used in various programming languages.  You can also think of \
the second-last and last elements combined as another associative array with \
the constraint that the values are all numerical lists of the same length.  \
This is necessary because there are cases where the key \"X\", for example, \
occurs both in the header block (as a closed-orbit component) and in the \
column names (as the name of a phase-space coordinate)."
}], "Text"],

Cell[TextData[{
 "If you like the ",
 StyleBox["object-oriented  programming",
  FontWeight->"Bold"],
 " metaphor, you can think of ",
 StyleBox["mfs ", "Input"],
 "as a class and various functions in this package as the associated \
methods."
}], "Text",
 CellChangeTimes->{3.5714763157914953`*^9}],

Cell[TextData[{
 StyleBox["stringRemoveLeadingTrailingBlanks", "Input"],
 "   can be replaced  by ",
 StyleBox["StringTrim", "Input"],
 "  once I am sure that nobody is versions of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " older than 7. "
}], "Text",
 CellChangeTimes->{{3.5714763193258486`*^9, 3.5714763845813737`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Requirements", "Subsubsection",
 CellTags->"Reference section"],

Cell["Uses a standard package for column manipulations, etc.", "Text",
 CellTags->"Reference section"],

Cell["Statistics`DataManipulation`", "Text",
 FontWeight->"Bold",
 FontSlant->"Italic",
 CellTags->"Reference section"],

Cell["\<\
The functions in this package are available once this one is loaded (and are \
often very useful - see the documentation for this package).\
\>", "Text",
 CellTags->"Reference section"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Setup", "Section",
 CellTags->"Setup section"],

Cell["\<\
This section contains commands needed to load the corresponding package file. \
 The contents of this file are equivalent to the following sections \
(Interface, Implementation, Epilog) in which the package is developed. \
\>", "Text",
 CellTags->"Setup section"],

Cell[CellGroupData[{

Cell["Search Path (ESSENTIAL!)", "Subsection",
 CellTags->"Setup section"],

Cell["\<\
To have access to my packages, you may need to add my packages directory to \
your search path.  This is system-dependent and the latest information about \
arranging it on CERN computer systems can be found at\
\>", "Text"],

Cell[TextData[ButtonBox["http://cern.ch/jowett/Madtomma/AboutFiles.html",
 BaseStyle->"Hyperlink",
 ButtonData:>{
   URL["http://cern.ch~jowett/Madtomma/AboutFiles.html"], None}]], "Program"],

Cell[TextData[{
 "and is not reproduced here.  I strongly recommend that you modify your \
kernel initialisation file once and for all as explained on this page.  Then \
all my packages will be found as easily as the Standard Packages that come \
with ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellTags->"Setup section"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Loading the Package", "Subsection",
 CellTags->"Setup section"],

Cell[TextData[{
 "Once the package directory is on your search path, the ",
 StyleBox["Mfs", "Input"],
 " package can be loaded by evaluating the following cell. ",
 StyleBox["If you are using a copy of this notebook in order to work through \
the examples and you are invited to  evaluate all the initialisation cells in \
it, you should click \"NO\" and then go straight to the ",
  FontSlant->"Italic",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["\"",
  FontSlant->"Italic"],
 StyleBox[ButtonBox["User's Guide and Examples",
  BaseStyle->"Hyperlink",
  ButtonData:>"Examples section"],
  FontSlant->"Italic"],
 StyleBox["\" ",
  FontSlant->"Italic"],
 StyleBox["without evaluating the intermediate sections.",
  FontSlant->"Italic",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[" ",
  FontSlant->"Italic"],
 "However this should not normally happen."
}], "Text",
 CellTags->"Setup section"],

Cell[BoxData[
 StyleBox[
  RowBox[{"Needs", "[", "\"\<Madtomma`Mfs`Mfs`\>\"", "]"}], 
  "Input"]], "InputOnly",
 CellTags->"Setup section"],

Cell[TextData[{
 "This is all you need to start using the package in your own applications.   \
In interactive sessions, you will normally see a palette of buttons appearing \
on your screen.   This makes it easier to use the package: see ",
 ButtonBox["Section ",
  BaseStyle->"Hyperlink",
  ButtonData:>"palette"],
 
 CounterBox["Section", "palette"],
 " below."
}], "Text",
 CellTags->"Setup section"],

Cell[TextData[{
 "These following sections are hidden when this notebook is used as the \
package documentation but may be inspected in the online copy that can be \
found in the appropriate  sub-directory of the directory added to the ",
 StyleBox["$Path", "Input"],
 " variable above."
}], "Text",
 CellTags->"Setup section"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Interface", "Section",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell["\<\
This part declares the publicly visible functions, options, and values.\
\>", "Text",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[CellGroupData[{

Cell["Set up the package context, including public imports", "Subsection",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BeginPackage", "[", "\"\<Madtomma`Mfs`Mfs`\>\"", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.3951363000976105`*^9, {3.3951363349411373`*^9, 3.395136336613002*^9}}],

Cell[BoxData["\<\"Madtomma`Mfs`Mfs`\"\>"], "Output",
 CellChangeTimes->{3.3951365165181*^9, 3.395136553611613*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Usage messages for the exported functions and the context itself\
\>", "Subsection",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell["\<\
Mfs::usage = \"Mfs.m is a package for manipulating MFS data.\";\
\>", "Input",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfs", "::", "usage"}], "=", " ", 
   "\"\<mfs is a data object type containing a set of values labelled with \
strings and a set of columns of values, also labelled with strings; a common \
applications is to structure and contain the data in the TFS files created by \
the MAD program.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.4788625700976205`*^9, 3.4788627191122913`*^9}},
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsTypes", "::", "usage"}], "=", 
   "\"\<mfsTypes is a list of the types of data related to the basic mfs \
type.  Various mfs data functions will apply to the elements in the \
class.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"tfsRead", "::", "usage"}], "=", 
   "\"\<tfsRead[file] returns an mfs data object containing all the \
information in a TFS file.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"removeUnwantedLines", "::", "usage"}], ":=", 
     "\"\<removeUnwantedLines[infile,outfile,string] copies file infile to \
outfile, removing all lines containing string.\>\""}], ";"}], " ", "*)"}], 
  " "}]], "Input",
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"removeQuotes", "::", "usage"}], ":=", 
   "\"\<removeQuotes[x] will remove any double quotes \\\" explicitly \
included in a string x.  If x is not a string then it is returned \
unchanged.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell["Obsolete :", "Text",
 CellChangeTimes->{{3.630049587985623*^9, 3.630049591358245*^9}, 
   3.630049627770893*^9}],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"stringRemoveLeadingTrailingBlanks", "::", "usage"}], "=", 
    "\"\<stringRemoveLeadingTrailingBlanks[string] removes leading and \
trailing blanks from a string.\>\""}], ";"}], "\[IndentingNewLine]", 
  "*)"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.630049633018527*^9, 3.630049637099154*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"tfsParseDescriptorLine", "::", "usage"}], "=", 
   "\"\<tfsParseDescriptorLine[string] takes a TFS descriptor line as a \
string and returns a list consisting of the TFS key and its value.\>\""}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"interpretTagValue", "::", "usage"}], "=", 
   "\"\<interpretTagValue[{\\\"tag\\\",val}] creates a variable tag and \
assigms it the value val.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"tfsInterpretDescriptorLine", "::", "usage"}], "=", 
  "\"\<tfsInterpretDescriptorLine[string] takes a TFS descriptor line as a \
string, creates a variable from the key name and assigns it the \
value.\>\""}]], "Input",
 Evaluatable->False,
 FontColor->RGBColor[0, 0, 1],
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"tfsFormatRules", "::", "usage"}], "=", 
   "\"\<tfsFormatRules is an option of tfsRead and related functions like \
tfsParseHeaderBlock.  It gives a set of rules for transforming TFS column \
formats into Mathematica data types.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"tfsParseHeaderBlock", "::", "usage"}], "=", 
   "\"\<tfsParseHeaderBlock[file] returns the information in the header block \
of a TFS file as a structured list.  It is normally used inside readTfsTable.\
\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsKeyCheck", "::", "usage"}], "=", 
   "\"\<mfsKeyCheck[opt,{\\\"key1\\\",\\\"key2\\\",...},expr,exprfail] checks \
whether the mfs object opt contains the specified key data, returning expr if \
it does and exprfail (default $Failed) if it does not. In the latter case a \
message is generated.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.434716035264583*^9, 3.4347160396238747`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsColumnCheck", "::", "usage"}], "=", 
   "\"\<mfsColumnCheck[opt,{\\\"col1\\\",\\\"col2\\\",...},expr,exprfail] \
checks whether the mfs object opt contains the specified columns, returning \
expr if it does and exprfail (default $Failed) if it does not. In the latter \
case a message is generated.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.4347155261024847`*^9, 3.4347155261024847`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsKeyValue", "::", "usage"}], "=", " ", 
   "\"\<mfsKeyValue[mfsdata,key] returns the value corresponding to a \
descriptor key (a string) in an mfs (or related) data \
object;\\nmfsKeyValue[mfsdata,{key1,key2,...}] returns a list {val1,val2,..} \
of such values;\\nmfsKeyValue[mfsdata] returns the list of all pairs \
{{key1,val1},{key2,val2},...} in mfsdata.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsColumnNames", "::", "usage"}], " ", "=", 
   "\"\<mfsColumnNames[mfsdata] returns the list of column names in an mfs \
data (or related) object.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsKeyNames", "::", "usage"}], "=", 
   "\"\<mfsKeyNames[mfsdata] returns the list of key names in the header \
block of an mfs (or related) data object.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsColumn", "::", "usage"}], "=", 
   "\"\<mfsColumn[mfsdata,colname] returns the column of data labelled by the \
string colname in an mfs (or related) data object. A list of colnames may \
also be given to return a set of columns.  If colname is absent the entire \
block of columns is returned.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsRow", "::", "usage"}], "=", 
   "\"\<mfsRow[qp,template] returns a list of values of the template for each \
row of the mfs object qp; the template is an expression whose lowest level \
elements are strings belonging to the set of column names in qp, e.g, \
{\\\"NAME\\\",{\\\"BETX\\\",Cos[\\\"MUX\\\"]} is valid but \
{\\\"NAME\\\",{\\\"BETX\\\",1+Cos[\\\"MUX\\\"]} is not. Some further forms \
(e.g., {\\\"NAME\\\",{foo[\\\"BETX\\\"],Cos[\\\"MUX\\\"]} where no evaluation \
is defined for the symbol foo) may also work.\\nmfsRow[qp] returns a simple \
list of all column values for each row.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.434716627503212*^9, 3.434716702736142*^9}, {
   3.4347173570673294`*^9, 3.4347175710944695`*^9}, {3.4347183271737027`*^9, 
   3.434718349876392*^9}, {3.4347184335466604`*^9, 3.4347185329041276`*^9}, {
   3.4347185971216445`*^9, 3.434718601621558*^9}, {3.434720497257036*^9, 
   3.4347205228659196`*^9}, 3.434721679749957*^9, {3.4347218540903597`*^9, 
   3.434721917511017*^9}, {3.4347220060561914`*^9, 3.434722006728054*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsColumnValue", "::", "usage"}], "=", 
   "\"\<mfsColumnValue[mfsdata,row,key] extracts a value labelled by key in \
row from an mfsdata object.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.4347220510865774`*^9, 3.4347220691956043`*^9}},
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsSelect", "::", "usage"}], "=", 
   "\"\<mfsSelect[mfsdata,criterion] extracts rows satisfying criterion \
(function) from an mfsdata object.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsMember", "::", "usage"}], "=", 
   "\"\<mfsMember[mfsdata,key,targetset] extracts rows of an mfsdata object \
for which values labelled by key belong to targetset.\>\""}], ";"}]], "Input",\

 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsNotMember", "::", "usage"}], "=", 
   "\"\<mfsNotMember[mfsdata,key,targetset] extracts rows of an mfsdata \
object for which values labelled by key DO NOT belong to targetset.\>\""}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsRange", "::", "\"\<usage\>\""}], "=", 
   "\"\<mfsRange[mfsdata,colname,{min,max}] extracts rows of an mfsdata \
object for which values labelled by colname lie within min and max. \\nNOTE : \
min must be smaller than max, except in the special case of the colname \\\"S\
\\\" which is treated modulo the circumference. Values of \\\"S\\\" to the \
left of the beginning of the sequence are made negative.\>\""}], 
  ";"}]], "Code",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsSpan", "::", "usage"}], "=", 
  "\"\<mfsSpan[qp,col] returns the maximum and minimum values of a column \
(default \\\"S\\\") in an mfs object.\>\""}]], "Code"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsVerbose", "::", "usage"}], " ", "=", " ", 
   "\"\<mfsVerbose is an option for tfsParseHeaderBlock and tfsRead that \
specifieds whether informative messages should be printed.\>\""}], 
  ";"}]], "Code",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"keepTemporaryFile", "::", "usage"}], "=", 
   "\"\<keepTemporaryFile is an option for tfsRead that causes a temporary \
file not to be deleted.\>\""}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsAddKey", "::", "usage"}], "=", 
   "\"\<mfsAddKey[mfsdata,{\\\"KEY\\\",value}] returns the mfs (or related) \
data object mfsdata with an additional key and value.\>\""}], ";"}]], "Input",\

 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsEditKey", "::", "usage"}], " ", "=", " ", 
   "\"\<mfsEditKey[mfsdata,{key,newValue}] returns the mfs (or related) data \
object mfsdata with the value corresponding to the descriptor key replaced by \
newValue.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsDeleteKey", "::", "usage"}], " ", "=", " ", 
   "\"\<mfsDeleteKey[mfsdata,key] returns  the mfs (or related) data object \
mfsdata with the descriptor key removed.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsDeleteColumn", "::", "usage"}], "=", 
   "\"\<mfsDeleteColumn[qp,\\\"colname\\\"] returns an mfs object equal to qp \
but with the column labelled colname removed. A list of column names can also \
be given.\>\""}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsAddColumn", "::", "usage"}], "=", 
   "\"\<mfsAddColumn[qp,{\\\"colname\\\",coldata}] returns an mfs object \
equal to qp but with a new column labelled colname and containing data \
coldata added. A list of column names and columns of data can also be \
given.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.4523095052815075`*^9, 3.4523095101251025`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsReverse", "::", "usage"}], "=", 
   "\"\<mfsReverse[mfsdata] returns the mfs object with the rows of the main \
block of columns in reverse order.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsColumnMatch", "::", "usage"}], "=", 
   "\"\<mfsColumnMatch[{qp1,qp2,...},{\\\"col1\\\",\\\"col2\\\",...}] tests \
whether a list of column namesmatch in all the mfs objects in which they \
appear.\>\""}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsMerge", "::", "usage"}], "=", 
   "\"\<mfsMerge[{qp1,qp2,...}] merges a list of mfs objects into a single \
one containing all the header and column information in each of them.  The \
column lengths must match.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.630048967145271*^9, 3.6300489675664735`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"matchColumns", "::", "usage"}], "=", 
   "\"\<matchColumns is an option for mfsMerge that gives a list of column \
names that must match in all the mfs objects in which they appear.  The value \
Automatic insists that all possible matches hold.\>\""}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsSortColumns", "::", "usage"}], "=", 
   "\"\<mfsSortColumns[opt] returns another version of the mfs object opt in \
which the columns are sorted by name; a second optional argument can be used \
to define the sorting function in the same way as for Sort.\>\""}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.434093751837246*^9, 3.4340938507891045`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsSortKey", "::", "usage"}], "=", 
   "\"\<mfsSortKey[qp] sorts the keys in an mfs object into a canonical order \
defined by the option mfsKeyOrder\>\""}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsKeyOrder", "::", "usage"}], "=", 
   "\"\<mfsKeyOrder is an option giving list of strings defining a preferred \
set of keys which are sorted to the beginning of any list by \
mfsSortKey.\>\""}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsToCSV", "::", "usage"}], "=", 
   "\"\<mfsToCSV[csvFile,qp] exports the mfs object qp to the file csvFile in \
CSV format.\\n\nmfsToCSV[tfsFile] reads a TFS file into an mfs object before \
exporting it to a CSV file; the name of the CSV file is formed by converting \
the extension \\\".tfs\\\" to \\\".csv\\\" or by appending \\\".csv\\\" to \
the full name of a file without that extension.\>\""}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsFromCSV", "::", "usage"}], "=", 
   "\"\<mfsFromCSV[csvFile] returns an mfs object constructed from  data in \
the file (or URL) csvFile.  The file should be in CSV format and have the \
structure similar to files created by mfsToCSV; otherwise the function may \
fail or possibly drop some data (it uses only the first and last blocks of \
equal length rows and checks for strings identifying the keys and columns).\>\
\""}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.426307570617572*^9, 3.426307583429908*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsFixMAD8inconsistencies", "::", "usage"}], "=", 
   "\"\<mfsFixMAD8inconsistencies[qp] returns a new mfs object with \
corrections for inconsistencies that may arise from it's having been \
generated by MAD Version 8.\>\""}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsConvertMAD8toMAD9", "::", "usage"}], "=", 
   "\"\<mfsConvertMAD8toMAD9[qp] returns a new mfs object with MAD8 key and \
column names converted to their closest equivalents in MAD9 to facilitate \
comparisons.\>\""}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsRemoveDrifts", "::", "usage"}], "=", 
   "\"\<mfsRemoveDrifts[opt] removes all MAD-generated drift spaces from the \
optics opt, given as an mfs object.\>\""}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mfsToRules", "::", "usage"}], "=", 
    "\"\<mfsToRules[mfsdata] transforms an mfs object into a list of rules \
for all the strings appearing in mfsKeyNames[mfsdata] and \
mfsColumnNames[mfsdata].  If the argument is a string, it is taken to be the \
name of a TFS file.  Where there are clashes, names from mfsKeyNames[mfsdata] \
have \\\"_KEY\\\" appended to them.\\nmfsToRules[mfsdata,elname] returns a \
list of rules for the values of all the columns at the element with NAME \
elname.\\nThe form mfsToRules[mfsdata,elname,{cola,colb,...} generates rules \
only for the specified columns.\>\""}], ";"}], " "}]], "Input",
 InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["Error messages for the exported objects", "Subsection",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"tfsRead", "::", "\"\<notfound\>\""}], "=", 
   "\"\<Non-existent file `1`\>\""}], ";"}]], "Input",
 InitializationCell->True],

Cell["\<\
mfsKeyCheck::missingKeys = \"Missing keys in mfs object:  `1`\"; \
\>", "Input",
 InitializationCell->True,
 CellChangeTimes->{3.4347160412957172`*^9}],

Cell["\<\
mfsColumnCheck::missingColumns = \"Missing columns in mfs object:  `1`\"; \
\>", "Input",
 InitializationCell->True,
 CellChangeTimes->{3.4347155261024847`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsKeyValue", "::", "\"\<notfound\>\""}], "=", 
   "\"\<Descriptor `1` not found.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsKeyValue", "::", "\"\<notkey\>\""}], "=", 
   "\"\<`1` is not a string, hence not a possible key.\>\""}], ";"}]], "Input",\

 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsColumn", "::", "\"\<notfound\>\""}], "=", 
   "\"\<Column `1` not found.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsRow", "::", "invalid"}], "=", 
   "\"\<invalid lowest level elements in template: `1`\>\""}], ";"}]], "Input",\

 InitializationCell->True,
 CellChangeTimes->{{3.4347219426824083`*^9, 3.4347219920252113`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsAddKey", "::", "\"\<badarg\>\""}], "=", 
   "\"\<`1` not valid key-value pair\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsEditKey", "::", "\"\<badarg\>\""}], "=", 
   "\"\<`1` not valid key-value pair\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsDeleteKey", "::", "\"\<badarg\>\""}], "=", 
   "\"\<`1` not valid key-value pair\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsColumnValue", "::", "\"\<notfound\>\""}], "=", 
   "\"\<`1` is not a proper column name.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsRange", "::", "\"\<badarg\>\""}], "=", 
   "\"\<The first element of a range specification (`1`) should be smaller \
than the second one (`2`).\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellTags->"Interface section"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsAddColumn", "::", "\"\<collength\>\""}], "=", 
   "\"\<Columns with different column lengths cannot be merged into an mfs \
object.\>\""}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsMerge", "::", "badmatch"}], "=", 
   "\"\<Some columns specified by the matchColumns option do not \
match.\>\""}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsMerge", "::", "collength"}], "=", 
   "\"\<Not all columns have the same length. mfs objects cannot be merged.\>\
\""}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsToRules", "::", "missingElement"}], "=", 
   "\"\< element `1` not found in mfs object.\>\""}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsToRules", "::", "missingColumns"}], "=", 
   "\"\< column(s) `1` not found in mfs object.\>\""}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"interpretTagValue", "::", "changename"}], "=", 
   "\"\<Invalid variable name `1` changed to `2`\>\""}], ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsFromCSV", "::", "invalid"}], "=", 
   "\"\<Data in file or URL `1` cannot be interpreted as an mfs data \
object.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.425789347508856*^9, 3.4257893488369555`*^9}, {
   3.425789543145725*^9, 3.4257895605985146`*^9}, 3.425789680158719*^9, {
   3.4263075956797504`*^9, 3.4263075971953564`*^9}, 3.4347225248899803`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Temporary fixes", "Subsection",
 CellChangeTimes->{{3.4348038505427127`*^9, 3.434803857855072*^9}}],

Cell["\<\
Until I have eleminated all mention of the old names for these functions from \
all other packages.\
\>", "Text",
 CellChangeTimes->{{3.4348038896357117`*^9, 3.4348039106665583`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"mfsOpticsColumnCheck", "=", "mfsColumnCheck"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mfsOpticsKeyCheck", "=", "mfsKeyCheck"}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.434803859230046*^9, 3.434803880479638*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Implementation", "Section",
 InitializationCell->True],

Cell["\<\
This part contains the actual definitions and any auxiliary functions that \
should not be visible outside.\
\>", "Text"],

Cell[CellGroupData[{

Cell["Begin the private context (implementation part)", "Subsection",
 InitializationCell->True],

Cell[CellGroupData[{

Cell["Begin[\"`Private`\"]", "Input",
 InitializationCell->True],

Cell[BoxData["\<\"Madtomma`Mfs`Mfs`Private`\"\>"], "Output",
 CellChangeTimes->{3.395136565267788*^9}]
}, Open  ]]
}, Open  ]],

Cell["Read in any hidden imports", "Subsection",
 InitializationCell->True],

Cell[CellGroupData[{

Cell["\<\
Definition of auxiliary functions and local (static) variables\
\>", "Subsection",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsTypes", "=", 
  RowBox[{"{", "mfs", "}"}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{"{", "mfs", "}"}]], "Output",
 CellChangeTimes->{3.395136565330288*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Definition of the exported functions", "Subsection",
 InitializationCell->True],

Cell[CellGroupData[{

Cell["Removing quotes from strings", "Subsubsection"],

Cell["\<\
Since MAD8's TFS files have the strings delimited by quotes, ReadList returns \
strings containing quoted quotes (\"\\\"\").  We need to remove these from \
the columns of data, e.g., for the names of elements.  The following function \
will do it and leave numbers alone.  The order of pattern matching is for \
efficiency since we encounter Reals most often.\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"removeQuotes", "[", "x_Real", "]"}], ":=", "x"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"removeQuotes", "[", "x_String", "]"}], ":=", 
   RowBox[{"StringReplace", "[", 
    RowBox[{"x", ",", 
     RowBox[{"\"\<\\\"\>\"", "->", "\"\<\>\""}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"removeQuotes", "[", "x_", "]"}], ":=", "x"}]}], "Input",
 InitializationCell->True],

Cell["\<\
MAD9 no longer puts the quotes around the element names, so this is no longer \
necessary.  However it does not create any problems either.\
\>", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Removing leading and trailing blanks OBSOLETE, replaced by StringTrim\
\>", "Subsubsection",
 CellChangeTimes->{{3.630049682805483*^9, 3.6300496978347816`*^9}}],

Cell["\<\
Necessary for MAD9 descriptor lines since most quotes have been suppressed.  \
This can probably be made more efficient using new string manipulation \
functions.\
\>", "Text"],

Cell["\<\
(*
stringRemoveLeadingTrailingBlanks[str_] := Module[{after, before}, 
   StringJoin[Characters[str] //. {\" \", after___} -> {after} //. 
     {before___, \" \"} -> {before}]] 
     *)\
\>", "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.630049659551917*^9, 3.6300496733634224`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Functions for the header section", "Subsubsection"],

Cell[TextData[StyleBox["12/1/2015:  I think that I should make these \
functions private, only export tfsRead itself.  Probably do it by deleting \
usage messages and only setting options for tfsRead itself ",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.6300493666867685`*^9, 3.6300494255679665`*^9}}],

Cell["\<\
Parse a header line from a MAD TFS table, returning only the tag and its \
value.  The last character of the second word in the line, describing the \
format,  is used only to determine whether the last word is to be interpreted \
as a Fortran-form number or left as a string. In the latter case, double \
quotes are removed.  The three rules for substituting for the quotes seem to \
be necessary to avoid leading and trailing blanks on strings.  I don't quite \
understand this.\
\>", "Text"],

Cell[TextData[{
 "1/10/1999 now I do understand and had to add the ",
 StyleBox["stringRemoveLeadingTrailingBlanks", "Input"],
 " function to deal with it for MAD9 tables. OBSOLETE, use StringTrim from \
15/1/2015. "
}], "Text",
 CellChangeTimes->{{3.630049723150148*^9, 3.63004973796096*^9}}],

Cell["\<\
14/8/2001: after mail from James Jones at Daresbory, taking care to close the \
StringToStream objects.  This is a little tricky.\
\>", "Text"],

Cell["\<\
tfsParseDescriptorLine[str_String] := Module[{tp, tp2, tp3, strm1, strm2}, 
   (tp = First[ReadList[strm1 = StringToStream[str], {Word, Word, String}, 
        WordSeparators -> {\" \", \"\\\"\", \"\\t\", \"@\"}]]; Close[strm1]); \

    tp2 = Flatten[{First[tp], If[StringTake[tp[[2]], {-1}] == \"s\", 
        StringReplace[StringTrim[Last[tp]], 
         {\"\\\" \" -> \"\", \" \\\"\" -> \"\", \"\\\"\" -> \"\"}], 
        tp3 = ReadList[strm2 = StringToStream[Last[tp]], Number]; \
Close[strm2]; 
         tp3]}]; tp2]\
\>", "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.630049746954445*^9, 3.6300497500316052`*^9}}],

Cell["\<\
This function returns a list of three items from the header block in a TFS \
file.  The first item is a list of tags and values , the second is the names \
of the columns in the main data block and the last is the position in the \
file where the header block ends.  This can be used later to read the main \
data block.\
\>", "Text"],

Cell["\<\
We need a set of rules for transforming the TFS formats for ReadList.  Only \
necessary in order to read strings given in quotes, e.g., element names from \
MAD.  This will not work if the strings contain blanks.\
\>", "Text"],

Cell["\<\
17/8/2000 Added %d format that I just found in a new MAD8 SURVEY TFS output \
although it's probably meant to be %hd.  See email to Hans Grote today.\
\>", "Text"],

Cell["\<\
Options[tfsParseHeaderBlock] = {mfsVerbose -> False, 
    tfsFormatRules -> {\"%e\" -> Number, \"%hd\" -> Number, \"%d\" -> Number, \

      \"%lf\" -> Number, \"%f\" -> Number, \"%le\" -> Number, \"%s\" -> Word, \

      \"%12s\" -> Word, \"%16s\" -> Word, \"%23s\" -> Word, \"%32s\" -> Word, \
\"~\" -> Word}}; \
\>", "Input",
 InitializationCell->True],

Cell["\<\
14/8/2001: after mail from James Jones at Daresbury, took care to close the \
StringToStream objects.  Also found a few variables that were not localised \
to the Module in the following and elsewhere.  Changed verbose to vbose in \
various places.\
\>", "Text"],

Cell["\<\
tfsParseHeaderBlock[tfsFile_String, opts___Rule] := 
  Module[{tt, headers, keyvals, lastKeyPos, fmtrules, ll, fmts, tstream, \
vbose}, 
   vbose = mfsVerbose /. {opts} /. Options[tfsParseHeaderBlock]; 
    fmtrules = tfsFormatRules /. {opts} /. Options[tfsParseHeaderBlock]; 
    (tt = OpenRead[tfsFile]; ll = Find[tt, \"*\", AnchoredSearch -> True]; 
     headers = ReadList[tstream = StringToStream[ll], Word, 
       WordSeparators -> {\" \", \"*\", \",\"}]; Close[tstream]; Close[tt]); 
    (tt = OpenRead[tfsFile]; ll = Find[tt, \"$\", AnchoredSearch -> True]; 
     fmts = ReadList[tstream = StringToStream[ll], Word, WordSeparators -> 
         {\" \", \"$\", \",\"}] /. Flatten[fmtrules]; If[vbose, Print[fmts]]; \

     Close[tstream]; Close[tt]); (tt = OpenRead[tfsFile]; ll = \"\"; keyvals \
= {}; 
     lastKeyPos = 0; While[ !ll === EndOfFile, 
      If[StringLength[ll] > 0 && StringTake[ll, 1] == \"@\", 
        AppendTo[keyvals, tfsParseDescriptorLine[ll]]]; 
       lastKeyPos = StreamPosition[tt]; ll = Find[tt, {\"@\", \"$\", \"*\"}, 
         AnchoredSearch -> True]; ]; Close[tt]); {keyvals, fmts, headers, 
     lastKeyPos}]\
\>", "Input",
 InitializationCell->True],

Cell[TextData[{
 "Added three possible characters that begin lines in ",
 StyleBox["Find", "Input"],
 " command to allow the header lines to appear in any order.  This is \
necessary for MAD9 which now gives the column headers immediately before the \
columns."
}], "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create mfs data from TFS file", "Subsubsection"],

Cell["\<\
The following function reads all the information in a TFS table file and \
returns a mfs  data object. It also prints some information.\
\>", "Text"],

Cell[TextData[{
 "Using ",
 StyleBox["ReadList", "Input"],
 " is much faster than a ",
 StyleBox["While", "Input"],
 " with ",
 StyleBox["Read", "Input"],
 " and tests on each line. So we first make a copy of the file with some \
unwanted lines removed.  The header data block is parsed and the file is \
reopened at the position of the end of the header block.  Then we can suck \
all the data into the temporary variable ",
 StyleBox["cols", "Input"],
 "."
}], "Text"],

Cell["\<\
17/8/2002: More graceful treatment when the file does not exist, return an \
almost-empty  mfs object.  It would still  be good to check the contents of \
the file.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Options", "[", "tfsRead", "]"}], "=", 
  RowBox[{
   RowBox[{"Options", "[", "tfsParseHeaderBlock", "]"}], "\[Union]", 
   RowBox[{"{", 
    RowBox[{"keepTemporaryFile", "->", "False"}], "}"}]}]}]], "Code",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"tfsRead", "[", 
   RowBox[{"tfsFile_", ",", "opts___"}], "]"}], ":=", "\n", 
  RowBox[{"Which", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"StringQ", "[", "tfsFile", "]"}], "&&", 
     RowBox[{
      RowBox[{"FileType", "[", "tfsFile", "]"}], "===", "File"}]}], ",", 
    RowBox[{"tfsReadWork", "[", 
     RowBox[{"tfsFile", ",", "opts"}], "]"}], ",", "\n", 
    RowBox[{"StringMatchQ", "[", 
     RowBox[{"tfsFile", ",", "\"\<http://*\>\""}], "]"}], ",", 
    RowBox[{"tfsReadWork", "[", 
     RowBox[{"tfsFile", ",", "opts"}], "]"}], ",", "\n", 
    RowBox[{"StringMatchQ", "[", 
     RowBox[{"tfsFile", ",", "\"\<https://*\>\""}], "]"}], ",", 
    RowBox[{"tfsReadWork", "[", 
     RowBox[{"tfsFile", ",", "opts"}], "]"}], ",", "\[IndentingNewLine]", 
    "True", ",", 
    RowBox[{
     RowBox[{"Message", "[", 
      RowBox[{
       RowBox[{"tfsRead", "::", "\"\<notfound\>\""}], ",", "tfsFile"}], "]"}],
      ";", "\n", 
     RowBox[{"mfs", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"\"\<Non-existent file\>\"", ",", "tfsFile"}], "}"}], "}"}], 
       ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", "}"}], "}"}]}], "]"}]}]}], "\n", "]"}]}]], "Code",
 InitializationCell->True,
 CellChangeTimes->{{3.4347226601842575`*^9, 3.4347226696996994`*^9}, {
  3.5713983130701303`*^9, 3.57139835627345*^9}, {3.571409247004466*^9, 
  3.5714092554633117`*^9}, {3.5714094416799316`*^9, 3.5714094436601295`*^9}, {
  3.5714756409940224`*^9, 3.571475648096733*^9}, {3.6258916958649797`*^9, 
  3.62589170430758*^9}}],

Cell[BoxData[
 RowBox[{"tfsReadWork", "=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"$VersionNumber", "<", "9"}], ",", "tfsReadWork8", ",", 
    "tfsReadWork9"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.5714092904788127`*^9, 3.571409333073072*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"tfsReadWork8", "[", 
   RowBox[{"tfsFile_", ",", "opts___Rule"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "tempFile", ",", "keepTemp", ",", "tt", ",", "hh", ",", "cols", ",", 
      "vbose"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"tempFile", "=", 
      RowBox[{
       RowBox[{"Close", "[", 
        RowBox[{"OpenWrite", "[", "]"}], "]"}], "<>", "\"\<.tfs\>\""}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"vbose", "=", 
      RowBox[{
       RowBox[{"mfsVerbose", "/.", "\[InvisibleSpace]", 
        RowBox[{"{", "opts", "}"}]}], "/.", "\[InvisibleSpace]", 
       RowBox[{"Options", "[", "tfsRead", "]"}]}]}], ";", 
     RowBox[{"keepTemp", "=", 
      RowBox[{
       RowBox[{"keepTemporaryFile", "/.", "\[InvisibleSpace]", 
        RowBox[{"{", "opts", "}"}]}], "/.", "\[InvisibleSpace]", 
       RowBox[{"Options", "[", "tfsRead", "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{"tempFile", ",", 
       RowBox[{"Select", "[", 
        RowBox[{
         RowBox[{"Import", "[", 
          RowBox[{"tfsFile", ",", "\"\<Lines\>\""}], "]"}], ",", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"#1", ",", "\"\<*Segment*\>\"", ",", 
             RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}]}], "&"}]}], 
        "]"}], ",", "\"\<Lines\>\""}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"hh", "=", 
      RowBox[{"tfsParseHeaderBlock", "[", 
       RowBox[{"tempFile", ",", "opts"}], "]"}]}], ";", "\[IndentingNewLine]",
      "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"vbose", ",", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<Header block:\\n\>\"", ",", 
         RowBox[{"First", "[", "hh", "]"}], ",", "\n", 
         "\"\<\\nColumns labels:  \>\"", ",", "\n", 
         RowBox[{"hh", "\[LeftDoubleBracket]", 
          RowBox[{"-", "2"}], "\[RightDoubleBracket]"}], ",", 
         "\"\<\\nColumn formats:  \>\"", ",", 
         RowBox[{"hh", "\[LeftDoubleBracket]", 
          RowBox[{"-", "3"}], "\[RightDoubleBracket]"}], ",", 
         "\"\<\\nColumn data starts at position \>\"", ",", 
         RowBox[{"Last", "[", "hh", "]"}], ",", "\"\< in \>\"", ",", 
         "tempFile"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"tt", "=", 
      RowBox[{"OpenRead", "[", "tempFile", "]"}]}], ";", "\n", 
     RowBox[{"SetStreamPosition", "[", 
      RowBox[{"tt", ",", 
       RowBox[{"Last", "[", "hh", "]"}]}], "]"}], ";", "\n", 
     RowBox[{"cols", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"removeQuotes", ",", 
        RowBox[{"ReadList", "[", 
         RowBox[{"tt", ",", 
          RowBox[{"hh", "\[LeftDoubleBracket]", 
           RowBox[{"-", "3"}], "\[RightDoubleBracket]"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"-", "1"}], "}"}]}], "]"}]}], ";", "\n", 
     RowBox[{"Close", "[", "tt", "]"}], ";", "\n", 
     RowBox[{"If", "[", 
      RowBox[{"keepTemp", ",", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<Temporary file not deleted: \>\"", ",", "tempFile"}], 
        "]"}], ",", 
       RowBox[{"DeleteFile", "[", "tempFile", "]"}]}], "]"}], ";", "\n", 
     RowBox[{"mfsFixMAD8inconsistencies", "[", "\n", 
      RowBox[{"mfs", "[", 
       RowBox[{
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"First", "[", "hh", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\"\<tfsRead_File\>\"", ",", "tfsFile"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"\"\<Source_File\>\"", ",", 
              RowBox[{"File", "/.", 
               RowBox[{"FileInformation", "[", "tfsFile", "]"}]}]}], "}"}]}], 
           "}"}]}], "]"}], ",", 
        RowBox[{"hh", "\[LeftDoubleBracket]", 
         RowBox[{"-", "2"}], "\[RightDoubleBracket]"}], ",", "cols"}], "]"}], 
      "\n", "]"}]}]}], "]"}]}]], "Code",
 InitializationCell->True,
 CellChangeTimes->{{3.42598594225768*^9, 3.425985951944808*^9}, {
   3.425986585123618*^9, 3.4259866369185038`*^9}, {3.571399668946224*^9, 
   3.571399725445368*^9}, 3.5714092856213274`*^9, 3.571409585548317*^9, {
   3.5714096252192836`*^9, 3.571409662919053*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"tfsReadWork9", "[", 
    RowBox[{"tfsFile_", ",", 
     RowBox[{"OptionsPattern", "[", "tfsRead", "]"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tfslines", ",", "tfstable", ",", 
       RowBox[{"tempfn", "=", 
        RowBox[{
         RowBox[{"CreateTemporary", "[", "]"}], "<>", "\"\<.csv\>\""}]}]}], 
      "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"tfslines", "=", 
       RowBox[{"Import", "[", 
        RowBox[{"tfsFile", ",", "\"\<Lines\>\""}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"tfstable", "=", 
       RowBox[{"Import", "[", 
        RowBox[{"Export", "[", 
         RowBox[{"tempfn", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"StringReplace", "[", 
             RowBox[{
              RowBox[{"StringTrim", "[", "#", "]"}], ",", 
              RowBox[{
               RowBox[{"\"\< \>\"", ".."}], "\[Rule]", "\"\<,\>\""}]}], "]"}],
             "&"}], "/@", "tfslines"}], ",", "\"\<Lines\>\""}], "]"}], 
        "]"}]}], ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OptionValue", "[", "mfsVerbose", "]"}], ",", 
        "\"\<Temporary CSV file: \>\"", ",", "tempfn"}], "]"}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"OptionValue", "[", "keepTemporaryFile", "]"}], "]"}], ",", 
        RowBox[{"DeleteFile", "[", "tempfn", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"mfsFixMAD8inconsistencies", "[", "\[IndentingNewLine]", 
       RowBox[{"mfs", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Join", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Cases", "[", 
            RowBox[{"tfstable", ",", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"\"\<@\>\"", ",", "key_", ",", "_", ",", "val_"}], 
               "}"}], "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"key", ",", "val"}], "}"}]}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\"\<tfsRead_File\>\"", ",", "tfsFile"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"\"\<Source_File\>\"", ",", 
               RowBox[{"File", "/.", 
                RowBox[{"FileInformation", "[", "tfsFile", "]"}]}]}], "}"}]}],
             "}"}]}], "\[IndentingNewLine]", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Cases", "[", 
          RowBox[{"tfstable", ",", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\"\<*\>\"", ",", "colnames__"}], "}"}], "\[Rule]", 
            "colnames"}]}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Drop", "[", 
          RowBox[{"tfstable", ",", 
           RowBox[{"1", "+", 
            RowBox[{
             RowBox[{"Position", "[", 
              RowBox[{"tfstable", ",", 
               RowBox[{"{", 
                RowBox[{"\"\<*\>\"", ",", "__"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "1"}], "]"}], "]"}]}]}], "]"}]}], 
        "\[IndentingNewLine]", "]"}], "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.5714054172185116`*^9, 3.5714055078045692`*^9}, {
   3.571405598882676*^9, 3.571405833403126*^9}, {3.571405998441628*^9, 
   3.5714060059183755`*^9}, {3.571406077507534*^9, 3.5714061105198345`*^9}, 
   3.571406166956478*^9, {3.5714062867134523`*^9, 3.57140628709149*^9}, {
   3.571407425663241*^9, 3.571407462302576*^9}, 3.5714080470234795`*^9, {
   3.5714083399997745`*^9, 3.5714083492857027`*^9}, {3.571408395537328*^9, 
   3.5714084457493486`*^9}, {3.5714084762944026`*^9, 
   3.5714085112608986`*^9}, {3.5714085473695097`*^9, 
   3.5714086047072425`*^9}, {3.5714086638941607`*^9, 
   3.5714087285326242`*^9}, {3.571408914540223*^9, 3.5714089269774666`*^9}, {
   3.5714090970664735`*^9, 3.5714091275455213`*^9}, {3.571409162006967*^9, 
   3.5714091940551715`*^9}, {3.5714096750722685`*^9, 
   3.5714097135071115`*^9}, {3.571409972499008*^9, 3.571409977098468*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Utilities  for testing mfs objects  OK for V6 now", "Subsubsection",
 CellChangeTimes->{{3.414072434329686*^9, 3.414072434985924*^9}, 
   3.456554922529351*^9}],

Cell["These functions were originally in OpticsUtilities package.", "Text",
 CellChangeTimes->{{3.434715344027855*^9, 3.4347153540589123`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsColumnCheck", "[", 
   RowBox[{"optq_mfs", ",", 
    RowBox[{"cols", ":", 
     RowBox[{"{", 
      RowBox[{"_String", ".."}], "}"}]}], ",", "expr_", ",", 
    RowBox[{"exprfail_:", "$Failed"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "missing", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"missing", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{"cols", ",", 
        RowBox[{"mfsColumnNames", "[", "optq", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "missing", "]"}], ">", "0"}], ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"mfsColumnCheck", "::", "missingColumns"}], ",", 
          "missing"}], "]"}], ";", "exprfail"}], ",", "expr"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.4347155261181087`*^9, 3.4347155261181087`*^9}, {
  3.4565549629970655`*^9, 3.45655498098098*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsKeyCheck", "[", 
   RowBox[{"optq_mfs", ",", 
    RowBox[{"cols", ":", 
     RowBox[{"{", 
      RowBox[{"_String", ".."}], "}"}]}], ",", "expr_", ",", 
    RowBox[{"exprfail_:", "$Failed"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "missing", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"missing", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{"cols", ",", 
        RowBox[{"mfsKeyNames", "[", "optq", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "missing", "]"}], ">", "0"}], ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"mfsKeyCheck", "::", "missingKeys"}], ",", "missing"}], 
         "]"}], ";", "exprfail"}], ",", "expr"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.4347160427019405`*^9, 3.4347160438269186`*^9}}],

Cell[TextData[{
 Cell[BoxData["\<\"Tue 14 Jul 2009 12:10:22\"\>"], "Output",
  CellChangeTimes->{3.4565550225111666`*^9}],
 " added the following to handle the case where no columns or keys  are \
required."
}], "Text",
 CellChangeTimes->{{3.4565550245111156`*^9, 3.4565550624632688`*^9}, {
  3.456555099212328*^9, 3.4565551005716686`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsColumnCheck", "[", 
   RowBox[{"optq_mfs", ",", 
    RowBox[{"{", "}"}], ",", "expr_", ",", 
    RowBox[{"exprfail_:", "$Failed"}]}], "]"}], ":=", "expr"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.4565547913452096`*^9, 3.4565548200163507`*^9}, {
   3.4565549534973087`*^9, 3.4565550038085203`*^9}, {3.456555039901346*^9, 
   3.4565550409169455`*^9}, 3.456555113118222*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsKeyCheck", "[", 
   RowBox[{"optq_mfs", ",", 
    RowBox[{"{", "}"}], ",", "expr_", ",", 
    RowBox[{"exprfail_:", "$Failed"}]}], "]"}], ":=", "expr"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.4565551191180687`*^9, 3.456555128195961*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Extracting information from mfs data objects", "Subsubsection"],

Cell["The list of names of the keys", "Text"],

Cell["mfsKeyNames[qp_mfs] := First[Transpose[First[qp]]]", "Input",
 InitializationCell->True],

Cell["\<\
Need to handle errors properly since  unevaluated expressions involving mfs \
objects are usually long.\
\>", "Text"],

Cell["New version, 16/2/2006", "Text"],

Cell["\<\
mfsKeyValue[qp_mfs, key_String] := Module[{kv, pp}, kv = Cases[First[qp], \
{key, _}]; 
    If[kv == {}, Message[mfsKeyValue::notfound, key]; , Last[First[kv]]]]\
\>", "Input",
 InitializationCell->True],

Cell["\<\
N.B. This works by recursion for any nested list structure of the key names.\
\>", "Text",
 CellChangeTimes->{{3.434697479011495*^9, 3.4346975185888605`*^9}, {
  3.4346982230440845`*^9, 3.43469823107518*^9}}],

Cell["\<\
mfsKeyValue[qp_mfs, keys_List] := (mfsKeyValue[qp, #1] & ) /@ keys\
\>", "Input",
 InitializationCell->True],

Cell["\<\
mfsKeyValue[qp_mfs, key_] := (Message[mfsKeyValue::notkey, key]; )\
\>", "Input",
 InitializationCell->True],

Cell["Added the following overloading 16/2/2006.", "Text"],

Cell["mfsKeyValue[qp_mfs] := First[qp]", "Input",
 InitializationCell->True],

Cell["The list of names of the columns", "Text"],

Cell["mfsColumnNames[qp_mfs] := qp[[-2]]", "Input",
 InitializationCell->True],

Cell[TextData[{
 "Extract one of the columns using its name in the ",
 StyleBox["mfsColumnNames", "Input"],
 " list to locate its position."
}], "Text"],

Cell[TextData[{
 " New version 1/8/2006, to eliminate Column for ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Version 6."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsColumn", "[", 
   RowBox[{"qp_mfs", ",", "key_String"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{
     RowBox[{"pos", "=", 
      RowBox[{"Position", "[", 
       RowBox[{
        RowBox[{"mfsColumnNames", "[", "qp", "]"}], ",", "key"}], "]"}]}], 
     ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"pos", "\[Equal]", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"mfsColumn", "::", "\"\<notfound\>\""}], ",", "key"}], 
         "]"}], ";"}], ",", 
       RowBox[{"qp", "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "All", ",", 
         RowBox[{"pos", "\[LeftDoubleBracket]", 
          RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}]}], 
        "\[RightDoubleBracket]"}]}], "]"}]}]}], "]"}]}]], "Input",
 InitializationCell->True],

Cell["Make it work with sets of columns:", "Text"],

Cell["\<\
mfsColumn[qp_mfs, keys_List] := (mfsColumn[qp, #1] & ) /@ keys\
\>", "Input",
 InitializationCell->True],

Cell["mfsColumn[qp_mfs] := Last[qp]", "Input",
 InitializationCell->True],

Cell["\<\
Following added 3/11/2008.  Quite powerful but not all one could wish for.  \
Perhaps I can make it better.\
\>", "Text",
 CellChangeTimes->{{3.4347221322100196`*^9, 3.434722144912901*^9}, {
  3.4517995676813965`*^9, 3.451799572789823*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mfsRow", "[", 
     RowBox[{"qp_mfs", ",", "template_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"ff", ",", "tpos", ",", "nonstrings"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"nonstrings", "=", 
        RowBox[{"Union", "[", 
         RowBox[{"Cases", "[", 
          RowBox[{"template", ",", 
           RowBox[{"_", "?", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Not", "[", 
               RowBox[{"StringQ", "[", "#", "]"}], "]"}], "&"}], ")"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"-", "1"}], "}"}]}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"Cases", "[", 
            RowBox[{"template", ",", 
             RowBox[{"_", "?", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Not", "[", 
                 RowBox[{"StringQ", "[", "#", "]"}], "]"}], "&"}], ")"}]}], 
             ",", 
             RowBox[{"{", 
              RowBox[{"-", "1"}], "}"}]}], "]"}], "]"}], "\[Equal]", "0"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"mfsColumnCheck", "[", 
          RowBox[{"qp", ",", "\[IndentingNewLine]", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"{", "template", "}"}], "/.", 
              RowBox[{"x_Symbol", "\[Rule]", "List"}]}], ",", "_String", ",", 
             
             RowBox[{"-", "1"}]}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"tpos", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"First", "[", 
                 RowBox[{"First", "[", 
                  RowBox[{"Position", "[", 
                   RowBox[{
                    RowBox[{"qp", "\[LeftDoubleBracket]", 
                    RowBox[{"-", "2"}], "\[RightDoubleBracket]"}], ",", 
                    "#1"}], "]"}], "]"}], "]"}], "&"}], ",", "template", ",", 
               
               RowBox[{"{", 
                RowBox[{"-", "1"}], "}"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"ff", "[", "qpn_", "]"}], ":=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Part", "[", 
                 RowBox[{"qpn", ",", "#"}], "]"}], "&"}], ",", "tpos", ",", 
               RowBox[{"{", 
                RowBox[{"-", "1"}], "}"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"ff", "/@", 
             RowBox[{"qp", "\[LeftDoubleBracket]", 
              RowBox[{"-", "1"}], "\[RightDoubleBracket]"}]}]}], ",", 
           "\[IndentingNewLine]", "$Failed"}], "]"}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"mfsRow", "::", "invalid"}], ",", "nonstrings"}], "]"}], 
          ";", "$Failed"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mfsRow", "[", "qp_mfs", "]"}], ":=", 
  RowBox[{"Transpose", "[", 
   RowBox[{"Last", "[", "qp", "]"}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.434701109160545*^9, 3.434701130300764*^9}, {
   3.434701167534424*^9, 3.4347011939089174`*^9}, {3.434703959465193*^9, 
   3.4347039931989202`*^9}, {3.434704071181798*^9, 3.4347041531489744`*^9}, {
   3.4347042735372877`*^9, 3.4347042829433575`*^9}, {3.434716101169568*^9, 
   3.434716150293625*^9}, {3.4347163967107687`*^9, 3.4347164095073977`*^9}, {
   3.4347165166303406`*^9, 3.434716528067621*^9}, {3.4347165982537737`*^9, 
   3.434716600925597*^9}, {3.434716955684411*^9, 3.4347169617467947`*^9}, {
   3.4347175778443403`*^9, 3.4347175779224634`*^9}, 3.434717744309894*^9, 
   3.434718058163243*^9, {3.434720252730481*^9, 3.4347202990889664`*^9}, {
   3.4347217087494*^9, 3.434721787763508*^9}, {3.434721821090993*^9, 
   3.4347218439343047`*^9}, {3.4347219541353135`*^9, 3.434721957260254*^9}, {
   3.4347228796487937`*^9, 3.434722880398779*^9}, {3.4347231916584277`*^9, 
   3.4347231938927603`*^9}, {3.434723228907713*^9, 3.434723234220111*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsSpan", "[", 
   RowBox[{"opt_mfs", ",", 
    RowBox[{"col_:", "\"\<S\>\""}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "cd", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"cd", "=", 
      RowBox[{"mfsColumn", "[", 
       RowBox[{"opt", ",", "col"}], "]"}]}], ";", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Min", "[", "cd", "]"}], ",", 
       RowBox[{"Max", "[", "cd", "]"}]}], "}"}]}]}], "]"}]}]], "Code",
 CellChangeTimes->{3.6300490880518713`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Selection  within an mfs object", "Subsubsection"],

Cell["Extract a value of a parameter from a row.", "Text"],

Cell["\<\
mfsColumnValue[qp_mfs, row_List, key_String] := \
If[MemberQ[mfsColumnNames[qp], key], 
   First[Take[row, First[Position[mfsColumnNames[qp], key]]]], 
   Message[mfsColumnValue::notfound, key]]\
\>", "Input",
 InitializationCell->True],

Cell["Select rows satistying a certain criterion.", "Text"],

Cell["\<\
mfsSelect[qp_mfs, crit_Function] := 
  Module[{}, ReplacePart[qp, Select[Last[qp], crit[#1] & ], {-1}]]\
\>", "Input",
 InitializationCell->True],

Cell["\<\
A special case of mfsSelect - parameter values belong to a list.\
\>", "Text"],

Cell["\<\
mfsMember[qp_mfs, key_String, targetset_List] := 
  mfsSelect[qp, MemberQ[targetset, mfsColumnValue[qp, #1, key]] & ]\
\>", "Input",
 InitializationCell->True],

Cell["\<\
mfsNotMember[qp_mfs, key_String, targetset_List] := 
  mfsSelect[qp,  !MemberQ[targetset, mfsColumnValue[qp, #1, key]] & ]\
\>", "Input",
 InitializationCell->True],

Cell["\<\
Extract rows for which parameter values  lie within a specified range.  \
Normally min<max except for the special case of the azimuth \"S\" which is \
treated modulo the circumference (roughly speaking).  When max < min, values \
just to the left of the end of the sequence are translated to negative S \
values so that they  join smoothly to the beginning of the sequence. The \
implementation requires some surgery on the mfs object. This provides, e.g.,  \
plots of MAD  optical functions across the beginning of the sequence without \
the need to cycle it in MAD.  Negative values for min and max are also \
handled in the natural way.  \
\>", "Text"],

Cell[TextData[StyleBox["13.6.2009:  this is not satisfactory, think it \
through again together with mfsCycle, mfsOpticsRange.  Perhaps this function \
should not try to do anything about periodicity. \n7/7/2014 this is causing \
problems so commenting out part of the definitions, keeping only the simple \
version.",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.454752434654101*^9, 3.454752476559278*^9}, {
  3.6137359872242594`*^9, 3.61373601743728*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"mfsRange", "[", 
      RowBox[{"qp_mfs", ",", "\"\<S\>\"", ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"min_", ",", "max_"}], "}"}], "/;", 
        RowBox[{
         RowBox[{"Negative", "[", "min", "]"}], "||", 
         RowBox[{"Negative", "[", "max", "]"}]}]}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"circ", "=", 
         RowBox[{"mfsKeyValue", "[", 
          RowBox[{"qp", ",", "\"\<LENGTH\>\""}], "]"}]}], "}"}], ",", 
       RowBox[{"mfsRange", "[", 
        RowBox[{"qp", ",", "\"\<S\>\"", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Mod", "[", 
            RowBox[{"min", ",", "circ"}], "]"}], ",", 
           RowBox[{"Mod", "[", 
            RowBox[{"max", ",", "circ"}], "]"}]}], "}"}]}], "]"}]}], "]"}]}], 
    ";", "\n", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mfsRange", "[", 
      RowBox[{"qp_mfs", ",", "\"\<S\>\"", ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"min_", ",", "max_"}], "}"}], "/;", 
        RowBox[{"max", "<", "min"}]}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "svals", ",", "fromstart", ",", "toend", ",", "stoend", ",", "cols", 
         ",", "circ"}], "}"}], ",", 
       RowBox[{
        RowBox[{"circ", "=", 
         RowBox[{"mfsKeyValue", "[", 
          RowBox[{"qp", ",", "\"\<LENGTH\>\""}], "]"}]}], ";", 
        RowBox[{"svals", "=", 
         RowBox[{"mfsColumn", "[", 
          RowBox[{"qp", ",", "\"\<S\>\""}], "]"}]}], ";", 
        RowBox[{"fromstart", "=", 
         RowBox[{"Length", "[", 
          RowBox[{"TakeWhile", "[", 
           RowBox[{"svals", ",", 
            RowBox[{
             RowBox[{"#1", "\[LessEqual]", "max"}], "&"}]}], "]"}], "]"}]}], 
        ";", 
        RowBox[{"toend", "=", 
         RowBox[{"Length", "[", 
          RowBox[{"stoend", "=", 
           RowBox[{"TakeWhile", "[", 
            RowBox[{
             RowBox[{"Reverse", "[", "svals", "]"}], ",", 
             RowBox[{
              RowBox[{"#1", "\[GreaterEqual]", "min"}], "&"}]}], "]"}]}], 
          "]"}]}], ";", 
        RowBox[{"cols", "=", 
         RowBox[{"Last", "[", "qp", "]"}]}], ";", 
        RowBox[{"scolpos", "=", 
         RowBox[{"First", "[", 
          RowBox[{"Position", "[", 
           RowBox[{
            RowBox[{"qp", "\[LeftDoubleBracket]", 
             RowBox[{"-", "2"}], "\[RightDoubleBracket]"}], ",", 
            "\"\<S\>\""}], "]"}], "]"}]}], ";", 
        RowBox[{"ReplacePart", "[", 
         RowBox[{
          RowBox[{"ReplacePart", "[", 
           RowBox[{"qp", ",", 
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"Transpose", "[", 
               RowBox[{"ReplacePart", "[", 
                RowBox[{
                 RowBox[{"Transpose", "[", 
                  RowBox[{"Take", "[", 
                   RowBox[{"cols", ",", 
                    RowBox[{"-", "toend"}]}], "]"}], "]"}], ",", 
                 RowBox[{
                  RowBox[{"Reverse", "[", "stoend", "]"}], "-", "circ"}], ",",
                  "scolpos"}], "]"}], "]"}], ",", 
              RowBox[{"Take", "[", 
               RowBox[{"cols", ",", "fromstart"}], "]"}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"-", "1"}], "}"}]}], "]"}], ",", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"First", "[", "qp", "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
              "\"\<mfsRange\>\"", ",", 
               "\"\<Shift of S to include start of sequence.\>\""}], "}"}], 
             "}"}]}], "]"}], ",", 
          RowBox[{"{", "1", "}"}]}], "]"}]}]}], "]"}]}], ";"}], "\n", "*)"}], 
  " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"mfsRange", "[", 
    RowBox[{"qp_mfs", ",", "colname_String", ",", 
     RowBox[{"{", 
      RowBox[{"min_", ",", "max_"}], "}"}]}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"min", "<", "max"}], ",", 
     RowBox[{"mfsSelect", "[", 
      RowBox[{"qp", ",", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"mfsColumnValue", "[", 
           RowBox[{"qp", ",", "#1", ",", "colname"}], "]"}], 
          "\[GreaterEqual]", "min"}], "&&", 
         RowBox[{
          RowBox[{"mfsColumnValue", "[", 
           RowBox[{"qp", ",", "#1", ",", "colname"}], "]"}], "\[LessEqual]", 
          "max"}]}], "&"}]}], "]"}], ",", 
     RowBox[{"Message", "[", 
      RowBox[{
       RowBox[{"mfsRange", "::", "\"\<badarg\>\""}], ",", "min", ",", "max"}],
       "]"}]}], "]"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.613735970213558*^9, 3.613735983279865*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Editing mfs objects", "Subsubsection"],

Cell["Add an item to the key list.", "Text"],

Cell["\<\
mfsAddKey[qp_mfs, {key_String, value_}] := ReplacePart[qp, 
    Join[qp[[1]], {{key, value}}], 1]; 
mfsAddKey[qp_mfs, badarg_] := (Message[mfsAddKey::badarg, badarg]; )\
\>", "Input",
 InitializationCell->True],

Cell["\<\
mfsDeleteKey[qp_mfs, key_String] := Module[{qp1, pp}, 
    qp1 = First[qp]; pp = Position[qp1, key]; If[pp == {}, 
      Message[mfsKeyValue::notfound, key]; , ReplacePart[qp, 
       Select[qp1,  !First[#1] == key & ], 1]]]; 
       
mfsDeleteKey[qp_mfs, badarg_] := (Message[mfsDeleteKey::badarg, badarg]; )\
\>", "Input",
 InitializationCell->True],

Cell["\<\
mfsEditKey[qp_mfs, {key_String, newValue_}] := Module[{qp1, pp}, 
    qp1 = First[qp]; pp = Position[qp1, key]; If[pp == {}, 
      Message[mfsKeyValue::notfound, key]; , ReplacePart[qp, 
       ReplacePart[qp1, newValue, MapAt[#1 + 1 & , First[pp], -1]], 1]]]; 
       
mfsEditKey[qp_mfs, badarg_] := (Message[mfsEditKey::badarg, badarg]; )\
\>", "Input",
 InitializationCell->True],

Cell["Reverse the order of the rows in the block of columns.", "Text"],

Cell["mfsReverse[qp_mfs] := ReplacePart[qp, Reverse[Last[qp]], -1]", "Input",
 InitializationCell->True],

Cell["A function to remove a column or a set of columns.", "Text"],

Cell["\<\
mfsDeleteColumn[qp_mfs, colname_String] := Module[{colpos}, 
    colpos = Position[mfsColumnNames[qp], colname]; 
     mfs[First[qp], Drop[qp[[-2]], First[colpos]], (Drop[#1, First[colpos]] & \
) /@ 
       Last[qp]]]; \
\>", "Input",
 InitializationCell->True],

Cell["\<\
mfsDeleteColumn[qp_mfs, colnames:{__String}] := Module[{cols = colnames, qpr \
= qp}, 
   While[cols =!= {}, qpr = mfsDeleteColumn[qpr, First[cols]]; cols = \
Rest[cols]]; 
    qpr]\
\>", "Input",
 InitializationCell->True],

Cell["A function to add a column or set of columns", "Text"],

Cell["\<\
Old version using mfsMerge will sort columns into alphabetical order.  \
\>", "Text",
 CellChangeTimes->{{3.4257184337990904`*^9, 3.4257184492050447`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"mfsAddColumn", "[", 
     RowBox[{"qp_mfs", ",", "colname_String", ",", "col_List"}], "]"}], ":=", 
    
    RowBox[{"mfsMerge", "[", 
     RowBox[{"{", 
      RowBox[{"qp", ",", 
       RowBox[{"mfs", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "colname", "}"}], ",", 
         RowBox[{"Transpose", "[", 
          RowBox[{"{", "col", "}"}], "]"}]}], "]"}]}], "}"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mfsAddColumn", "[", 
   RowBox[{"qp_mfs", ",", 
    RowBox[{"colnames", ":", 
     RowBox[{"{", "__String", "}"}]}], ",", 
    RowBox[{"cols", ":", 
     RowBox[{"{", "__List", "}"}]}]}], "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"Equal", "@@", 
     RowBox[{"Length", "/@", "cols"}]}], ",", 
    RowBox[{"mfsMerge", "[", 
     RowBox[{"{", 
      RowBox[{"qp", ",", 
       RowBox[{"mfs", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", "colnames", ",", 
         RowBox[{"Transpose", "[", "cols", "]"}]}], "]"}]}], "}"}], "]"}], 
    ",", 
    RowBox[{
     RowBox[{"Message", "[", 
      RowBox[{"mfsAddColumn", "::", "\"\<collength\>\""}], "]"}], ";"}]}], 
   "]"}]}]}], "Input",
 Evaluatable->False,
 CellChangeTimes->{
  3.4257184298929152`*^9, {3.461672090662162*^9, 3.461672094521388*^9}},
 FontColor->GrayLevel[0.5]],

Cell[BoxData[
 RowBox[{"DateString", "[", "]"}]], "Input",
 CellChangeTimes->{{3.4257184769701366`*^9, 3.425718494594798*^9}}],

Cell["\<\
\"Tue 22 Jul 2008 14:28:15\" New version avoiding mfsMerge, written for \
Icosim2Preparation.nb\
\>", "Text",
 CellChangeTimes->{{3.4257184857668424`*^9, 3.4257185231255*^9}}],

Cell["", "Text"],

Cell["Replaced again 25/5/2009. ", "Text",
 CellChangeTimes->{{3.45230946629838*^9, 3.45230947473561*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Unprotect", "[", "mfsAddColumn", "]"}]], "Input",
 CellChangeTimes->{{3.4523134259393597`*^9, 3.452313433303268*^9}}],

Cell[BoxData[
 RowBox[{"{", "\<\"mfsAddColumn\"\>", "}"}]], "Output",
 CellChangeTimes->{3.4523134337557116`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsAddColumn", "[", 
   RowBox[{"qp_mfs", ",", 
    RowBox[{"{", 
     RowBox[{"colname_String", ",", "col_List"}], "}"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"mfs", "[", 
     RowBox[{
      RowBox[{"qp", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
      ",", 
      RowBox[{"Append", "[", 
       RowBox[{
        RowBox[{"qp", "\[LeftDoubleBracket]", 
         RowBox[{"-", "2"}], "\[RightDoubleBracket]"}], ",", "colname"}], 
       "]"}], ",", 
      RowBox[{"Transpose", "@", 
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"Transpose", "@", 
          RowBox[{"qp", "\[LeftDoubleBracket]", 
           RowBox[{"-", "1"}], "\[RightDoubleBracket]"}]}], ",", "col"}], 
        "]"}]}]}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.4257184147838306`*^9, 3.425718425517999*^9}, {
   3.4257188450880685`*^9, 3.4257189242115493`*^9}, {3.4257190943332825`*^9, 
   3.4257191032081127`*^9}, {3.4257192923607306`*^9, 
   3.4257192992043495`*^9}, {3.4257194253738017`*^9, 
   3.4257194307955723`*^9}, {3.4257196529944315`*^9, 3.425719659322435*^9}, {
   3.42572021448365*^9, 3.425720305278782*^9}, {3.42572110851336*^9, 
   3.425721113247644*^9}, {3.4522590819934635`*^9, 3.452259085915213*^9}, 
   3.452259117726695*^9, {3.4522596295071926`*^9, 3.452259632850836*^9}, {
   3.4522603293754215`*^9, 3.4522603382032638`*^9}, {3.452313373596328*^9, 
   3.452313415392746*^9}, {3.4523135047269354`*^9, 3.4523135176293755`*^9}, {
   3.4523136634216747`*^9, 3.4523136646085057`*^9}, {3.45231377879416*^9, 
   3.4523137792001815`*^9}, {3.4523138425551047`*^9, 3.452313844350968*^9}}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"mfsAddColumn", "[", 
     RowBox[{"qp_mfs", ",", 
      RowBox[{"colnames", ":", 
       RowBox[{"{", "__String", "}"}]}], ",", 
      RowBox[{"cols", ":", 
       RowBox[{"{", "__List", "}"}]}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Equal", "@@", 
          RowBox[{"Length", "/@", "cols"}]}], "&&", 
         RowBox[{
          RowBox[{"Length", "[", "colnames", "]"}], "\[Equal]", 
          RowBox[{"Length", "[", "cols", "]"}]}]}], ",", 
        RowBox[{"mfs", "[", 
         RowBox[{
          RowBox[{
          "qp", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"qp", "\[LeftDoubleBracket]", 
             RowBox[{"-", "2"}], "\[RightDoubleBracket]"}], ",", "colnames"}],
            "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Transpose", "[", 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"Transpose", "[", 
              RowBox[{"qp", "\[LeftDoubleBracket]", 
               RowBox[{"-", "1"}], "\[RightDoubleBracket]"}], "]"}], ",", 
             "cols"}], "]"}], "]"}]}], "]"}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{"mfsAddColumn", "::", "\"\<collength\>\""}], "]"}], ";", 
         "$Failed"}]}], "]"}]}], "]"}]}], ";"}]}]], "Input",
 CellChangeTimes->{{3.4257184147838306`*^9, 3.425718425517999*^9}, {
   3.4257188450880685`*^9, 3.4257189242115493`*^9}, {3.4257190943332825`*^9, 
   3.4257191032081127`*^9}, {3.4257192923607306`*^9, 
   3.4257192992043495`*^9}, {3.4257194253738017`*^9, 
   3.4257194307955723`*^9}, {3.4257196529944315`*^9, 3.425719659322435*^9}, {
   3.42572021448365*^9, 3.425720305278782*^9}, {3.42572110851336*^9, 
   3.425721113247644*^9}, {3.4522590819934635`*^9, 3.452259085915213*^9}, 
   3.452259117726695*^9},
 Background->GrayLevel[0.85]],

Cell["\<\
25/5/2009: New recursive definition and new syntax for multiple columns, \
since the above is a pain.   But NOT ACTIVE for now.  Can probably write it \
better with Fold.\
\>", "Text",
 CellChangeTimes->{{3.4522587243955326`*^9, 3.4522587501290836`*^9}, {
  3.4523094532050495`*^9, 3.452309484954033*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsAddColumn", "[", 
   RowBox[{"qp_mfs", ",", 
    RowBox[{"{", 
     RowBox[{"colname_String", ",", "col_List"}], "}"}], ",", "more__"}], 
   "]"}], ":=", 
  RowBox[{"mfsAddColumn", "[", 
   RowBox[{
    RowBox[{"mfsAddColumn", "[", 
     RowBox[{"qp", ",", "colname", ",", "col"}], "]"}], ",", "more"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.452258605024352*^9, 3.4522587192550716`*^9}},
 Background->GrayLevel[0.85]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Merging mfs objects", "Subsubsection"],

Cell["The function mfsHeaderMerge is not exported by the package.", "Text"],

Cell["\<\
mfsHeaderMerge[h:{__List}] := Module[{done = {}, rest = Union @@ h, key, \
tomerge}, 
   While[rest =!= {}, key = First[First[rest]]; 
      tomerge = Select[rest, First[#1] == key & ]; AppendTo[done, 
       If[Length[tomerge] == 1, First[tomerge], {key, Last /@ tomerge}]]; 
      rest = Complement[rest, tomerge]; ]; done]\
\>", "Input",
 InitializationCell->True],

Cell["\<\
A function to check that a given column matches up before merging.  It checks \
that the column values are numerically equal in each mfs object.  Note that \
if the named column is absent from any of the mfs objects, then it is assumed \
to match!  So the function only tests whether the list of mfs objects contain \
incompatible versions of a given column.\
\>", "Text"],

Cell["\<\
mfsColumnMatch[qp:{__mfs}, mcol_String] := 
  Module[{}, Equal @@ (mfsColumn[#1, mcol] & ) /@ 
     Select[qp, MemberQ[mfsColumnNames[#1], mcol] & ]]\
\>", "Input",
 InitializationCell->True],

Cell["Extend to a list of column names.", "Text"],

Cell["\<\
mfsColumnMatch[qp:{__mfs}, matchCols:{__String}] := 
  And @@ (mfsColumnMatch[qp, #1] & ) /@ matchCols\
\>", "Input",
 InitializationCell->True],

Cell["\<\
Need to take care of special cases where no matching columns are given.\
\>", "Text"],

Cell["\<\
mfsColumnMatch[qp:{__mfs}, {}] := True; 
mfsColumnMatch[qp:{__mfs}] := True\
\>", "Input",
 InitializationCell->True],

Cell["Options[mfsMerge] = {matchColumns -> {\"NAME\"}}; ", "Input",
 InitializationCell->True],

Cell["\<\
The following early version of mfsMerge is equivalent but goes in smaller \
steps.  Worth keeping in case I can no longer understand the optimised \
version.  Cell is not evaluatable.\
\>", "Text"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{"mfsMerge2", "[", 
    RowBox[{
     RowBox[{"qp", ":", 
      RowBox[{"{", "__mfs", "}"}]}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", "\n", "\t", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"matchCols", ",", "colswanted"}], "}"}], ",", "\n", "\t\t", 
     RowBox[{
      RowBox[{"matchCols", "=", 
       RowBox[{
        RowBox[{"matchColumns", "/.", 
         RowBox[{"{", "opts", "}"}]}], "/.", 
        RowBox[{"Options", "[", "mfsMerge", "]"}]}]}], ";", "\n", "\t\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"matchCols", "==", "Automatic"}], ",", "\n", "\t\t\t", 
        RowBox[{"matchCols", "=", 
         RowBox[{"Union", "@@", 
          RowBox[{"(", 
           RowBox[{"mfsColumnNames", "/@", "qp"}], ")"}]}]}]}], "\n", "\t\t", 
       "]"}], ";", "\n", "\t\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"mfsColumnMatch", "[", 
         RowBox[{"qp", ",", "matchCols"}], "]"}], ",", "\n", "\t\t\t", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Equal", "@@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", 
               RowBox[{"Last", "[", "#", "]"}], "]"}], "&"}], "/@", "qp"}], 
            ")"}]}], ",", "\n", "\t\t\t\t", 
          RowBox[{
           RowBox[{"Print", "[", 
            RowBox[{"allcolnames", "=", 
             RowBox[{"Join", "@@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Part", "[", 
                  RowBox[{"#", ",", 
                   RowBox[{"-", "2"}]}], "]"}], "&"}], "/@", "qp"}], 
               ")"}]}]}], "]"}], ";", "\n", "\t\t\t\t", 
           RowBox[{"Print", "[", 
            RowBox[{"colnameswanted", "=", 
             RowBox[{"cnwanted", "=", 
              RowBox[{"Union", "[", "allcolnames", "]"}]}]}], "]"}], ";", 
           "\n", "\t\t\t\t", 
           RowBox[{"allcols", "=", 
            RowBox[{"Transpose", "[", 
             StyleBox[
              RowBox[{"MapThread", "[", 
               RowBox[{"Join", ",", 
                RowBox[{"Last", "/@", "qp"}]}], "]"}],
              FontColor->RGBColor[1, 0, 0]], 
             StyleBox["]",
              FontColor->RGBColor[1, 0, 0]]}]}], 
           StyleBox[";",
            FontColor->RGBColor[1, 0, 0]], "\n", "\t\t\t\t", 
           RowBox[{"Print", "[", 
            RowBox[{"colswantedpos", "=", 
             RowBox[{"First", "/@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Position", "[", 
                  RowBox[{"allcolnames", ",", "#"}], "]"}], "&"}], "/@", 
                "colnameswanted"}], ")"}]}]}], "]"}], ";", "\n", "\t\t\t\t", 
           RowBox[{"colswanted", "=", 
            RowBox[{"Extract", "[", 
             RowBox[{"allcols", ",", "colswantedpos"}], "]"}]}], ";", "\n", 
           "\t\t", 
           RowBox[{"mfs", "[", "\n", "\t\t\t\t\t", 
            RowBox[{
             RowBox[{"mfsHeaderMerge", "[", 
              RowBox[{"First", "/@", "qp"}], "]"}], ",", "\n", "\t\t\t\t\t", 
             "colnameswanted", ",", "\n", "\t\t\t\t\t", 
             StyleBox[
              RowBox[{"Transpose", "[", "colswanted", "]"}],
              FontColor->RGBColor[1, 0, 0]]}], "\n", "\t\t\t\t", "]"}]}], ",",
           "\n", "\t\t\t", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Message", "[", 
             RowBox[{"mfsMerge", "::", "badmatch"}], "]"}], ";", "Null"}], 
           ")"}]}], "\n", "\t\t\t", "]"}], ",", "\n", "\t\t", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{"mfsMerge", "::", "collength"}], "]"}], ";", "Null"}], 
         ")"}]}], "\n", "\t\t", "]"}]}]}], "\n", "\t", "]"}]}], " ", 
  "*)"}]], "Input",
 Evaluatable->False,
 FontColor->RGBColor[0, 0, 1]],

Cell["\<\
Here is the operational version developed out of that, introducing fewer \
temporary variables but much deeper nesting of functions.\
\>", "Text"],

Cell["\<\
mfsMerge[qp:{__mfs}, (opts___)?OptionQ] := 
  Module[{matchCols, colnameswanted, allcolnames}, 
   matchCols = matchColumns /. {opts} /. Options[mfsMerge]; 
    If[matchCols == Automatic, matchCols = Union @@ mfsColumnNames /@ qp]; 
    If[mfsColumnMatch[qp, matchCols], If[Equal @@ (Length[Last[#1]] & ) /@ qp, 
      colnameswanted = Union[allcolnames = Join @@ (#1[[-2]] & ) /@ qp]; 
       mfs[mfsHeaderMerge[First /@ qp], colnameswanted, 
        Transpose[Extract[Transpose[MapThread[Join, Last /@ qp]], 
          First /@ (Position[allcolnames, #1] & ) /@ colnameswanted]]], 
      Message[mfsMerge::badmatch]; ], Message[mfsMerge::collength]; ]]\
\>", "Input",
 InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["Ordering the keys in an mfs object", "Subsubsection"],

Cell[TextData[{
 "An ordering function that will get the keys in a more sensible order than \
MAD dishes out.  It takes any elements that are in this list in the order in \
which they appear in it and moves them to the front.  The remaining keys are \
appended in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s canonical order."
}], "Text"],

Cell["\<\
Normally  we don't care about the order.  But it matters when mfs objects are \
exported, e.g., to CSV files.\
\>", "Text"],

Cell[TextData[{
 "Define the ordering of the keys we care about.  This should be an option of \
",
 StyleBox["mfsSortKey", "Input"]
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Options", "[", "mfsSortKey", "]"}], "=", 
  RowBox[{"{", 
   RowBox[{"mfsKeyOrder", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<COMMENT\>\"", ",", "\"\<NAME\>\"", ",", "\"\<TYPE\>\"", ",", 
      "\"\<OPTICS_SOURCE\>\"", ",", "\"\<DATE\>\"", ",", "\"\<TIME\>\"", ",", 
      "\"\<ORIGIN\>\"", ",", "\"\<CIRCUM\>\"", ",", "\"\<QX\>\"", ",", 
      "\"\<QY\>\""}], "}"}]}], "}"}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"mfsKeyOrder", "\[Rule]", 
   RowBox[{"{", 
    RowBox[{"\<\"COMMENT\"\>", ",", "\<\"NAME\"\>", ",", "\<\"TYPE\"\>", 
     ",", "\<\"OPTICS_SOURCE\"\>", ",", "\<\"DATE\"\>", ",", "\<\"TIME\"\>", 
     ",", "\<\"ORIGIN\"\>", ",", "\<\"CIRCUM\"\>", ",", "\<\"QX\"\>", 
     ",", "\<\"QY\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.395136565767785*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsSortKey", "[", 
    RowBox[{"qp_mfs", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"qp", ",", 
     RowBox[{"mfsSortKey", "[", 
      RowBox[{
       RowBox[{"qp", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
       ",", "opts"}], "]"}], ",", "1"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True],

Cell[TextData[{
 "N.B. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s pattern matcher did not know which of the following patterns to match \
first until I added the AtomQ pattern."
}], "Text"],

Cell[TextData[{
 Cell[BoxData["mfsKeyOrderedQ"], "Input",
  InitializationCell->True],
 " is an ordering function for a simple list of keys"
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsSortKey", "[", 
    RowBox[{
     RowBox[{"keys", ":", 
      RowBox[{"{", 
       RowBox[{"___", "?", "AtomQ"}], "}"}]}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mko", ",", "mfsKeyOrderedQ"}], "}"}], ",", 
     RowBox[{
      RowBox[{"mko", "=", 
       RowBox[{
        RowBox[{"mfsKeyOrder", "/.", "\[InvisibleSpace]", "opts"}], "/.", 
        "\[InvisibleSpace]", 
        RowBox[{"Options", "[", "mfsSortKey", "]"}]}]}], ";", 
      RowBox[{"mfsKeyOrderedQ", "=", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Position", "[", 
           RowBox[{"mko", ",", "#1"}], "]"}], "\[LeftDoubleBracket]", 
          RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "<", 
         RowBox[{
          RowBox[{"Position", "[", 
           RowBox[{"mko", ",", "#2"}], "]"}], "\[LeftDoubleBracket]", 
          RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}]}], "&"}]}], ";", 
      
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"Sort", "[", 
         RowBox[{
          RowBox[{"keys", "\[Intersection]", "mko"}], ",", "mfsKeyOrderedQ"}],
          "]"}], ",", 
        RowBox[{"Complement", "[", 
         RowBox[{"keys", ",", "mko"}], "]"}]}], "]"}]}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[TextData[{
 Cell[BoxData["mfsKeyOrderedQ2"], "Input",
  InitializationCell->True],
 " is an ordering function for a list of {key,value} pairs"
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsSortKey", "[", 
    RowBox[{
     RowBox[{"keys", ":", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"_", "?", "AtomQ"}], ",", 
          RowBox[{"_", "?", "AtomQ"}]}], "}"}], ".."}], "}"}]}], ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mko", ",", "mfsKeyOrderedQ2"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mko", "=", 
       RowBox[{
        RowBox[{"mfsKeyOrder", "/.", "opts"}], "/.", 
        RowBox[{"Options", "[", "mfsSortKey", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"mfsKeyOrderedQ2", "=", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Position", "[", 
           RowBox[{"mfsKeyOrder", ",", 
            RowBox[{"First", "[", "#1", "]"}]}], "]"}], 
          "\[LeftDoubleBracket]", 
          RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "<", 
         RowBox[{
          RowBox[{"Position", "[", 
           RowBox[{"mfsKeyOrder", ",", 
            RowBox[{"First", "[", "#2", "]"}]}], "]"}], 
          "\[LeftDoubleBracket]", 
          RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}]}], "&"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Join", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Sort", "[", 
         RowBox[{
          RowBox[{"Select", "[", 
           RowBox[{"keys", ",", 
            RowBox[{
             RowBox[{"MemberQ", "[", 
              RowBox[{"mfsKeyOrder", ",", " ", 
               RowBox[{"First", "[", "#", "]"}]}], "]"}], "&"}]}], "]"}], ",",
           "mfsKeyOrderedQ2"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Select", "[", 
         RowBox[{"keys", ",", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"MemberQ", "[", 
             RowBox[{"mfsKeyOrder", ",", 
              RowBox[{"First", "[", "#", "]"}]}], "]"}]}], "&"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsSortKey", "[", 
   RowBox[{"keys_", ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", 
  RowBox[{"Sort", "[", "keys", "]"}]}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["Ordering the columns in an mfs object ", "Subsubsection",
 CellChangeTimes->{{3.4340931391575885`*^9, 3.4340931474387326`*^9}}],

Cell["\<\
Same default sorting function as Sort (documentation doesn't actually tell \
you what it is ...).\
\>", "Text",
 CellChangeTimes->{{3.434093729337534*^9, 3.434093749884146*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsSortColumns", "[", 
   RowBox[{"opt_mfs", ",", 
    RowBox[{"p_:", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"OrderedQ", "[", 
        RowBox[{"{", 
         RowBox[{"#1", ",", "#2"}], "}"}], "]"}], "&"}], ")"}]}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"newkeys", ",", "neworder", ",", "newcols"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"newkeys", "=", 
      RowBox[{"Sort", "[", 
       RowBox[{
        RowBox[{"opt", "\[LeftDoubleBracket]", 
         RowBox[{"-", "2"}], "\[RightDoubleBracket]"}], ",", "p"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"neworder", "=", 
      RowBox[{"Ordering", "[", 
       RowBox[{"opt", "[", 
        RowBox[{"[", 
         RowBox[{"-", "2"}], "]"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"newcols", "=", 
      RowBox[{"Transpose", "[", 
       RowBox[{
        RowBox[{"Transpose", "[", 
         RowBox[{"opt", "\[LeftDoubleBracket]", 
          RowBox[{"-", "1"}], "\[RightDoubleBracket]"}], "]"}], 
        "\[LeftDoubleBracket]", "neworder", "\[RightDoubleBracket]"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"ReplacePart", "[", 
      RowBox[{"opt", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "2"}], "\[Rule]", "newkeys"}], ",", 
         RowBox[{
          RowBox[{"-", "1"}], "\[Rule]", "newcols"}]}], "}"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.434092287809111*^9, 3.434092460181905*^9}, {
   3.4340925147749557`*^9, 3.4340925692586336`*^9}, {3.434092647195136*^9, 
   3.4340926539138*^9}, 3.4340931654541273`*^9, {3.4340932610310287`*^9, 
   3.434093291640012*^9}, 3.4340935661833725`*^9, {3.4340936226513996`*^9, 
   3.4340936258544836`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Removing drifts from Optics-type tables", "Subsubsection"],

Cell["\<\
A function to remove all the drift spaces from an optics table, knowing the \
way MAD8 or MADX invents names for them.\
\>", "Text",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mfsRemoveDrifts", "[", "seq_mfs", "]"}], ":=", 
   RowBox[{"mfsSelect", "[", 
    RowBox[{"seq", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"StringMatchQ", "[", 
          RowBox[{
           RowBox[{"mfsColumnValue", "[", 
            RowBox[{"seq", ",", "#", ",", "\"\<NAME\>\""}], "]"}], ",", 
           "\"\<DRIFT_*\>\""}], "]"}], "]"}], "&&", 
        RowBox[{"Not", "[", 
         RowBox[{"StringMatchQ", "[", 
          RowBox[{
           RowBox[{"mfsColumnValue", "[", 
            RowBox[{"seq", ",", "#", ",", "\"\<NAME\>\""}], "]"}], ",", 
           "\"\<[*]\>\""}], "]"}], "]"}]}], ")"}], "&"}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["Transforming mfs objects into rules", "Subsubsection"],

Cell["\<\
Sometimes a KEY name is identical with a COLUMN name (e.g. NAME in a TWISS \
table).  The following function transforms an mfs object into a list of \
rules, renaming any KEY names that clash with column names.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsToRules", "[", "opt_mfs", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "dup", "}"}], ",", 
    RowBox[{
     RowBox[{"dup", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"mfsColumnNames", "[", "opt", "]"}], ")"}], 
        "\[Intersection]", 
        RowBox[{"(", 
         RowBox[{"mfsKeyNames", "[", "opt", "]"}], ")"}]}], "/.", 
       "\[InvisibleSpace]", 
       RowBox[{"s_String", "\[RuleDelayed]", 
        RowBox[{"s", "\[Rule]", 
         RowBox[{"s", "<>", "\"\<_KEY\>\""}]}]}]}]}], ";", 
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Apply", "[", 
         RowBox[{"Rule", ",", 
          RowBox[{
           RowBox[{
           "opt", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "/.",
            "\[InvisibleSpace]", "dup"}], ",", 
          RowBox[{"{", "1", "}"}]}], "]"}], ",", 
        RowBox[{"MapThread", "[", 
         RowBox[{"Rule", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"opt", "\[LeftDoubleBracket]", 
             RowBox[{"-", "2"}], "\[RightDoubleBracket]"}], ",", 
            RowBox[{"Transpose", "[", 
             RowBox[{"opt", "\[LeftDoubleBracket]", 
              RowBox[{"-", "1"}], "\[RightDoubleBracket]"}], "]"}]}], "}"}]}],
          "]"}]}], "}"}], "]"}]}]}], "]"}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsToRules", "[", "fn_String", "]"}], ":=", 
  RowBox[{"mfsToRules", "[", 
   RowBox[{"tfsRead", "[", "fn", "]"}], "]"}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsToRules", "[", 
   RowBox[{"opt_mfs", ",", "elname_String"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "nams", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"nams", "=", 
      RowBox[{"mfsColumn", "[", 
       RowBox[{"opt", ",", "\"\<NAME\>\""}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"MemberQ", "[", 
        RowBox[{"nams", ",", "elname"}], "]"}], ",", 
       RowBox[{"MapThread", "[", 
        RowBox[{"Rule", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"opt", "[", 
            RowBox[{"[", 
             RowBox[{"-", "2"}], "]"}], "]"}], ",", 
           RowBox[{"opt", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"-", "1"}], ",", 
              RowBox[{
               RowBox[{"Position", "[", 
                RowBox[{"nams", ",", "elname"}], "]"}], 
               "\[LeftDoubleBracket]", 
               RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}]}], "]"}], 
            "]"}]}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"mfsToRules", "::", "missingElement"}], ",", "elname"}], 
         "]"}], ";", "$Failed"}]}], "\[IndentingNewLine]", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsToRules", "[", 
   RowBox[{"fn_String", ",", "elname_String"}], "]"}], ":=", 
  RowBox[{"mfsToRules", "[", 
   RowBox[{
    RowBox[{"tfsRead", "[", "fn", "]"}], ",", "elname"}], "]"}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsToRules", "[", 
   RowBox[{"opt_mfs", ",", "elname_String", ",", 
    RowBox[{"cols", ":", 
     RowBox[{"{", 
      RowBox[{"_String", "..."}], "}"}]}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "missingcols", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"missingcols", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{"cols", ",", 
        RowBox[{"opt", "[", 
         RowBox[{"[", 
          RowBox[{"-", "2"}], "]"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"missingcols", "\[NotEqual]", " ", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"Message", "[", 
        RowBox[{
         RowBox[{"mfsToRules", "::", "missingColumns"}], ",", "missingcols"}],
         "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Select", "[", 
      RowBox[{
       RowBox[{"mfsToRules", "[", 
        RowBox[{"opt", ",", "elname"}], "]"}], ",", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"cols", ",", 
          RowBox[{"First", "[", "#", "]"}]}], "]"}], "&"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsToRules", "[", 
   RowBox[{"fn_String", ",", "elname_String", ",", 
    RowBox[{"cols", ":", 
     RowBox[{"{", 
      RowBox[{"_String", "..."}], "}"}]}]}], "]"}], ":=", 
  RowBox[{"mfsToRules", "[", 
   RowBox[{
    RowBox[{"tfsRead", "[", "fn", "]"}], ",", "elname", ",", "cols"}], 
   "]"}]}]], "Input",
 InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exporting and importing mfs objects", "Subsubsection",
 CellChangeTimes->{{3.4257918456796403`*^9, 3.4257918490702*^9}}],

Cell["\<\
Export to CSV format.  Among other things, this will replace the old tfsxl \
filter script for converting TFS files to CSV.\
\>", "Text"],

Cell["First  version of the function transforms an mfs object.", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsToCSV", "[", 
   RowBox[{"fn_String", ",", "tt_mfs"}], "]"}], ":=", 
  RowBox[{"Export", "[", 
   RowBox[{"fn", ",", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"mfsSortKey", "[", 
       RowBox[{"First", "[", "tt", "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"mfsColumnNames", "[", "tt", "]"}], "}"}], ",", 
      RowBox[{"mfsColumn", "[", "tt", "]"}]}], "]"}], ",", "\"\<CSV\>\""}], 
   "]"}]}]], "Input",
 InitializationCell->True],

Cell["Next version transforms a file with the proper extension.", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsToCSV", "[", 
   RowBox[{"tfsfn_String", "/;", 
    RowBox[{"StringMatchQ", "[", 
     RowBox[{"tfsfn", ",", "\"\<*.tfs\>\""}], "]"}]}], "]"}], ":=", 
  RowBox[{"mfsToCSV", "[", 
   RowBox[{
    RowBox[{"StringReplace", "[", 
     RowBox[{"tfsfn", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<.tfs\>\"", "\[Rule]", "\"\<.csv\>\""}], "}"}]}], "]"}], 
    ",", 
    RowBox[{"tfsRead", "[", "tfsfn", "]"}]}], "]"}]}]], "Input",
 InitializationCell->True],

Cell["\<\
Finally,  transform a file with the wrong extension, should that be wanted.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsToCSV", "[", 
   RowBox[{"tfsfn_String", "/;", 
    RowBox[{"!", 
     RowBox[{"StringMatchQ", "[", 
      RowBox[{"tfsfn", ",", "\"\<*.tfs\>\""}], "]"}]}]}], "]"}], ":=", 
  RowBox[{"mfsToCSV", "[", 
   RowBox[{
    RowBox[{"tfsfn", "<>", "\"\<.csv\>\""}], ",", 
    RowBox[{"tfsRead", "[", "tfsfn", "]"}]}], "]"}]}]], "Input",
 InitializationCell->True],

Cell["\<\
Added this 23/7/2008:  it splits the list into blocks of rows of equal \
length.  Then it checks that the first block (to be interpreted as \
{key,value} pairs) has length 2 and that there is a last block (to be \
interpreted  as the columns).  It checks that the first element of each row \
of the first block is a string (key)  and that the first row of the last \
block also contains only strings (the column names).  Any intervening blocks \
of rows will not be used (there is no warning about this).  If mfs data \
structures are later extended, this function may need changes.\
\>", "Text",
 CellChangeTimes->{{3.4257918605387297`*^9, 3.425791866382368*^9}, {
   3.425791899537981*^9, 3.4257920931592636`*^9}, 3.42630726723083*^9}],

Cell["\<\
27/10/2008: found a problem:  if the CSV files are opened and saved again by \
Excel, they become rectangular, i.e., a lot of commas are added to the header \
block so that those rows are padded out with  zero-length strings \"\" to \
have the same length as the main column block.  Adding DeleteCases[..., Null] \
as a fix.\
\>", "Text",
 CellChangeTimes->{{3.4340899862916956`*^9, 3.4340900912434773`*^9}, {
  3.434090124102432*^9, 3.434090206976371*^9}, {3.4340902402259455`*^9, 
  3.4340902583350887`*^9}, {3.434090352052639*^9, 3.4340903596462917`*^9}}],

Cell["This should work for importing from Web.", "Text",
 CellChangeTimes->{{3.4263072694026775`*^9, 3.426307276683834*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Unprotect", "[", "mfsFromCSV", "]"}]], "Input",
 CellChangeTimes->{{3.4340902101638303`*^9, 3.4340902169293685`*^9}}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.434090217288739*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsFromCSV", "[", "csvFile_String", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"csvspl", ",", "goodShape", ",", "goodKeyColNames"}], "}"}], ",", 
    RowBox[{
     RowBox[{"csvspl", "=", 
      RowBox[{"Split", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"Import", "[", 
          RowBox[{"csvFile", ",", "\"\<CSV\>\""}], "]"}], "/.", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"key_", ",", "val_", ",", 
            RowBox[{"\"\<\>\"", ".."}]}], "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"key", ",", "val"}], "}"}]}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "#1", "]"}], "\[Equal]", 
          RowBox[{"Length", "[", "#2", "]"}]}], "&"}]}], "]"}]}], ";", 
     RowBox[{"goodShape", "=", 
      RowBox[{"MatchQ", "[", 
       RowBox[{
        RowBox[{"Dimensions", "/@", "csvspl"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"_", ",", "2"}], "}"}], ",", "___", ",", 
          RowBox[{"{", 
           RowBox[{"_Integer", ",", "c_Integer"}], "}"}]}], "}"}]}], "]"}]}], 
     ";", 
     RowBox[{"goodKeyColNames", "=", 
      RowBox[{
       RowBox[{"Union", "[", 
        RowBox[{"Head", "/@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"First", "[", 
            RowBox[{"Last", "[", "csvspl", "]"}], "]"}], "\[Union]", 
           RowBox[{"csvspl", "\[LeftDoubleBracket]", 
            RowBox[{"1", ",", "All", ",", "1"}], "\[RightDoubleBracket]"}]}], 
          ")"}]}], "]"}], "===", 
       RowBox[{"{", "String", "}"}]}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"goodShape", "&&", "goodKeyColNames"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"mfs", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Append", "[", 
          RowBox[{
           RowBox[{"First", "[", "csvspl", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"\"\<mfsFromCSV-Source-File\>\"", ",", "csvFile"}], 
            "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"First", "[", 
          RowBox[{"Last", "[", "csvspl", "]"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Rest", "[", 
          RowBox[{"Last", "[", "csvspl", "]"}], "]"}]}], 
        "\[IndentingNewLine]", "]"}], ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"mfsFromCSV", "::", "\"\<invalid\>\""}], ",", "csvFile"}], 
         "]"}], ";", "$Failed"}]}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.4257881582348156`*^9, 3.4257881863280263`*^9}, {
   3.425788241420718*^9, 3.42578827596693*^9}, {3.425788338590728*^9, 
   3.4257883972614765`*^9}, {3.425788437245084*^9, 3.4257884382294397`*^9}, {
   3.4257886473348*^9, 3.425788654819031*^9}, {3.4257886946932654`*^9, 
   3.4257888798928347`*^9}, {3.425788911517227*^9, 3.4257889516727066`*^9}, {
   3.4257890085622387`*^9, 3.425789040171007*^9}, {3.4257890961855564`*^9, 
   3.4257890974042835`*^9}, {3.425789203074129*^9, 3.4257892635260935`*^9}, {
   3.4257910258360066`*^9, 3.4257910589134965`*^9}, {3.42579111550616*^9, 
   3.4257911894109907`*^9}, {3.4257912355507298`*^9, 3.425791315189826*^9}, {
   3.425791381501053*^9, 3.4257914538121643`*^9}, {3.4257915235452003`*^9, 
   3.425791546951001*^9}, {3.4257915901532965`*^9, 3.4257915911064034`*^9}, 
   3.42630729730857*^9, {3.426310671390381*^9, 3.426310696186939*^9}, {
   3.434090224663645*^9, 3.434090236288496*^9}, {3.434090416489314*^9, 
   3.434090425098579*^9}, 3.4340906802046885`*^9, 3.4970924858721924`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Correcting inconsistencies  in MAD Version 8 output", "Subsubsection"],

Cell[TextData[{
 "TFS files from MAD  Version 8 and MAD_X have some problems.  The following \
function returns a new ",
 StyleBox["mfs", "Input"],
 " object with some of those inconsistencies dealts with, as follow.  In most \
cases, this will produce something closer to the output from MAD  Version 9 \
and avoid overlap of names of closed orbit components with tracked \
coordinates. \nSince MAD-X  still uses \"X\", \"PX\", .... instead of \"XC\", \
\"PXC\" in TWISS tables, this also works for it.\nIt should probably also \
deal with SURVEY tables where \"X\", \"Y\" are used for global cartesian \
coordinates.  They  could be changed to \"XG\", \"YG\", \"ZG\", etc.\nHowever \
I should really go through the various sorts of table systematically and \
check all cases."
}], "Text",
 CellChangeTimes->{{3.4970924015753174`*^9, 3.4970924039503174`*^9}}],

Cell[TextData[{
 "Name the momentum of the 3rd mode properly in tracking data.  The ",
 Cell[BoxData[
  RowBox[{"\<\"DELTAP\"\>", "\[Rule]", "\<\"PTC\"\>"}]], "Input",
  InitializationCell->True],
 " deals with MAD8 while ",
 Cell[BoxData[
  RowBox[{"\<\"PT\"\>", "->", "\<\"PTC\"\>"}]], "Input",
  InitializationCell->True],
 " deals with MAD-X.   Check for MAD-8 OPTICS table added 26/1/2005. "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsFixMAD8inconsistencies", "[", "qp_mfs", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"kv", ",", "ch"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"kv", "=", 
      RowBox[{
       RowBox[{"First", "[", "qp", "]"}], "/.", 
       RowBox[{"{", "\[IndentingNewLine]", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<X\>\"", ",", "x_"}], "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<XC\>\"", ",", "x"}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<PX\>\"", ",", "px_"}], "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<PXC\>\"", ",", "px"}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<Y\>\"", ",", "y_"}], "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<YC\>\"", ",", "y"}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<PY\>\"", ",", "py_"}], "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<PYC\>\"", ",", "py"}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<T\>\"", ",", "t_"}], "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<TC\>\"", ",", "t"}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<COMMENT\>\"", ",", "cmt_"}], "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<TITLE\>\"", ",", "cmt"}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<NAME\>\"", ",", "nam_"}], "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<TableName\>\"", ",", "nam"}], "}"}]}]}], 
        "\[IndentingNewLine]", "}"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"kv", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"kv", ",", 
          RowBox[{"{", 
           RowBox[{"\"\<TYPE\>\"", ",", "\"\<TWISS\>\""}], "}"}]}], "]"}], 
        ",", "kv", ",", 
        RowBox[{"kv", "/.", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<DELTAP\>\"", ",", "pt_"}], "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<PTC\>\"", ",", "pt"}], "}"}]}]}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ch", "=", 
      RowBox[{
       RowBox[{"qp", "\[LeftDoubleBracket]", 
        RowBox[{"-", "2"}], "\[RightDoubleBracket]"}], "/.", 
       RowBox[{"{", 
        RowBox[{"\"\<DELTAP\>\"", "\[Rule]", "\"\<PT\>\""}], "}"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"Or", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"kv", ",", 
           RowBox[{"{", 
            RowBox[{"\"\<TYPE\>\"", ",", "\"\<TWISS\>\""}], "}"}]}], "]"}], 
         ",", 
         RowBox[{"MemberQ", "[", 
          RowBox[{"kv", ",", 
           RowBox[{"{", 
            RowBox[{"\"\<TYPE\>\"", ",", "\"\<APERTURE\>\""}], "}"}]}], "]"}],
          ",", "\[IndentingNewLine]", 
         RowBox[{"MemberQ", "[", 
          RowBox[{"kv", ",", 
           RowBox[{"{", 
            RowBox[{"\"\<TYPE\>\"", ",", "\"\<OPTICS\>\""}], "}"}]}], "]"}]}],
         "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"ch", "=", 
        RowBox[{"ch", "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<X\>\"", "\[Rule]", "\"\<XC\>\""}], ",", 
           RowBox[{"\"\<PX\>\"", "\[Rule]", "\"\<PXC\>\""}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"\"\<Y\>\"", "\[Rule]", "\"\<YC\>\""}], ",", 
           RowBox[{"\"\<PY\>\"", "\[Rule]", "\"\<PYC\>\""}], ",", 
           RowBox[{"\"\<T\>\"", "\[Rule]", "\"\<TC\>\""}], ",", 
           RowBox[{"\"\<DELTAP\>\"", "\[Rule]", "\"\<PTC\>\""}], ",", 
           RowBox[{"\"\<PT\>\"", "->", "\"\<PTC\>\""}]}], "}"}]}]}]}], "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"ReplacePart", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ReplacePart", "[", 
        RowBox[{"qp", ",", "kv", ",", 
         RowBox[{"{", "1", "}"}]}], "]"}], ",", "\[IndentingNewLine]", "ch", 
       ",", 
       RowBox[{"{", 
        RowBox[{"-", "2"}], "}"}]}], "\[IndentingNewLine]", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.4970923759034424`*^9, 3.4970923759503174`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsConvertMAD8toMAD9", "[", "qp_mfs", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"kv", ",", "ch"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"kv", "=", 
      RowBox[{
       RowBox[{"First", "[", "qp", "]"}], "/.", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<GAMTR\>\"", ",", "x_"}], "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<GAMMATR\>\"", ",", "x"}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<CIRCUM\>\"", ",", "circ_"}], "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<LENGTH\>\"", ",", "circ"}], "}"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<COMMENT\>\"", ",", "com_"}], "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<TITLE\>\"", ",", "com"}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<QX\>\"", ",", "qx_"}], "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<Q1\>\"", ",", "qx"}], "}"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<QY\>\"", ",", "qy_"}], "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<Q2\>\"", ",", "qy"}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<XIX\>\"", ",", "xix_"}], "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<DQ1\>\"", ",", "xix"}], "}"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<XIY\>\"", ",", "xiy_"}], "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<DQ2\>\"", ",", "xiy"}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<X\>\"", ",", "x_"}], "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<XC\>\"", ",", "x"}], "}"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<PX\>\"", ",", "px_"}], "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<PXC\>\"", ",", "px"}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<XIX\>\"", ",", "xix_"}], "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<DQ1\>\"", ",", "xix"}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<PY\>\"", ",", "py_"}], "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<PYC\>\"", ",", "py"}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<T\>\"", ",", "t_"}], "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<TC\>\"", ",", "x"}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<DELTAP\>\"", ",", "pt_"}], "}"}], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<PTC\>\"", ",", "pt"}], "}"}]}]}], 
        "\[IndentingNewLine]", "}"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"ch", "=", 
      RowBox[{
       RowBox[{"qp", "\[LeftDoubleBracket]", 
        RowBox[{"-", "2"}], "\[RightDoubleBracket]"}], "/.", 
       RowBox[{"{", 
        RowBox[{"\"\<DELTAP\>\"", "\[Rule]", "\"\<PT\>\""}], "}"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ReplacePart", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ReplacePart", "[", 
        RowBox[{"qp", ",", "kv", ",", 
         RowBox[{"{", "1", "}"}]}], "]"}], ",", "\[IndentingNewLine]", "ch", 
       ",", 
       RowBox[{"{", 
        RowBox[{"-", "2"}], "}"}]}], "\[IndentingNewLine]", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["End the private context", "Subsection",
 InitializationCell->True],

Cell[CellGroupData[{

Cell["End[ ]", "Input",
 InitializationCell->True],

Cell[BoxData["\<\"Madtomma`Mfs`Mfs`Private`\"\>"], "Output",
 CellChangeTimes->{3.395136565939659*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Epilogue", "Section",
 InitializationCell->True],

Cell["This section protects exported symbols and ends the package.", "Text"],

Cell[CellGroupData[{

Cell["Protect exported symbols", "Subsection",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"Protect", "[", 
   RowBox[{
   "mfsTypes", ",", "tfsParseDescriptorLine", ",", "tfsParseHeaderBlock", ",",
     "mfsColumn", ",", "mfsSelect", ",", " ", "mfsMember", ",", " ", 
    "mfsRange", ",", "mfsReverse", ",", "mfsAddKey", ",", "mfsKeyNames", ",", 
    "mfsColumnNames", ",", "mfsKeyValue", ",", "mfsColumnValue", ",", 
    "mfsEditKey", ",", "mfsDeleteColumn", ",", "mfsAddColumn", ",", 
    "mfsMerge", ",", "mfsDeleteKey"}], "\n", "]"}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.4347226974022927`*^9, 3.43472270377717*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["End the package context", "Subsection",
 InitializationCell->True],

Cell["EndPackage[ ]", "Input",
 InitializationCell->True],

Cell["\<\
Open the palette to make it easy.  This has to be done outside the package \
context.\
\>", "Text"],

Cell["\<\
Open the palette for the package.  Doing it this way reads the notebook into \
the kernel and then puts a copy on the screen.  This is better than using \
NotebookOpen because it works with remote kernels.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NotebookPut", "[", 
  RowBox[{"Get", "[", 
   RowBox[{"ToFileName", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Madtomma\>\"", ",", "\"\<Mfs\>\""}], "}"}], ",", 
     "\"\<MfsPalette.nb\>\""}], "]"}], "]"}], "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"NotebookObject", "[", 
   PanelBox[GridBox[{
      {
       TooltipBox[
        ButtonBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEBitmaps", "ManipulatePasteIcon"],
           ImageSizeCache->{13., {4., 9.}}],
          DynamicUpdating->True],
         Appearance->{Automatic, None},
         BaseStyle->{},
         ButtonFunction:>FrontEndExecute[{
            FrontEnd`SetSelectedNotebook[
             NotebookObject[
              FrontEndObject[
               LinkObject["ye6_shm", 1, 1]], 23]]}],
         Evaluator->None,
         Method->"Queued"],
        DynamicBox[
         FEPrivate`FrontEndResource[
         "FEStrings", "NotebookObjectToTheFront"]]], 
       StyleBox["\<\"Untitled-4\"\>",
        StripOnInput->False,
        FontColor->GrayLevel[0.5]]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}}],
    FrameMargins->{{4, 5}, {4, 4}}], "]"}],
  NotebookObject[
   FrontEndObject[
    LinkObject["ye6_shm", 1, 1]], 23],
  Editable->False]], "Output",
 CellChangeTimes->{3.395136571705247*^9, 3.3951366676577578`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Print", "[", "\"\<Version 3.04 of Madtomma`Mfs`Mfs` loaded.\>\"", 
  "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"Version 3.04 of Madtomma`Mfs`Mfs` loaded.\"\>"], "Print",
 CellChangeTimes->{3.395136571736497*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"$VersionNumber", "\[GreaterEqual]", "5.1"}], ",", 
   RowBox[{
   "Print", "[", 
    "\"\<Since you have Mathematica Version 5.1 or later, you can use tfsRead \
to read TFS files from the Web.\>\"", "]"}]}], "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData["\<\"Since you have Mathematica Version 5.1 or later, you can \
use tfsRead to read TFS files from the Web.\"\>"], "Print",
 CellChangeTimes->{3.3951365717833714`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"$VersionNumber", "<", "4"}], ",", 
   RowBox[{
   "Print", "[", 
    "\"\<This package requires Mathematica Version 4 or later.\\n You could \
try replacing Import[...,\\\"Lines\\\"] with ReadList[...,Record] in the \
package source.\>\"", "]"}]}], "]"}]], "Input",
 InitializationCell->True]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Basic documentation", "Section"],

Cell["\<\
A quick way  to document this package is to list the names of the functions \
it exports [1]:\
\>", "Text"],

Cell[BoxData[
 RowBox[{"Names", "[", "\"\<Madtomma`Mfs`Mfs`*\>\"", "]"}]], "Input",
 CellTags->"Setup section"],

Cell["Or more simply, for most of them with their up-to-date names", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "mfs*"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`open$$ = True}, 
  PaneSelectorBox[{False->
   RowBox[{
    OpenerBox[Dynamic[Typeset`open$$],
     ImageSize->Small], 
    StyleBox["Madtomma`Mfs`Mfs`", "InfoHeading"]}], True->GridBox[{
     {
      RowBox[{
       OpenerBox[Dynamic[Typeset`open$$],
        ImageSize->Small], 
       StyleBox["Madtomma`Mfs`Mfs`", "InfoHeading"]}]},
     {GridBox[{
        {
         ButtonBox["mfs",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfs"},
          ButtonNote->"Madtomma`Mfs`Mfs`"], 
         ButtonBox["mfsKeyNames",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsKeyNames"},
          ButtonNote->"Madtomma`Mfs`Mfs`"]},
        {
         ButtonBox["mfsAddColumn",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsAddColumn"},
          ButtonNote->"Madtomma`Mfs`Mfs`"], 
         ButtonBox["mfsKeyOrder",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsKeyOrder"},
          ButtonNote->"Madtomma`Mfs`Mfs`"]},
        {
         ButtonBox["mfsAddKey",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsAddKey"},
          ButtonNote->"Madtomma`Mfs`Mfs`"], 
         ButtonBox["mfsKeyValue",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsKeyValue"},
          ButtonNote->"Madtomma`Mfs`Mfs`"]},
        {
         ButtonBox["mfsColumn",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsColumn"},
          ButtonNote->"Madtomma`Mfs`Mfs`"], 
         ButtonBox["mfsMember",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsMember"},
          ButtonNote->"Madtomma`Mfs`Mfs`"]},
        {
         ButtonBox["mfsColumnMatch",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsColumnMatch"},
          ButtonNote->"Madtomma`Mfs`Mfs`"], 
         ButtonBox["mfsMerge",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsMerge"},
          
          ButtonNote->"Madtomma`Mfs`Mfs`"]},
        {
         ButtonBox["mfsColumnNames",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsColumnNames"},
          ButtonNote->"Madtomma`Mfs`Mfs`"], 
         ButtonBox["mfsNotMember",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsNotMember"},
          ButtonNote->"Madtomma`Mfs`Mfs`"]},
        {
         ButtonBox["mfsColumnValue",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsColumnValue"},
          ButtonNote->"Madtomma`Mfs`Mfs`"], 
         ButtonBox["mfsRange",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsRange"},
          
          ButtonNote->"Madtomma`Mfs`Mfs`"]},
        {
         ButtonBox["mfsConvertMAD8toMAD9",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsConvertMAD8toMAD9"},
          
          ButtonNote->"Madtomma`Mfs`Mfs`"], 
         ButtonBox["mfsRemoveDrifts",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsRemoveDrifts"},
          ButtonNote->"Madtomma`Mfs`Mfs`"]},
        {
         ButtonBox["mfsDeleteColumn",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsDeleteColumn"},
          ButtonNote->"Madtomma`Mfs`Mfs`"], 
         ButtonBox["mfsReverse",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsReverse"},
          ButtonNote->"Madtomma`Mfs`Mfs`"]},
        {
         ButtonBox["mfsDeleteKey",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsDeleteKey"},
          ButtonNote->"Madtomma`Mfs`Mfs`"], 
         ButtonBox["mfsSelect",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsSelect"},
          ButtonNote->"Madtomma`Mfs`Mfs`"]},
        {
         ButtonBox["mfsEditKey",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsEditKey"},
          ButtonNote->"Madtomma`Mfs`Mfs`"], 
         ButtonBox["mfsSortKey",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsSortKey"},
          ButtonNote->"Madtomma`Mfs`Mfs`"]},
        {
         ButtonBox["mfsFixMAD8inconsistencies",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3395143885-6759278", 
            "Madtomma`Mfs`Mfs`mfsFixMAD8inconsistencies"},
          ButtonNote->"Madtomma`Mfs`Mfs`"], 
         ButtonBox["mfsToCSV",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsToCSV"},
          
          ButtonNote->"Madtomma`Mfs`Mfs`"]},
        {
         ButtonBox["mfsInterpret",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsInterpret"},
          ButtonNote->"Madtomma`Mfs`Mfs`"], 
         ButtonBox["mfsToRules",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsToRules"},
          ButtonNote->"Madtomma`Mfs`Mfs`"]},
        {
         ButtonBox["mfsInterpretColumns",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsInterpretColumns"},
          ButtonNote->"Madtomma`Mfs`Mfs`"], 
         ButtonBox["mfsTypes",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsTypes"},
          
          ButtonNote->"Madtomma`Mfs`Mfs`"]},
        {
         ButtonBox["mfsInterpretKeys",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsInterpretKeys"},
          ButtonNote->"Madtomma`Mfs`Mfs`"], 
         ButtonBox["mfsVerbose",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3395143885-6759278", "Madtomma`Mfs`Mfs`mfsVerbose"},
          ButtonNote->"Madtomma`Mfs`Mfs`"]}
       },
       DefaultBaseStyle->"InfoGrid",
       GridBoxItemSize->{"Columns" -> {{
            Scaled[0.475]}}}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}]}, 
   Dynamic[Typeset`open$$],
   ImageSize->Automatic]]], "Print", "InfoCell",
 CellChangeTimes->{3.3951366851576457`*^9}],

Cell[BoxData[
 StyleBox["\<\"mfsVerbose is an option for tfsParseHeaderBlock and tfsRead \
that specifieds whether informative messages should be printed.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellTags->"Info3395143885-6759278"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "tfs*"}]], "Input"],

Cell[BoxData[GridBox[{
   {
    StyleBox["Madtomma`Mfs`Mfs`",
     FontFamily->"Helvetica",
     FontSize->12,
     FontWeight->"Bold"]},
   {GridBox[{
      {
       ButtonBox[
        StyleBox["tfsFormatRules",
         FontVariations->{"Underline"->True},
         FontColor->RGBColor[0, 0, 1]],
        Appearance->{Automatic, None},
        ButtonData:>{
         "Info3260894569-1716654", "Madtomma`Mfs`Mfs`tfsFormatRules"},
        ButtonFunction:>(Internal`PutInformation[#, LongForm -> False]& ),
        ButtonNote->"Madtomma`Mfs`Mfs`",
        Evaluator->Automatic], 
       ButtonBox[
        StyleBox["tfsParseDescriptorLine",
         FontVariations->{"Underline"->True},
         FontColor->RGBColor[0, 0, 1]],
        Appearance->{Automatic, None},
        ButtonData:>{
         "Info3260894569-1716654", "Madtomma`Mfs`Mfs`tfsParseDescriptorLine"},
        
        ButtonFunction:>(Internal`PutInformation[#, LongForm -> False]& ),
        ButtonNote->"Madtomma`Mfs`Mfs`",
        Evaluator->Automatic], 
       ButtonBox[
        StyleBox["tfsParseHeaderBlock",
         FontVariations->{"Underline"->True},
         FontColor->RGBColor[0, 0, 1]],
        Appearance->{Automatic, None},
        ButtonData:>{
         "Info3260894569-1716654", "Madtomma`Mfs`Mfs`tfsParseHeaderBlock"},
        ButtonFunction:>(Internal`PutInformation[#, LongForm -> False]& ),
        ButtonNote->"Madtomma`Mfs`Mfs`",
        Evaluator->Automatic], 
       ButtonBox[
        StyleBox["tfsRead",
         FontVariations->{"Underline"->True},
         FontColor->RGBColor[0, 0, 1]],
        Appearance->{Automatic, None},
        ButtonData:>{"Info3260894569-1716654", "Madtomma`Mfs`Mfs`tfsRead"},
        ButtonFunction:>(Internal`PutInformation[#, LongForm -> False]& ),
        ButtonNote->"Madtomma`Mfs`Mfs`",
        Evaluator->Automatic]}
     },
     GridBoxItemSize->{
      "Columns" -> {{All}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.05}}, 
       "RowsIndexed" -> {}}]}
  },
  ColumnsEqual->True,
  GridBoxAlignment->{
   "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
    "RowsIndexed" -> {}},
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.5599999999999999]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], 
      Offset[0.8], {
       Offset[1.2]}, 
      Offset[0.2]}, "RowsIndexed" -> {}}]], "Print",
 CellMargins->{{20, Inherited}, {Inherited, Inherited}},
 ShowCellLabel->False,
 CellFrameMargins->{{Inherited, Inherited}, {14, 14}},
 Background->GrayLevel[0.930022],
 ButtonBoxOptions->{Active->True}]
}, Open  ]],

Cell["\<\
and then print their usage messages that say what they do.  Normally these \
messages are accessible by typing, e.g., \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "mfsMember"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"mfsMember[mfsdata,key,targetset] extracts rows of an mfsdata \
object for which values labelled by key belong to targetset.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.395136707313754*^9},
 CellTags->"Info3395143907-9632325"]
}, Open  ]],

Cell["\<\
but the following utility function generates the same information in \
formatted form (the following subsections!).\
\>", "Text"],

Cell[BoxData[
 RowBox[{"UsageCells", "[", 
  RowBox[{"Names", "[", "\"\<Madtomma`Mfs`Mfs`*\>\"", "]"}], "]"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["User's Guide and Examples", "Section",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell["Creating  an mfs object from a file of data", "Subsection",
 CellTags->"Examples section"],

Cell["\<\
First, let us define a sample data file.  This one was created in MAD using \
the ARCHIVE command to save the TRACK table generated by tracking a number of \
particles from the same initial condition with quantum fluctuations.   Here \
we specify the file path and name in a system-indepemdent  manner.\
\>", "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sampleFile", "=", 
  RowBox[{"ToFileName", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"AfsHomeDirectory", "[", "\"\<jowett\>\"", "]"}], ",", 
      "\"\<public\>\"", ",", "\"\<math\>\"", ",", "\"\<Madtomma\>\"", ",", 
      "\"\<Mfs\>\"", ",", "\"\<Examples\>\""}], "}"}], ",", 
    "\"\<qkick.tfs\>\""}], "]"}]}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData["\<\"P:\\\\cern.ch\\\\user\\\\j\\\\jowett\\\\public\\\\math\\\\\
Madtomma\\\\Mfs\\\\Examples\\\\qkick.tfs\"\>"], "Output",
 CellChangeTimes->{3.3951367196418*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell["Choose some directory of your own for the examples", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetDirectory", "[", "$TemporaryPrefix", "]"}]], "Input"],

Cell[BoxData["\<\"C:\\\\Documents and Settings\\\\jowett\\\\Local \
Settings\\\\Temp\"\>"], "Output",
 CellChangeTimes->{3.395136723094903*^9}]
}, Open  ]],

Cell[TextData[{
 "Having loaded the package, we can list all the data types  in the ",
 StyleBox["mfs", "Input"],
 " class by evaluating:"
}], "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData["mfsTypes"], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{"{", "mfs", "}"}]], "Output",
 CellChangeTimes->{3.395136727329251*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell["\<\
The most common applications will start by reading a TFS file:\
\>", "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "tfsRead"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 StyleBox["\<\"tfsRead[file] returns an mfs data object containing all the \
information in a TFS file.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.3951367319385967`*^9},
 CellTags->{"Examples section", "Info3395143931-6822858"}]
}, Open  ]],

Cell["\<\
In any expression which evaluates to an mfs data object, it is worth \
remembering to add a semi-colon to suppress  printing as these can be very \
long.\
\>", "Text",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"qpmfs", "=", 
   RowBox[{"tfsRead", "[", 
    RowBox[{"sampleFile", ",", 
     RowBox[{"mfsVerbose", "\[Rule]", "False"}]}], "]"}]}], 
  ";"}]], "InputOnly",
 CellTags->"Examples section"],

Cell["\<\
MAD users know that this leads to a file containing various pieces of \
descriptive information at the top, followed by a body of columns listing the \
coordinates of the surviving particles on successive turns, separated by \
comment lines.\
\>", "Text",
 CellTags->"Examples section"],

Cell[TextData[{
 "Since only one of the particles survives the full tracking time, the others \
being lost after varying numbers of turns, the number of lines of the TFS \
file corresponding to each turn gradually dwindles.  The ",
 StyleBox["tfsRead", "Input"],
 " function deals with  these details automatically."
}], "Text",
 CellTags->"Examples section"],

Cell[TextData[{
 "Now the symbols ",
 StyleBox["qpmfs ", "Input"],
 "contains an mfs data object which we can print in abbreviated form:"
}], "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Short", "[", 
  RowBox[{"qpmfs", ",", "8"}], "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 TagBox[
  RowBox[{"mfs", "[", 
   RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], "]"}],
  Short[#, 8]& ]], "Output",
 CellChangeTimes->{3.3951367414541607`*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[TextData[{
 "The option ",
 StyleBox["mfsVerbose->False", "Input"],
 " can be used to suppress the printed information in ",
 StyleBox["tfsRead", "Input"],
 " and other functiions."
}], "Text",
 CellTags->"Examples section"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Reading TFS files from the Web", "Subsection"],

Cell["\<\
The same function works for TFS files that are available on the Web\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"qpw", "=", 
  RowBox[{
  "tfsRead", "[", 
   "\"\<http://proj-lhc-optics-web.web.cern.ch/proj-lhc-optics-web/V6.5/\
Injection/LHCB1IR1.tfs\>\"", "]"}], " "}]], "Input"],

Cell[BoxData[
 TagBox[
  RowBox[{"mfs", "[", 
   RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], "]"}],
  Short[#, 10]& ]], "Output",
 CellChangeTimes->{3.395136752625964*^9, 3.434722757229269*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["An easy  way  to use an mfs object: transform it into rules", \
"Subsection",
 CellTags->"mfsInterpret"],

Cell[TextData[{
 "In relatively simple situations, it is sufficient to transform the ",
 StyleBox["mfs", "Input"],
 " data object into a set of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " rules for replacing the strings identifying the quantities in the original \
TFS file by their values.  These symbols are then assigned the corresponding \
values.  This is most easily understood by example."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"qprules", "=", 
   RowBox[{"mfsToRules", "[", "qpmfs", "]"}]}], ";"}]], "Input"],

Cell[TextData[{
 "The first group of variables are the keys given in the header part of the \
TFS file.   Thus, for example, a new variable ",
 StyleBox["TIME", "Input"],
 " has been created and assigned the value associated with the key \"TIME\" \
in the TFS file:"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\"\<TIME\>\"", "/.", "qprules"}]], "Input"],

Cell[BoxData["\<\"15.40.36\"\>"], "Output",
 CellChangeTimes->{3.395136787485116*^9}]
}, Open  ]],

Cell["The columns of the TFS file return \"vectors\":", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"\"\<X\>\"", "/.", "qprules"}], "//", "Short"}]], "Input"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{"0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
    RowBox[{"\[LeftSkeleton]", "373", "\[RightSkeleton]"}], ",", 
    "0.0020450299999999998`", ",", "0.00341965`", ",", 
    RowBox[{"-", "0.0039068`"}]}], "}"}],
  Short]], "Output",
 CellChangeTimes->{3.395136793703826*^9}]
}, Open  ]],

Cell[TextData[{
 "Similarly, there is a variable ",
 StyleBox["E11", "Input"],
 " that can now be used in calculations"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\"\<E11\>\"", "2"], "/.", "qprules"}]], "Input"],

Cell[BoxData["27.597476393067804`"], "Output",
 CellChangeTimes->{3.3951367977663*^9}]
}, Open  ]],

Cell[TextData[{
 "The data in the columns of the TFS file is assigned to some vector \
variables that may, for example be plotted.  The ",
 StyleBox["Transpose", "Input"],
 " operation is necessary to turn a pair of lists of numbers into a list of \
pairs of numbers."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"mfsRow", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<T\>\"", ",", "\"\<Y\>\""}], "}"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.463738058190365*^9, 3.4637380625809617`*^9}}],

Cell[BoxData[
 GraphicsBox[
  {Hue[0.67, 0.6, 0.6], PointBox[CompressedData["
1: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
d/6KjDtrwv8BkLDR7g==
    "]]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{3.395136800469408*^9}]
}, Open  ]],

Cell["Or we might take the scalar product of the X and PX columns ", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"\"\<X\>\"", ".", "\"\<PX\>\""}], "/.", "qprules"}]], "Input"],

Cell[BoxData[
 RowBox[{"-", "0.0002666888216002709`"}]], "Output",
 CellChangeTimes->{3.3951368042193837`*^9}]
}, Open  ]],

Cell["or form a matrix", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", GridBox[{
      {"\"\<E11\>\"", "\"\<E12\>\""},
      {"\"\<E21\>\"", "\"\<E22\>\""}
     }], ")"}], "/.", "qprules"}], "//", "MatrixForm"}]], "Input"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"5.25333002895`", 
      RowBox[{"-", "3.43414759638`*^-17"}]},
     {"0.011563874218500001`", "0.190232632187`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.395136806953741*^9}]
}, Open  ]],

Cell[TextData[{
 "Rather than continue with furthere illustrative examples, it is better to \
recommend that the user becomes familiar with standard ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " rule operations so that he can easily do what he wants himself."
}], "Text"],

Cell["\<\
The example contains tracking data for 16 particles so there are 16 X values \
for turn 0, for turn 1, etc. (until some particles are lost):\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"\"\<TURNS\>\"", "/.", "qprules"}], ",", "18"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "1", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.395136810563093*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"\"\<X\>\"", "/.", "qprules"}], ",", "18"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.00504514`", ",", 
   "0.0050658199999999995`"}], "}"}]], "Output",
 CellChangeTimes->{3.3951368117818356`*^9}]
}, Open  ]],

Cell["We can plot them against turn number with", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"Transpose", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<TURNS\>\"", ",", "\"\<X\>\""}], "}"}], "/.", "qprules"}], 
   "]"}], "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[
  {Hue[0.67, 0.6, 0.6], PointBox[CompressedData["
1:eJzt2Pk/ldkfAPBbyZaRmggtVPZkLNdSiY99y77fkmUsMYx9iUv32i5Xuy20
DBm0C6kJkTKFiihFSlQUKvmmFPGdeX3Pc05/xNcvXu/X5/M553Of55zzPPeu
8wl18FtIo9GYC2i0f////+/fvwn9Wan+KK0zUfqUF6Sfqn7dSNxio7frlk0k
NteEp81IPQb7+upKbl0QiT9V/fhK7lw0ttKV5BedA2S8qnKtoq1XSb7b6vPv
2WMkPiV8xeimD/Gm3rH6ZbwkPyx/bWt9UwS2q5hks0gDma9nJndEhp/4brqQ
2Ap5Ur99KjhU0paqp8Hp0lCb2ZSkRsoGtcqe+YN7sVtrun3UrYkfjB2eMwkh
+bJBR97VjhJXPXN5lv+R+L1lSWvWD/mXLC++f6hBxpsqaxwVvMDCDk9uHtod
TeJm03yeXV9Ifdfgun0n/07Ejg73K/zGJfni6R42b/aQ8bKPiIkKi5D6xQ+G
47ufMpH54diHj47+ORn6lJWeh6TsreViy51d3+/rlIl97lGVSFwdcWq56Ym+
DlKv/LBweE35D+OlSg33axObFfyk3nqH1LvdzuOqN5H5mB3v2rp3kfj07KOM
xb8S1zmkTWmyyXgqzCf+158T99kPq54e+2G8BXxzC6RJXJoRHaBtnI4sAqu1
TWcfNqc3Ul4Xu6xMIZ9YomzHqg4hDva5eCfXglQSHyx5v8vCmviD4JPA+V1p
2GHVa6YbJokPXX8vobKS5L96GBlr6ER8UJbPTMaPWF4m4/TLEVJfnT6caypP
4n87fRMIuELsL1b8RLCQ+EbNIoHXT0h92cQfvdGhlFfAwMRd0Q/LsvQpm4s4
3u4YS8U+P1o0ujc0E3vDwkBGw1oOtqxAs6hdBbHXhtJW6S4uNk906GjFUlIv
2e2xIft4Bplv4eIWZT4yH3fSazjv0j7szieTshcVSX/jg+3GyxzIfHR+n4P6
fCT/egmzocuXjMcjlSJaziD1x8XfbZ89tx9ZHKpK3UxGFyU3Uhb46l+vWO+P
nTBaor70TBL2N9tfBvLTI7G9he+uCl8ehX1UK9Z2TwcTm69DMUTsIfH+J7ec
y2discP4de85awZi84/mmGk3k36Oth1O1bhA5l+cPdlS+iIae+7inz9VVJN8
yTMNL0N7fsPmUVk1sFSOxMdhZO+iUmo9r4bbJuLVLw946VOO446OKGuH47iQ
kvGxHf1mOF7oWyIiKeON44MX/vAWtw7CFmsNO9la74FdfeGl884wOrbGTFPS
mggHMr/Uri2MbH9sE6vvMDRO+vEvPG3ECjTDcdPDCU/vbHfCrqhvO8otc8H5
4isLN9mXuuE4s0O4t57ti+ORd1bOrSlKQpYGhfpmbrBlDHbkJ+bnj4Ip2J0/
d/QuNEzAfjQ0bSohxsIun9h28RpvKrapj9TEwjXEDqoDD9TOk/mWLV0ZKnmY
ePSY7tVEDhs7cGbNWRH/aOzYtNmtn4DMp8kQ8yuY3IvNt499RWdZPHbCI6Fi
NVUy/nKek/YsC/L58vVXCMwWGiKvh7+rCxK/56Q0Um6zE3V8K78Pe3VDXsAh
81Ts3Frd+SV6TOzOB7bPFhhlYcuGHbq8sSAD20pQmaW4iIP9zvDY6ricJGzH
9gSDSts07Hh9GXUfZ9LPlqrJdq99ZLyr8rc0ulNIvJ9RFfxcivSX+R+VYZpM
LHaYkeL5BYbJ2NJPBbxnRmOQZaDJfK3eySvUeSIDV/fLz80H7cA2vmd6PPRb
JvbsiuA7r/akYXecvddy5fVKPB4tbLw3soCL487/8V8rWEnq0/1e6MX3J2Ob
2V9K0NXLwr7rfczXbjnpZyoha/VOCRb25M0vNXu6MrCrLqyi1b0i4+8YiHFV
pqdji66l170/T/I5cvr/HinIcsDMKFZN2UfdPznwU7nGezsmA7uzgWN1YGsa
9tOrS7lfNuVgM73VnVWVMrEVzlt1jBcHYUO7TaH3HKmvlL7nRj++H1uONp+j
ZJ+O7RsqXqfRegA7areZl88QqX9rrjK/7jvJt9F6+DwviepXAfKP9wpw46nn
gQJ0NO9kyMmlYvNLLDcYXnEAm/NWjVW2govNR5McCXgQh+1duvLyjDMLm51w
Qj/EiYPtb3RwdoSjhef/5dT3ms8vs3D87f2rogGX2NgTz8+tvryGml8JnrFz
TxgPUP0rwc/N8cKTRb9jK7FTznm0pmK/UdWzy2ewsRnFr+9eLfbC4/Ud67kY
fC8SxyXrBC2tj5D8qyckzgY98sLWq3hU/EqK2p/K8OE4p1WQTvWnDFJdK8py
mOE4PtoidkopMRLHc5NkeQLvO2L7CZVGVHLZOF+l0VO4OikMm9mXlCZcpYFN
My2XEC+MxW7J2MjT8iARjacCs4JjisPPqf2uAn0LDccG21Nx/HDKcv++OT9s
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
AcKOtaeyaWGN/wVqAFnx
    "]]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{3.395136817078676*^9}]
}, Open  ]],

Cell["\<\
Notice however that there is a common problem with MAD8 and MAD-X.  Sometimes \
the same name is used for a quantity in the header block and for one of the \
columns, e.g., \"NAME\" is used for the type of table and for the name of \
elements in MAD-X.  To avoid duplicate rules, the header item is changed as \
explained in the usage message\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "mfsToRules"}]], "Input"],

Cell[BoxData[
 StyleBox["\<\"mfsToRules[mfsdata] transforms an mfs object into a list of \
rules for all the strings appearing in mfsKeyNames[mfsdata] and \
mfsColumnNames[mfsdata].  If the argument is a string, it is taken to be the \
name of a TFS file.  Where there are clashes, names from mfsKeyNames[mfsdata] \
have \\\"_KEY\\\" appended to them.\\nmfsToRules[mfsdata,elname] returns a \
list of rules for the values of all the columns at the element with NAME \
elname.\\nThe form mfsToRules[mfsdata,elname,{cola,colb,...} generates rules \
only for the specified columns.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.395136820297406*^9},
 CellTags->"Info3395144020-9288427"]
}, Open  ]],

Cell["\<\
To get a list of all the strings for which rules are available, one can take \
the first element (since the list of rules is flat). \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "/@", "qprules"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"TYPE\"\>", ",", "\<\"XC\"\>", ",", "\<\"PXC\"\>", 
   ",", "\<\"YC\"\>", ",", "\<\"PYC\"\>", ",", "\<\"ET\"\>", 
   ",", "\<\"EY\"\>", ",", "\<\"EX\"\>", ",", "\<\"E11\"\>", 
   ",", "\<\"E12\"\>", ",", "\<\"E13\"\>", ",", "\<\"E14\"\>", 
   ",", "\<\"E15\"\>", ",", "\<\"E16\"\>", ",", "\<\"E21\"\>", 
   ",", "\<\"E22\"\>", ",", "\<\"E23\"\>", ",", "\<\"E24\"\>", 
   ",", "\<\"E25\"\>", ",", "\<\"E26\"\>", ",", "\<\"E31\"\>", 
   ",", "\<\"E32\"\>", ",", "\<\"E33\"\>", ",", "\<\"E34\"\>", 
   ",", "\<\"E35\"\>", ",", "\<\"E36\"\>", ",", "\<\"E41\"\>", 
   ",", "\<\"E42\"\>", ",", "\<\"E43\"\>", ",", "\<\"E44\"\>", 
   ",", "\<\"E45\"\>", ",", "\<\"E46\"\>", ",", "\<\"E51\"\>", 
   ",", "\<\"E52\"\>", ",", "\<\"E53\"\>", ",", "\<\"E54\"\>", 
   ",", "\<\"E55\"\>", ",", "\<\"E56\"\>", ",", "\<\"E61\"\>", 
   ",", "\<\"E62\"\>", ",", "\<\"E63\"\>", ",", "\<\"E64\"\>", 
   ",", "\<\"E65\"\>", ",", "\<\"E66\"\>", ",", "\<\"TITLE\"\>", 
   ",", "\<\"ORIGIN\"\>", ",", "\<\"DATE\"\>", ",", "\<\"TIME\"\>", 
   ",", "\<\"Source_File\"\>", ",", "\<\"TURNS\"\>", ",", "\<\"PARTICLE\"\>", 
   ",", "\<\"X\"\>", ",", "\<\"PX\"\>", ",", "\<\"Y\"\>", ",", "\<\"PY\"\>", 
   ",", "\<\"T\"\>", ",", "\<\"PT\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.3951368278286076`*^9}]
}, Open  ]],

Cell["\<\
This problem does not arise with data from MAD Version 9 where the names for \
quantities are carefully chosen and unique (closed orbit components are \
called XC, PXC, ...).\
\>", "Text"],

Cell[TextData[{
 "If the argument to ",
 StyleBox["mfsToRules", "Input"],
 " is a string, then it is interpreted as the name of a TFS file.  Thus we \
could have   generated the key and column variables directly  without \
assigning the mfs object ",
 StyleBox["qpmfs", "Input"],
 " by typing  simply"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsToRules", "[", "sampleFile", "]"}], "//", "Short"}]], "Input",
 CellChangeTimes->{{3.395136854640936*^9, 3.395136861265894*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"\<\"TYPE\"\>", "\[Rule]", "\<\"TRACK\"\>"}], ",", 
    RowBox[{"\[LeftSkeleton]", "55", "\[RightSkeleton]"}], ",", 
    RowBox[{"\<\"PT\"\>", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0.`", ",", "0.`", ",", 
       RowBox[{"\[LeftSkeleton]", "377", "\[RightSkeleton]"}], ",", 
       RowBox[{"-", "0.0015801699999999999`"}]}], "}"}]}]}], "}"}],
  Short]], "Output",
 CellChangeTimes->{{3.39513683220358*^9, 3.3951368620471387`*^9}}]
}, Open  ]],

Cell["which is equivalent to", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsToRules", "[", 
   RowBox[{"tfsRead", "[", "sampleFile", "]"}], "]"}], "//", 
  "Short"}]], "Input",
 CellChangeTimes->{{3.3951368685939717`*^9, 3.395136870297086*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"\<\"TYPE\"\>", "\[Rule]", "\<\"TRACK\"\>"}], ",", 
    RowBox[{"\[LeftSkeleton]", "55", "\[RightSkeleton]"}], ",", 
    RowBox[{"\<\"PT\"\>", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0.`", ",", "0.`", ",", 
       RowBox[{"\[LeftSkeleton]", "377", "\[RightSkeleton]"}], ",", 
       RowBox[{"-", "0.0015801699999999999`"}]}], "}"}]}]}], "}"}],
  Short]], "Output",
 CellChangeTimes->{3.395136871015831*^9}]
}, Open  ]],

Cell["\<\
Additional arguments to mfsToRules provide an easy way to get hold of optical \
function values at a named element\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsToRules", "[", 
   RowBox[{"fodoTwiss", ",", "\"\<QDHALF\>\""}], "]"}], " "}]], "Input"],

Cell[BoxData[
 RowBox[{"mfsToRules", "[", 
  RowBox[{"fodoTwiss", ",", "\<\"QDHALF\"\>"}], "]"}]], "Output",
 CellChangeTimes->{3.395136874468934*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsToRules", "[", 
   RowBox[{"fodoTwiss", ",", "\"\<JJJ\>\""}], "]"}], "//", 
  "InputForm"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsToRules", "::", "\<\"missingElement\"\>"}], ":", 
  " ", "\<\" element \\!\\(\\\"JJJ\\\"\\) not found in mfs object.\"\>"}]], \
"Message"],

Cell["$Failed", "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsToRules", "[", 
   RowBox[{"fodoTwiss", ",", "\"\<QDHALF\>\"", ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<YC\>\"", ",", "\"\<foo\>\"", ",", "\"\<BETX\>\"", ",", 
      "\"\<JUNK\>\""}], "}"}]}], "]"}], " "}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsToRules", "::", "\<\"missingColumns\"\>"}], ":", 
  " ", "\<\" column(s) \\!\\({\\\"foo\\\", \\\"JUNK\\\"}\\) not found in mfs \
object.\"\>"}]], "Message"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"BETX\"\>", "\[Rule]", "7.465167909`"}], ",", 
   RowBox[{"\<\"YC\"\>", "\[Rule]", "0"}]}], "}"}]], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["More general  usage of the package", "Subsection",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell["Extracting header information from an mfs object", "Subsubsection",
 CellTags->"Examples section"],

Cell[TextData[{
 "In this example, the TFS file contained a TRACK table from MAD.  The header \
block of the file contains various descriptors that are converted into ",
 StyleBox["keys",
  FontSlant->"Italic"],
 " and associated ",
 StyleBox["values",
  FontSlant->"Italic"],
 " in the mfs data object. To find out what they are we can evaluate"
}], "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsKeyNames", "[", "qpmfs", "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"TYPE\"\>", ",", "\<\"XC\"\>", ",", "\<\"PXC\"\>", 
   ",", "\<\"YC\"\>", ",", "\<\"PYC\"\>", ",", "\<\"ET\"\>", 
   ",", "\<\"EY\"\>", ",", "\<\"EX\"\>", ",", "\<\"E11\"\>", 
   ",", "\<\"E12\"\>", ",", "\<\"E13\"\>", ",", "\<\"E14\"\>", 
   ",", "\<\"E15\"\>", ",", "\<\"E16\"\>", ",", "\<\"E21\"\>", 
   ",", "\<\"E22\"\>", ",", "\<\"E23\"\>", ",", "\<\"E24\"\>", 
   ",", "\<\"E25\"\>", ",", "\<\"E26\"\>", ",", "\<\"E31\"\>", 
   ",", "\<\"E32\"\>", ",", "\<\"E33\"\>", ",", "\<\"E34\"\>", 
   ",", "\<\"E35\"\>", ",", "\<\"E36\"\>", ",", "\<\"E41\"\>", 
   ",", "\<\"E42\"\>", ",", "\<\"E43\"\>", ",", "\<\"E44\"\>", 
   ",", "\<\"E45\"\>", ",", "\<\"E46\"\>", ",", "\<\"E51\"\>", 
   ",", "\<\"E52\"\>", ",", "\<\"E53\"\>", ",", "\<\"E54\"\>", 
   ",", "\<\"E55\"\>", ",", "\<\"E56\"\>", ",", "\<\"E61\"\>", 
   ",", "\<\"E62\"\>", ",", "\<\"E63\"\>", ",", "\<\"E64\"\>", 
   ",", "\<\"E65\"\>", ",", "\<\"E66\"\>", ",", "\<\"TITLE\"\>", 
   ",", "\<\"ORIGIN\"\>", ",", "\<\"DATE\"\>", ",", "\<\"TIME\"\>", 
   ",", "\<\"Source_File\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.3951369234842453`*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[TextData[{
 " The function ",
 StyleBox["mfsKeyValue", "Input"],
 " can be used to extract the values corresponding to the keys:"
}], "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Epsilon]", " ", "=", " ", 
  RowBox[{"mfsKeyValue", "[", 
   RowBox[{"qpmfs", ",", "\"\<EX\>\""}], "]"}]}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData["2.98256612951`*^-8"], "Output",
 CellChangeTimes->{3.395136926468601*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsKeyValue", "[", 
  RowBox[{"qpmfs", ",", "\"\<ORIGIN\>\""}], "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData["\<\"MAD 8.21/11 RS6000 - AIX\"\>"], "Output",
 CellChangeTimes->{3.3951369275467196`*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[TextData[{
 "If a ",
 "key",
 " does not exist, an error message will be given and a ",
 StyleBox["Null", "Input"],
 " value returned."
}], "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsKeyValue", "[", 
  RowBox[{"qpmfs", ",", "\"\<QX\>\""}], "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsKeyValue", "::", "\<\"notfound\"\>"}], ":", 
  " ", "\<\"Descriptor \\!\\(\\\"QX\\\"\\) not found. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/notfound\\\", ButtonNote -> \
\\\"Madtomma`Mfs`Mfs`mfsKeyValue::notfound\\\"]\\)\"\>"}]], "Message",
 CellChangeTimes->{3.395136929827955*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell["\<\
Lists can be extracted with one call, e.g,  to get four components of the \
closed orbit\
\>", "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsKeyValue", "[", 
  RowBox[{"qpmfs", ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<XC\>\"", ",", "\"\<PXC\>\"", ",", "\"\<YC\>\"", ",", "\"\<PYC\>\""}],
     "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.395136941874753*^9, 3.3951369465778475`*^9}},
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "0.00038835361175100004`"}], ",", 
   RowBox[{"-", "0.0000167029349567`"}], ",", 
   RowBox[{"-", "0.00038184396626099996`"}], ",", 
   RowBox[{"-", "2.9493485039200003`*^-6"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.3951369345310497`*^9, 3.395136949202831*^9}},
 CellTags->"Examples section"]
}, Open  ]],

Cell[TextData[{
 "Of course, lists can be used in many ways in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArcTan", " ", "@@", " ", 
  RowBox[{"mfsKeyValue", "[", 
   RowBox[{"qpmfs", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<XC\>\"", ",", "\"\<PXC\>\""}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.3951369592965164`*^9, 3.395136961187129*^9}},
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{"-", "3.098609540537677`"}]], "Output",
 CellChangeTimes->{3.3951369617965*^9},
 CellTags->"Examples section"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Extracting column information from an mfs object", "Subsubsection",
 CellTags->"Examples section"],

Cell["\<\
The body of the original TFS file contained columns of data.  To find out \
what these are we use:\
\>", "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsColumnNames", "[", "qpmfs", "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"TURNS\"\>", ",", "\<\"PARTICLE\"\>", ",", "\<\"X\"\>", 
   ",", "\<\"PX\"\>", ",", "\<\"Y\"\>", ",", "\<\"PY\"\>", ",", "\<\"T\"\>", 
   ",", "\<\"PT\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.3951369656558504`*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[TextData[{
 "To extract columns of data we can use the function ",
 StyleBox["mfsColumn", "Input"]
}], "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "mfsColumn"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 StyleBox["\<\"mfsColumn[mfsdata,colname] returns the column of data labelled \
by the string colname in an mfs (or related) data object. A list of colnames \
may also be given to return a set of columns.  If colname is absent the \
entire block of columns is returned.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.3951369692183275`*^9},
 CellTags->{"Examples section", "Info3395144168-1990905"}]
}, Open  ]],

Cell[TextData[{
 "Thus, for example, we can get a list of all the values of the momentum PY.  \
Since this is long, we abbreviate the printing with the function ",
 StyleBox["Short:", "Input"]
}], "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Short", "[", "   ", 
  RowBox[{
   RowBox[{"mfsColumn", "[", 
    RowBox[{"qpmfs", ",", "\"\<PY\>\""}], "]"}], "   ", ",", "8"}], 
  "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
    "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
    "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.0000217497`", ",", 
    "0.000021465200000000002`", ",", 
    RowBox[{"\[LeftSkeleton]", "344", "\[RightSkeleton]"}], ",", 
    RowBox[{"-", "0.0000133607`"}], ",", 
    RowBox[{"-", "0.0000464832`"}], ",", 
    RowBox[{"-", "0.0000369869`"}], ",", "0.0000155165`", ",", "0.000038503`",
     ",", "0.000016930000000000002`", ",", 
    RowBox[{"-", "0.00001942`"}], ",", 
    RowBox[{"-", "0.000036678400000000004`"}], ",", 
    RowBox[{"-", "0.0000171618`"}], ",", "0.000026603900000000005`", ",", 
    "0.000034357200000000004`", ",", 
    RowBox[{"-", "3.51693`*^-6"}], ",", 
    RowBox[{"-", "0.0000327806`"}], ",", 
    RowBox[{"-", "0.0000123483`"}], ",", "0.000017505000000000003`", ",", 
    "0.0000320125`", ",", "0.0000178347`", ",", 
    RowBox[{"-", "0.000021440400000000002`"}]}], "}"}],
  Short[#, 8]& ]], "Output",
 CellChangeTimes->{3.395136972312058*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[TextData[{
 "Multiple columns can also be returned.  Using ",
 StyleBox["Transpose", "Input"],
 ", these can be transformed into lists of coordinate vectors.  Here are the \
coordinate pairs in the horizontal phase plane (abbreviated again)"
}], "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Short", "[", " ", 
  RowBox[{
   RowBox[{"xpx", " ", "=", 
    RowBox[{"Transpose", "[", 
     RowBox[{"mfsColumn", "[", 
      RowBox[{"qpmfs", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<X\>\"", ",", "\"\<PX\>\""}], "}"}]}], "]"}], "]"}]}], 
   " ", ",", "10"}], "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.0005`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.0005`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.0005`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.0005`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.0005`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.0005`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.0005`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.0005`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.0005`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.0005`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.0005`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.0005`"}], "}"}], ",", 
    RowBox[{"\[LeftSkeleton]", "357", "\[RightSkeleton]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "0.00423936`"}], ",", 
      RowBox[{"-", "0.0000941761`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "0.000741994`"}], ",", "0.000165904`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.00441111`", ",", 
      RowBox[{"-", "6.7802200000000005`*^-6"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "0.0017510700000000002`"}], ",", 
      RowBox[{"-", "0.00014994299999999998`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "0.0031952599999999997`"}], ",", "0.000113019`"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{"0.00398775`", ",", "0.0000855205`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.000672365`", ",", 
      RowBox[{"-", "0.000142523`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "0.00427998`"}], ",", "0.0000203029`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.0020450299999999998`", ",", "0.000155579`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.00341965`", ",", 
      RowBox[{"-", "0.000114564`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "0.0039068`"}], ",", 
      RowBox[{"-", "0.0000886172`"}]}], "}"}]}], "}"}],
  Short[#, 10]& ]], "Output",
 CellChangeTimes->{3.39513697668703*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[TextData[{
 "which is just what is needed for the standard ",
 StyleBox["ListPlot", "Input"],
 " function.  Note that this example mixes the trajectories of all the  \
particles in the file (the ",
 ButtonBox["TrackTable",
  BaseStyle->"Hyperlink",
  ButtonData:>{
    URL["http://wwwslap.cern.ch/~jowett/Madtomma/Mfs/TrackTable.html"], None}],
 " package deals with this in a better way)"
}], "Text",
 CellTags->"Examples section"],

Cell["\<\
In 2008, the function mfsRow was introduced to avoid the Transpose step so we \
could write the above as\
\>", "Text",
 CellChangeTimes->{{3.4637381752989902`*^9, 3.4637382075800333`*^9}}],

Cell[BoxData[
 RowBox[{"Short", "[", " ", 
  RowBox[{
   RowBox[{"xpx", " ", "=", 
    RowBox[{"mfsRow", "[", 
     RowBox[{"qpmfs", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<X\>\"", ",", "\"\<PX\>\""}], "}"}]}], "]"}]}], " ", ",", 
   "10"}], "]"}]], "Input",
 CellChangeTimes->{{3.463738212189379*^9, 3.463738218611213*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", "xpx", "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 GraphicsBox[
  {Hue[0.67, 0.6, 0.6], PointBox[CompressedData["
1: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
F4oYojCxxm52w0gQ/wc6RAit
    "]]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{3.395136980562005*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[TextData[{
 "Non-existent columns return ",
 StyleBox["Null", "Input"]
}], "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsColumn", "[", 
  RowBox[{"qpmfs", ",", "\"\<PXN\>\""}], "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsColumn", "::", "\<\"notfound\"\>"}], ":", 
  " ", "\<\"Column \\!\\(\\\"PXN\\\"\\) not found. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/notfound\\\", ButtonNote -> \
\\\"Madtomma`Mfs`Mfs`mfsColumn::notfound\\\"]\\)\"\>"}]], "Message",
 CellChangeTimes->{3.395136983296363*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[TextData[{
 "Finally, calling ",
 StyleBox["mfsColumn", "Input"],
 " with only one argument returns a list containing all the columns (the \
entire \"body\" of the original data file)."
}], "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Short", "[", 
  RowBox[{
   RowBox[{"mfsColumn", "[", "qpmfs", "]"}], ",", "10"}], "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "0", ",", "1", ",", "0.`", ",", "0.0005`", ",", "0.`", ",", "0.`", ",", 
      "0.`", ",", "0.`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "2", ",", "0.`", ",", "0.0005`", ",", "0.`", ",", "0.`", ",", 
      "0.`", ",", "0.`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "3", ",", "0.`", ",", "0.0005`", ",", "0.`", ",", "0.`", ",", 
      "0.`", ",", "0.`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "4", ",", "0.`", ",", "0.0005`", ",", "0.`", ",", "0.`", ",", 
      "0.`", ",", "0.`"}], "}"}], ",", 
    RowBox[{"\[LeftSkeleton]", "373", "\[RightSkeleton]"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "106", ",", "3", ",", "0.0020450299999999998`", ",", "0.000155579`", ",",
       "0.00028735100000000003`", ",", "0.0000320125`", ",", 
      RowBox[{"-", "0.00656549`"}], ",", 
      RowBox[{"-", "0.0005080050000000001`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"107", ",", "3", ",", "0.00341965`", ",", 
      RowBox[{"-", "0.000114564`"}], ",", "0.0007300130000000001`", ",", 
      "0.0000178347`", ",", 
      RowBox[{"-", "0.0025276300000000003`"}], ",", 
      RowBox[{"-", "0.00143335`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"108", ",", "3", ",", 
      RowBox[{"-", "0.0039068`"}], ",", 
      RowBox[{"-", "0.0000886172`"}], ",", "0.000805955`", ",", 
      RowBox[{"-", "0.000021440400000000002`"}], ",", "0.00293916`", ",", 
      RowBox[{"-", "0.0015801699999999999`"}]}], "}"}]}], "}"}],
  Short[#, 10]& ]], "Output",
 CellChangeTimes->{3.395136987030714*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[TextData[{
 "The dimensions of this show us that there were 380 \"lines\" containing the \
8 items specified by ",
 StyleBox["mfsColumnNames", "Input"],
 StyleBox["[qpmfs] above.", "Input"]
}], "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", 
  RowBox[{"mfsColumn", "[", "qpmfs", "]"}], "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"380", ",", "8"}], "}"}]], "Output",
 CellChangeTimes->{3.3951369892806997`*^9},
 CellTags->"Examples section"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Calculations  using column  information from an mfs object", \
"Subsubsection",
 CellTags->"Examples section"],

Cell[TextData[{
 "Suppose that we would like to form the product of all the X and PX values \
in the ",
 StyleBox["mfs", "Input"],
 " object ",
 StyleBox["qpmfs", "Input"],
 "."
}], "Text"],

Cell[TextData[{
 "In the plotting example above, it was necessary to apply ",
 StyleBox["Transpose", "Input"],
 " to the result of ",
 Cell[BoxData[
  RowBox[{"mfsColumn", "[", 
   RowBox[{"qpmfs", ",", 
    RowBox[{"{", 
     RowBox[{"\<\"X\"\>", ",", "\<\"PX\"\>"}], "}"}]}], "]"}]], "Input"],
 " to transform the pair of long lists of X and PX values into a long list of \
pairs ",
 StyleBox["{X,PX} ", "Input"],
 "as required by",
 StyleBox[" ListPlot", "Input"],
 ".  Having done this, it is easy to form, say, the product of all the X and \
PX values by mapping an appropriate pure function over the list.  Here is one \
which forms the product of X and PX"
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"xpxprod1", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
       " ", 
       RowBox[{"#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
       "&"}], ")"}], "/@", "xpx"}]}], ";"}]], "Input"],

Cell["Viewing the result in abbreviated form, ", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Short", "[", 
  RowBox[{"xpxprod1", ",", "5"}], "]"}]], "Input"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
    "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
    RowBox[{"\[LeftSkeleton]", "358", "\[RightSkeleton]"}], ",", 
    "3.9924639129599997`*^-7", ",", 
    RowBox[{"-", "1.23099772576`*^-7"}], ",", 
    RowBox[{"-", "2.99082962442`*^-8"}], ",", "2.6256068901`*^-7", ",", 
    RowBox[{"-", "3.6112508993999993`*^-7"}], ",", "3.4103437387500003`*^-7", 
    ",", 
    RowBox[{"-", "9.5827476895`*^-8"}], ",", 
    RowBox[{"-", "8.6896005942`*^-8"}], ",", "3.1816372236999997`*^-7", ",", 
    RowBox[{"-", "3.917687826`*^-7"}], ",", "3.4620967696`*^-7"}], "}"}],
  Short[#, 5]& ]], "Output",
 CellChangeTimes->{3.3951369947806644`*^9}]
}, Open  ]],

Cell[TextData[{
 "You may find it easier to do this in one step using ",
 StyleBox["MapThread", "Input"],
 "."
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"xpxprod2", "=", 
   RowBox[{"MapThread", "[", 
    RowBox[{"Times", ",", 
     RowBox[{"mfsColumn", "[", 
      RowBox[{"qpmfs", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<X\>\"", ",", "\"\<PX\>\""}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"xpxprod1", "\[Equal]", "xpxprod2"}]], "Input"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.3951369948431635`*^9}]
}, Open  ]],

Cell["\<\
If this seems complicated, remember that we are using a simple example to \
illustrate general mechanisms.  The same result could be  achieved with\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"xpxprod3", "=", 
   RowBox[{
    RowBox[{"mfsColumn", "[", 
     RowBox[{"qpmfs", ",", "\"\<X\>\""}], "]"}], "  ", 
    RowBox[{"mfsColumn", "[", 
     RowBox[{"qpmfs", ",", "\"\<PX\>\""}], "]"}]}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"xpxprod3", "\[Equal]", "xpxprod1"}]], "Input"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.3951369949212885`*^9}]
}, Open  ]],

Cell[TextData[{
 "Even more simply,  in the ",
 ButtonBox["approach",
  BaseStyle->"Hyperlink",
  ButtonData:>"mfsInterpret"],
 " using ",
 StyleBox["mfsInterpret", "Input"],
 ", the same result could be achieved with "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"xpxprod4", "=", " ", 
   RowBox[{"X", " ", "PX"}]}], ";"}]], "Input"],

Cell["which is again equivalent", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"xpxprod4", "\[Equal]", "xpxprod1"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PX", " ", "X"}], "\[Equal]", 
  RowBox[{"{", 
   RowBox[{
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
    "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
    "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
    RowBox[{"-", "2.1360315537600003`*^-6"}], ",", 
    RowBox[{"-", "2.11041554618`*^-6"}], ",", 
    RowBox[{"-", "1.98783352574`*^-6"}], ",", 
    RowBox[{"-", "2.26439045677`*^-6"}], ",", 
    RowBox[{"-", "2.0186063795`*^-6"}], ",", 
    RowBox[{"-", "2.21750200074`*^-6"}], ",", 
    RowBox[{"-", "2.1584444791`*^-6"}], ",", 
    RowBox[{"-", "2.0402577904500004`*^-6"}], ",", 
    RowBox[{"-", "2.0982721428900002`*^-6"}], ",", 
    RowBox[{"-", "2.0793756689999997`*^-6"}], ",", 
    RowBox[{"-", "1.9884187264200003`*^-6"}], ",", 
    RowBox[{"-", "1.97409321954`*^-6"}], ",", 
    RowBox[{"-", "2.18044531292`*^-6"}], ",", 
    RowBox[{"-", "2.0880955046400005`*^-6"}], ",", 
    RowBox[{"-", "2.00619802918`*^-6"}], ",", 
    RowBox[{"-", "1.92910942287`*^-6"}], ",", 
    RowBox[{"-", "3.7124841482600003`*^-6"}], ",", 
    RowBox[{"-", "3.6342095519999998`*^-6"}], ",", 
    RowBox[{"-", "3.5047419416600005`*^-6"}], ",", 
    RowBox[{"-", "3.63393595699`*^-6"}], ",", 
    RowBox[{"-", "3.7763774466599993`*^-6"}], ",", 
    RowBox[{"-", "3.8124087645200005`*^-6"}], ",", 
    RowBox[{"-", "3.63566031552`*^-6"}], ",", 
    RowBox[{"-", "3.6367100926300003`*^-6"}], ",", 
    RowBox[{"-", "3.4090103332800007`*^-6"}], ",", 
    RowBox[{"-", "3.67220386323`*^-6"}], ",", 
    RowBox[{"-", "3.7570312780000004`*^-6"}], ",", 
    RowBox[{"-", "3.5455023485`*^-6"}], ",", 
    RowBox[{"-", "3.725402785800001`*^-6"}], ",", 
    RowBox[{"-", "3.49539224458`*^-6"}], ",", 
    RowBox[{"-", "3.67290631884`*^-6"}], ",", 
    RowBox[{"-", "3.73054301746`*^-6"}], ",", 
    RowBox[{"-", "2.6654677602000002`*^-6"}], ",", 
    RowBox[{"-", "2.1185481582000003`*^-6"}], ",", 
    RowBox[{"-", "2.2894899520000002`*^-6"}], ",", 
    RowBox[{"-", "2.3808157956000004`*^-6"}], ",", 
    RowBox[{"-", "2.4406676159999996`*^-6"}], ",", 
    RowBox[{"-", "2.7591033375`*^-6"}], ",", 
    RowBox[{"-", "2.6206165583`*^-6"}], ",", 
    RowBox[{"-", "2.5095521100000006`*^-6"}], ",", 
    RowBox[{"-", "2.0428027886000006`*^-6"}], ",", 
    RowBox[{"-", "2.846243904`*^-6"}], ",", 
    RowBox[{"-", "2.6261829781000005`*^-6"}], ",", 
    RowBox[{"-", "2.3992977996000002`*^-6"}], ",", 
    RowBox[{"-", "2.6109225744`*^-6"}], ",", 
    RowBox[{"-", "1.8758549736000002`*^-6"}], ",", 
    RowBox[{"-", "2.7982679304`*^-6"}], ",", 
    RowBox[{"-", "2.9095579476000005`*^-6"}], ",", 
    RowBox[{"-", "1.4416376808`*^-6"}], ",", "1.7956330340000003`*^-7", ",", 
    RowBox[{"-", "5.7570051539`*^-7"}], ",", 
    RowBox[{"-", "3.881281295100001`*^-7"}], ",", 
    RowBox[{"-", "6.436613878400001`*^-7"}], ",", 
    RowBox[{"-", "1.5475462002000002`*^-6"}], ",", 
    RowBox[{"-", "1.2504907596000002`*^-6"}], ",", 
    RowBox[{"-", "7.734506770400001`*^-7"}], ",", "4.829570389800001`*^-7", 
    ",", 
    RowBox[{"-", "1.9211439786000002`*^-6"}], ",", 
    RowBox[{"-", "1.6117889856000002`*^-6"}], ",", 
    RowBox[{"-", "5.458287025800001`*^-7"}], ",", 
    RowBox[{"-", "1.4131873520000002`*^-6"}], ",", "4.968363056000001`*^-7", 
    ",", 
    RowBox[{"-", "2.0174138416000005`*^-6"}], ",", 
    RowBox[{"-", "2.8047080049999997`*^-6"}], ",", "1.3455984756000002`*^-6", 
    ",", "2.3842845753999997`*^-6", ",", "1.9535691312`*^-6", ",", 
    "2.1263810087`*^-6", ",", "2.101934043`*^-6", ",", "1.24494669664`*^-6", 
    ",", "1.6512105753000003`*^-6", ",", "1.837991356`*^-6", ",", 
    "2.60782903908`*^-6", ",", "7.860408949800002`*^-7", ",", 
    "1.19280628802`*^-6", ",", "2.1456068620000004`*^-6", ",", 
    "1.0986633617400003`*^-6", ",", "2.5236879895500005`*^-6", ",", 
    "7.067832392000001`*^-7", ",", 
    RowBox[{"-", "6.746865871900001`*^-7"}], ",", "2.9444624869000005`*^-6", 
    ",", "1.14032513976`*^-6", ",", "2.5502795919999996`*^-6", ",", 
    "1.8241707679200002`*^-6", ",", "2.1324825660000004`*^-6", ",", 
    "2.8550967918`*^-6", ",", "2.5036496186000003`*^-6", ",", 
    "2.28708796938`*^-6", ",", "1.21596086007`*^-6", ",", 
    "3.0879880325000003`*^-6", ",", "2.7417677139999997`*^-6", ",", 
    "1.9546084805000003`*^-6", ",", "3.1711210867200005`*^-6", ",", 
    "1.2954971134`*^-6", ",", "2.4508781678600004`*^-6", ",", 
    "1.8471011495`*^-6", ",", "8.8648016828`*^-7", ",", 
    RowBox[{"-", "1.6720162201400002`*^-6"}], ",", "3.13855670114`*^-7", ",", 
    
    RowBox[{"-", "8.324255627100001`*^-7"}], ",", 
    RowBox[{"-", "1.46067076286`*^-6"}], ",", 
    RowBox[{"-", "8.1429868926`*^-7"}], ",", 
    RowBox[{"-", "1.3007256023700003`*^-7"}], ",", 
    RowBox[{"-", "4.805918241600001`*^-7"}], ",", 
    RowBox[{"-", "1.0857147331300003`*^-6"}], ",", "9.4705594864`*^-7", ",", 
    RowBox[{"-", "3.1536619755200006`*^-7"}], ",", 
    RowBox[{"-", "5.0325364774`*^-7"}], ",", "6.355550880800001`*^-7", ",", 
    RowBox[{"-", "6.314282045400001`*^-7"}], ",", "1.03559278592`*^-6", ",", 
    "2.6683944308`*^-6", ",", 
    RowBox[{"-", "2.0353994848400003`*^-6"}], ",", 
    RowBox[{"-", "2.7612180076400004`*^-6"}], ",", 
    RowBox[{"-", "2.2586620785`*^-6"}], ",", 
    RowBox[{"-", "3.0360578645`*^-6"}], ",", 
    RowBox[{"-", "2.834032391040001`*^-6"}], ",", 
    RowBox[{"-", "2.37934362112`*^-6"}], ",", 
    RowBox[{"-", "2.3983273597`*^-6"}], ",", 
    RowBox[{"-", "2.8861157744000003`*^-6"}], ",", 
    RowBox[{"-", "2.9282170107300004`*^-6"}], ",", 
    RowBox[{"-", "2.05259741955`*^-6"}], ",", 
    RowBox[{"-", "2.61474685857`*^-6"}], ",", 
    RowBox[{"-", "2.78453123888`*^-6"}], ",", 
    RowBox[{"-", "2.33413452936`*^-6"}], ",", 
    RowBox[{"-", "2.93802644466`*^-6"}], ",", 
    RowBox[{"-", "1.97425961484`*^-6"}], ",", 
    RowBox[{"-", "2.3223998721600005`*^-7"}], ",", 
    RowBox[{"-", "2.9469560792`*^-6"}], ",", 
    RowBox[{"-", "3.7842744799999997`*^-6"}], ",", 
    RowBox[{"-", "2.62945063679`*^-6"}], ",", 
    RowBox[{"-", "2.4504186673500003`*^-6"}], ",", 
    RowBox[{"-", "3.7072914570000003`*^-6"}], ",", 
    RowBox[{"-", "1.3769656087`*^-6"}], ",", 
    RowBox[{"-", "2.7633474990000003`*^-6"}], ",", 
    RowBox[{"-", "2.6599635816600003`*^-6"}], ",", 
    RowBox[{"-", "2.9757231935000005`*^-6"}], ",", 
    RowBox[{"-", "3.179695365`*^-6"}], ",", 
    RowBox[{"-", "3.292523739`*^-6"}], ",", 
    RowBox[{"-", "2.9316435123600003`*^-6"}], ",", 
    RowBox[{"-", "2.9023481104200004`*^-6"}], ",", 
    RowBox[{"-", "2.3367355964100003`*^-6"}], ",", 
    RowBox[{"-", "2.58887763912`*^-6"}], ",", 
    RowBox[{"-", "2.11110435333`*^-6"}], ",", 
    RowBox[{"-", "2.7955462378999997`*^-6"}], ",", 
    RowBox[{"-", "1.3881250292399997`*^-6"}], ",", 
    RowBox[{"-", "1.4744061045`*^-6"}], ",", 
    RowBox[{"-", "3.2977420992`*^-6"}], ",", "7.94822691568`*^-8", ",", 
    "1.1179706736`*^-6", ",", 
    RowBox[{"-", "2.3418034740000003`*^-6"}], ",", 
    RowBox[{"-", "4.17760816785`*^-6"}], ",", 
    RowBox[{"-", "2.1543473919000004`*^-6"}], ",", 
    RowBox[{"-", "3.3413627016000005`*^-6"}], ",", 
    RowBox[{"-", "4.70752130385`*^-6"}], ",", 
    RowBox[{"-", "2.6456093762000004`*^-6"}], ",", 
    RowBox[{"-", "1.7766870892000003`*^-6"}], ",", 
    RowBox[{"-", "2.7881057805000004`*^-6"}], ",", 
    RowBox[{"-", "1.6780923775`*^-6"}], ",", 
    RowBox[{"-", "3.0218881938`*^-6"}], ",", 
    RowBox[{"-", "2.5419354004000006`*^-6"}], ",", "5.4643416491`*^-7", ",", 
    RowBox[{"-", "2.6955085300000005`*^-6"}], ",", 
    RowBox[{"-", "9.8156209808`*^-6"}], ",", 
    RowBox[{"-", "6.0738218375`*^-7"}], ",", 
    RowBox[{"-", "1.98430802544`*^-6"}], ",", "6.773042979000001`*^-7", ",", 
    RowBox[{"-", "4.7107065`*^-6"}], ",", 
    RowBox[{"-", "6.529417018000001`*^-7"}], ",", 
    RowBox[{"-", "2.9016054372000006`*^-6"}], ",", 
    RowBox[{"-", "1.3890875714999998`*^-6"}], ",", "7.7196121`*^-7", ",", 
    RowBox[{"-", "2.4740510914`*^-6"}], ",", 
    RowBox[{"-", "2.828927452800001`*^-6"}], ",", "2.3575733957`*^-6", ",", 
    RowBox[{"-", "6.833085289800001`*^-7"}], ",", "1.690022037`*^-6", ",", 
    RowBox[{"-", "2.7598745855200004`*^-6"}], ",", "2.2243666725`*^-6", ",", 
    "1.9031892965000001`*^-6", ",", "3.0618156122400004`*^-7", ",", 
    "9.8902131976`*^-7", ",", "2.2936079335`*^-6", ",", 
    RowBox[{"-", "7.2141455988`*^-7"}], ",", 
    RowBox[{"-", "1.08520623666`*^-6"}], ",", "1.6021161336599999`*^-6", ",", 
    "2.7999875893`*^-6", ",", "3.34928022534`*^-6", ",", 
    RowBox[{"-", "8.612399894400001`*^-7"}], ",", "2.1954214546399998`*^-6", 
    ",", "3.69659401601`*^-6", ",", "8.777359890500001`*^-7", ",", 
    "2.2069974980000002`*^-6", ",", "1.0125815063100002`*^-6", ",", 
    RowBox[{"-", "1.7246671468`*^-6"}], ",", "1.8595800151599998`*^-6", ",", 
    "5.678629178400001`*^-7", ",", 
    RowBox[{"-", "9.014646162600002`*^-7"}], ",", 
    RowBox[{"-", "1.7730911073600003`*^-6"}], ",", 
    RowBox[{"-", "1.4926002768000003`*^-7"}], ",", 
    RowBox[{"-", "2.1099411123000004`*^-6"}], ",", "2.50783734201`*^-6", ",", 
    "4.04204763151`*^-6", ",", 
    RowBox[{"-", "1.912965637`*^-6"}], ",", 
    RowBox[{"-", "1.07559489`*^-6"}], ",", 
    RowBox[{"-", "1.92420203195`*^-6"}], ",", 
    RowBox[{"-", "1.7091778620000002`*^-6"}], ",", 
    RowBox[{"-", "2.86776704877`*^-6"}], ",", 
    RowBox[{"-", "1.10263183668`*^-6"}], ",", "1.5952141394100004`*^-7", ",", 
    "1.86528787386`*^-7", ",", "3.1405263888000004`*^-8", ",", 
    RowBox[{"-", "2.7121840529000003`*^-6"}], ",", 
    RowBox[{"-", "3.21295893516`*^-6"}], ",", "4.0742303576`*^-7", ",", 
    "1.7912699627800002`*^-6", ",", 
    RowBox[{"-", "2.44837909476`*^-6"}], ",", "2.3090158332800003`*^-6", ",", 
    
    RowBox[{"-", "2.4515740480000003`*^-6"}], ",", 
    RowBox[{"-", "2.8407199896`*^-6"}], ",", "2.4659325214800005`*^-6", ",", 
    "1.17594467258`*^-6", ",", 
    RowBox[{"-", "2.4948345330000005`*^-6"}], ",", "1.1184375474000002`*^-6", 
    ",", 
    RowBox[{"-", "4.2082692708`*^-6"}], ",", 
    RowBox[{"-", "1.7743604424000003`*^-6"}], ",", "9.023922083200001`*^-7", 
    ",", 
    RowBox[{"-", "1.5758254403800003`*^-6"}], ",", 
    RowBox[{"-", "2.4058101872000003`*^-6"}], ",", 
    RowBox[{"-", "1.79336000016`*^-6"}], ",", "9.133115122500003`*^-8", ",", 
    RowBox[{"-", "3.21528432104`*^-7"}], ",", 
    RowBox[{"-", "2.1858513664000004`*^-6"}], ",", 
    RowBox[{"-", "3.2937254169000002`*^-6"}], ",", 
    RowBox[{"-", "1.8052073039`*^-6"}], ",", "1.8067826814`*^-6", ",", 
    RowBox[{"-", "2.51957935772`*^-6"}], ",", 
    RowBox[{"-", "4.2559366197000004`*^-7"}], ",", 
    RowBox[{"-", "3.2537932766999997`*^-6"}], ",", 
    RowBox[{"-", "4.935420413100001`*^-8"}], ",", "2.69602840017`*^-6", ",", 
    RowBox[{"-", "2.1123176676000004`*^-6"}], ",", "1.4515757618000002`*^-6", 
    ",", 
    RowBox[{"-", "4.310241634200001`*^-6"}], ",", "2.14236294272`*^-6", ",", 
    "7.302413296100001`*^-7", ",", "5.896783190000002`*^-7", ",", 
    "2.0374997304399998`*^-6", ",", 
    RowBox[{"-", "4.846247656899999`*^-6"}], ",", "1.18789762741`*^-6", ",", 
    RowBox[{"-", "1.8072711595800002`*^-6"}], ",", "3.3892853222700004`*^-6", 
    ",", 
    RowBox[{"-", "4.3079771985000005`*^-7"}], ",", 
    RowBox[{"-", "2.9987156240000005`*^-6"}], ",", 
    RowBox[{"-", "1.64722077216`*^-6"}], ",", 
    RowBox[{"-", "2.241449907`*^-6"}], ",", 
    RowBox[{"-", "2.24750889488`*^-6"}], ",", 
    RowBox[{"-", "2.03248508299`*^-6"}], ",", 
    RowBox[{"-", "1.9725482994`*^-6"}], ",", 
    RowBox[{"-", "8.339723769600001`*^-7"}], ",", "8.256962040000002`*^-7", 
    ",", "2.4122554240000003`*^-8", ",", "1.6694201236000001`*^-6", ",", 
    "1.8441703368000004`*^-6", ",", "2.1562711097400003`*^-6", ",", 
    "2.611165850460001`*^-6", ",", 
    RowBox[{"-", "1.5988684800900005`*^-6"}], ",", "1.0359505916100002`*^-6", 
    ",", "3.68099675856`*^-7", ",", "1.0646317919999999`*^-6", ",", 
    RowBox[{"-", "1.8109828819600002`*^-6"}], ",", 
    RowBox[{"-", "2.24113299066`*^-6"}], ",", 
    RowBox[{"-", "3.14153712675`*^-7"}], ",", 
    RowBox[{"-", "1.6047938192`*^-6"}], ",", 
    RowBox[{"-", "2.3060671407`*^-6"}], ",", "2.2573537202700005`*^-7", ",", 
    "1.6589720749`*^-7", ",", "1.26974873284`*^-7", ",", 
    RowBox[{"-", "3.9966908175`*^-7"}], ",", "2.16263446388`*^-6", ",", 
    "2.8459584553200003`*^-6", ",", "1.0008793295700001`*^-6", ",", 
    "8.621933320000001`*^-7", ",", 
    RowBox[{"-", "1.8183757394400002`*^-6"}], ",", 
    RowBox[{"-", "1.9257675998399998`*^-6"}], ",", 
    RowBox[{"-", "1.2359800088999998`*^-6"}], ",", 
    RowBox[{"-", "2.8147145695500002`*^-6"}], ",", "1.44870085852`*^-6", ",", 
    
    RowBox[{"-", "2.6759387655`*^-6"}], ",", "1.3086662229700003`*^-6", ",", 
    RowBox[{"-", "3.2806899515000004`*^-6"}], ",", 
    RowBox[{"-", "1.4063816707`*^-6"}], ",", 
    RowBox[{"-", "4.994268031139999`*^-6"}], ",", 
    RowBox[{"-", "1.6365510374999998`*^-6"}], ",", "6.255555921660001`*^-6", 
    ",", "1.0357824928800002`*^-6", ",", "1.79897375712`*^-6", ",", 
    RowBox[{"-", "8.3424648774`*^-7"}], ",", 
    RowBox[{"-", "1.55964604126`*^-6"}], ",", "8.647183721370002`*^-7", ",", 
    "1.2679083665600002`*^-6", ",", 
    RowBox[{"-", "1.1659666916600001`*^-6"}], ",", 
    RowBox[{"-", "1.16486206005`*^-6"}], ",", "1.3334321613600001`*^-6", ",", 
    "8.937185475000001`*^-7", ",", 
    RowBox[{"-", "1.49635227042`*^-6"}], ",", 
    RowBox[{"-", "4.39952891008`*^-7"}], ",", "1.6374766358800001`*^-6", ",", 
    
    RowBox[{"-", "2.0081777612000006`*^-7"}], ",", 
    RowBox[{"-", "1.1964216719199998`*^-6"}], ",", "8.029533703700001`*^-7", 
    ",", "8.558670129299998`*^-7", ",", 
    RowBox[{"-", "1.2164809306`*^-6"}], ",", 
    RowBox[{"-", "2.52906580032`*^-7"}], ",", "1.27127526435`*^-6", ",", 
    RowBox[{"-", "6.719467670400001`*^-7"}], ",", 
    RowBox[{"-", "6.36149613176`*^-7"}], ",", "1.27604145438`*^-6", ",", 
    RowBox[{"-", "4.0689444474`*^-7"}], ",", 
    RowBox[{"-", "9.6349607965`*^-7"}], ",", "1.1803644016800003`*^-6", ",", 
    "2.5074567528500006`*^-8", ",", 
    RowBox[{"-", "1.0626666652800002`*^-6"}], ",", "8.151044911299999`*^-7", 
    ",", "2.488295309`*^-7", ",", 
    RowBox[{"-", "8.2778581292`*^-7"}], ",", "8.076499949700001`*^-7", ",", 
    RowBox[{"-", "2.0422544222500001`*^-7"}], ",", 
    RowBox[{"-", "5.64463210766`*^-7"}], ",", "9.7496422848`*^-7", ",", 
    RowBox[{"-", "4.947270426000001`*^-7"}], ",", 
    RowBox[{"-", "4.552242439079999`*^-7"}], ",", "9.6618641847`*^-7", ",", 
    RowBox[{"-", "5.2568126424`*^-7"}], ",", 
    RowBox[{"-", "2.4320572685400003`*^-7"}], ",", "7.703274750000001`*^-7", 
    ",", 
    RowBox[{"-", "6.8749972678`*^-7"}], ",", "2.6206342404`*^-7", ",", 
    "3.4372737322000005`*^-7", ",", 
    RowBox[{"-", "6.479786410000001`*^-7"}], ",", "5.7858409115`*^-7", ",", 
    RowBox[{"-", "3.072339725000001`*^-8"}], ",", 
    RowBox[{"-", "4.5086316432000004`*^-7"}], ",", "6.593096152`*^-7", ",", 
    RowBox[{"-", "3.4284328600000003`*^-7"}], ",", 
    RowBox[{"-", "9.191661533600002`*^-8"}], ",", "4.8071389212`*^-7", ",", 
    RowBox[{"-", "4.3547372348999996`*^-7"}], ",", "4.2042385413600004`*^-7", 
    ",", 
    RowBox[{"-", "1.3674378062800001`*^-7"}], ",", 
    RowBox[{"-", "8.817323125000001`*^-8"}], ",", "3.4292722356`*^-7", ",", 
    RowBox[{"-", "3.7342004616`*^-7"}], ",", "3.9924639129599997`*^-7", ",", 
    RowBox[{"-", "1.23099772576`*^-7"}], ",", 
    RowBox[{"-", "2.99082962442`*^-8"}], ",", "2.6256068901`*^-7", ",", 
    RowBox[{"-", "3.6112508993999993`*^-7"}], ",", "3.4103437387500003`*^-7", 
    ",", 
    RowBox[{"-", "9.5827476895`*^-8"}], ",", 
    RowBox[{"-", "8.6896005942`*^-8"}], ",", "3.1816372236999997`*^-7", ",", 
    RowBox[{"-", "3.917687826`*^-7"}], ",", "3.4620967696`*^-7"}], 
   "}"}]}]], "Output",
 CellChangeTimes->{3.395136994983788*^9}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Extracting row information from an mfs object (NEW in Nov 2008)\
\>", "Subsubsection",
 CellChangeTimes->{{3.434722796619138*^9, 3.4347228023534026`*^9}},
 CellTags->"Examples section"],

Cell["\<\
This is a bit shorter (although it executes a little more slowly)  to use \
where we formerly used Transpose[mfsColumn[...]]\
\>", "Text",
 CellChangeTimes->{{3.434722815978141*^9, 3.4347228420401406`*^9}, {
  3.434722905398299*^9, 3.4347229166793327`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{"mfsRow", "[", 
     RowBox[{"qpw", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<NAME\>\"", ",", "\"\<S\>\"", ",", "\"\<BETX\>\""}], 
       "}"}]}], "]"}], ",", "10"}], "]"}], "//", "TableForm"}]], "Input",
 CellChangeTimes->{{3.4347228047752314`*^9, 3.434722813056322*^9}, {
  3.4347228464931803`*^9, 3.4347228605866594`*^9}, {3.434722920054268*^9, 
  3.4347229274135017`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"S.DS.L1.B1\"\>", "12782.42019`", "31.41550915`"},
    {"\<\"DRIFT_89\"\>", "12782.92019`", "30.91033378`"},
    {"\<\"BPM.13L1.B1\"\>", "12782.92019`", "30.91033378`"},
    {"\<\"DRIFT_120\"\>", "12783.48719`", "30.36183505`"},
    {"\<\"MQT.13L1.B1\"\>", "12783.80719`", "30.07829013`"},
    {"\<\"DRIFT_121\"\>", "12784.10519`", "29.83503093`"},
    {"\<\"MQ.13L1.B1\"\>", "12787.20519`", "30.12009907`"},
    {"\<\"DRIFT_70\"\>", "12787.36569`", "30.28064709`"},
    {"\<\"MS.13L1.B1\"\>", "12787.73469`", "30.65784562`"},
    {"\<\"DRIFT_64\"\>", "12787.81819`", "30.74476493`"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.7]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.4347228626647444`*^9, {3.434722900664015*^9, 3.434722928069739*^9}}]
}, Open  ]],

Cell["However the second argument can take more general forms", "Text",
 CellChangeTimes->{{3.4347229321946597`*^9, 3.434722944975664*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "mfsRow"}]], "Input",
 CellChangeTimes->{{3.434722948163103*^9, 3.434722950803677*^9}}],

Cell[BoxData[
 StyleBox["\<\"mfsRow[qp,template] returns a list of values of the template \
for each row of the mfs object qp; the template is an expression whose lowest \
level elements are strings belonging to the set of column names in qp, e.g, {\
\\\"NAME\\\",{\\\"BETX\\\",Cos[\\\"MUX\\\"]} is valid but \
{\\\"NAME\\\",{\\\"BETX\\\",1+Cos[\\\"MUX\\\"]} is not. Some further forms \
(e.g., {\\\"NAME\\\",{foo[\\\"BETX\\\"],Cos[\\\"MUX\\\"]} where no evaluation \
is defined for the symbol foo) may also work.\\nmfsRow[qp] returns a simple \
list of all column values for each row.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.434722951381791*^9},
 CellTags->"Info3434726551-5985816"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsColumnNames", "[", "qpw", "]"}]], "Input",
 CellChangeTimes->{{3.4347229529286366`*^9, 3.4347229623503304`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"KEYWORD\"\>", ",", "\<\"NAME\"\>", ",", "\<\"PARENT\"\>", 
   ",", "\<\"L\"\>", ",", "\<\"K0L\"\>", ",", "\<\"K1L\"\>", 
   ",", "\<\"K2L\"\>", ",", "\<\"K3L\"\>", ",", "\<\"S\"\>", 
   ",", "\<\"BETX\"\>", ",", "\<\"BETY\"\>", ",", "\<\"DX\"\>", 
   ",", "\<\"DY\"\>", ",", "\<\"XC\"\>", ",", "\<\"YC\"\>", 
   ",", "\<\"ALFX\"\>", ",", "\<\"ALFY\"\>", ",", "\<\"MUX\"\>", 
   ",", "\<\"MUY\"\>", ",", "\<\"DPX\"\>", ",", "\<\"PXC\"\>", 
   ",", "\<\"PYC\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.4347229626472*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsRow", "[", 
   RowBox[{"qpw", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<S\>\"", ",", 
      RowBox[{"\"\<BETX\>\"", 
       RowBox[{"Cos", "[", "\"\<MUX\>\"", "]"}]}]}], "}"}]}], "]"}], "//", 
  "ListPlot"}]], "Input",
 CellChangeTimes->{{3.434722964350292*^9, 3.4347230166305385`*^9}}],

Cell[BoxData[
 GraphicsBox[
  {Hue[0.67, 0.6, 0.6], PointBox[CompressedData["
1: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

    "]]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{{3.434722989943551*^9, 3.4347230172086525`*^9}}]
}, Open  ]],

Cell["However not everything works", "Text",
 CellChangeTimes->{{3.4347230687545376`*^9, 3.4347230743481803`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsRow", "[", 
  RowBox[{"qpw", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<S\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<BETX\>\"", ",", 
         RowBox[{"-", "\"\<ALFX\>\""}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<BETY\>\"", ",", 
         RowBox[{"-", "\"\<ALFY\>\""}]}], "}"}]}], "}"}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.434722964350292*^9, 3.434723061785921*^9}, {
  3.434723110972477*^9, 3.4347231458468075`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsRow", "::", "\<\"invalid\"\>"}], ":", 
  " ", "\<\"invalid lowest level elements in template: \\!\\({\\(\\(-1\\)\\), \
\\(\\(-1\\)\\)}\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.434723062473408*^9, 3.4347230838011236`*^9}, {
   3.4347231406437826`*^9, 3.434723146456171*^9}, 3.4347232083456078`*^9}],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{{3.434723062598406*^9, 3.4347230838011236`*^9}, {
   3.4347231406594067`*^9, 3.434723146456171*^9}, 3.4347232083456078`*^9}]
}, Open  ]],

Cell["\<\
There are ways around the limitations using dummy symbols as heads\
\>", "Text",
 CellChangeTimes->{{3.43472308658232*^9, 3.434723092472832*^9}, {
  3.434723327827688*^9, 3.4347233334525805`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Take", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"mfsRow", "[", 
     RowBox[{"qpw", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<S\>\"", ",", 
        RowBox[{"MatrixForm", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"\"\<BETX\>\"", ",", 
             RowBox[{"minus", "[", "\"\<ALFX\>\"", "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\"\<BETY\>\"", ",", 
             RowBox[{"minus", "[", "\"\<ALFY\>\"", "]"}]}], "}"}]}], "}"}], 
         "]"}]}], "}"}]}], "]"}], "/.", 
    RowBox[{
     RowBox[{"minus", "[", "x_", "]"}], "\[Rule]", 
     RowBox[{"-", "x"}]}]}], ",", "\[IndentingNewLine]", "6"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.434722964350292*^9, 3.434723061785921*^9}, {
  3.434723110972477*^9, 3.4347231458468075`*^9}, {3.434723249782312*^9, 
  3.4347233193903503`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"12782.42019`", ",", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"31.41550915`", 
          RowBox[{"-", "0.5152458626`"}]},
         {"172.206284`", "2.347160539`"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12782.92019`", ",", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"30.91033378`", 
          RowBox[{"-", "0.4951048823`"}]},
         {"174.5628942`", "2.366059857`"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12782.92019`", ",", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"30.91033378`", 
          RowBox[{"-", "0.4951048823`"}]},
         {"174.5628942`", "2.366059857`"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12783.48719`", ",", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"30.36183505`", 
          RowBox[{"-", "0.4722650107`"}]},
         {"177.2581579`", "2.387491684`"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12783.80719`", ",", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"30.07829013`", 
          RowBox[{"-", "0.4139556239`"}]},
         {"178.7038735`", "2.129641454`"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12784.10519`", ",", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"29.83503093`", 
          RowBox[{"-", "0.4023504077`"}]},
         {"179.9758905`", "2.138872037`"}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.434723283562913*^9, 3.434723320655951*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Selection  within  ",
 StyleBox["m", "Input"],
 StyleBox["fs", "Input"],
 " objects"
}], "Subsection",
 CellTags->"Examples section"],

Cell[TextData[{
 "Many of the tables saved by MAD take the form of a list of machine elements \
together with the values of various optical functions (e.g., the OPTICS, \
TWISS3, ENVELOPE tables).   Although MAD itself provides a selection \
mechanism for limiting these tables to certain classes of elements, it is \
often convenient to select further after the optics calculations have been \
done.  You might want to simply tabulate the functions at some known subset \
of the elements originally chosen.  Or, more interestingly, you might want to \
select elements according to the ",
 StyleBox["values of the optical functions",
  FontSlant->"Italic"],
 ".   For example, elements with large \[Beta] functions might be potential  \
aperture limits."
}], "Text",
 CellTags->"Examples section"],

Cell["\<\
In the following we provide a general selection mechanism and some simpler \
ones for common cases.\
\>", "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell["An OPTICS table example", "Subsubsection",
 CellTags->"Examples section"],

Cell[TextData[{
 "Create an ",
 StyleBox["mfs", "Input"],
 " data object from an OPTICS table containing values at the IPs and pickups \
in LEP:"
}], "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"opticsfile", "  ", "=", " ", 
  RowBox[{"ToFileName", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"AfsHomeDirectory", "[", "\"\<jowett\>\"", "]"}], ",", 
      "\"\<public\>\"", ",", "\"\<math\>\"", ",", "\"\<Madtomma\>\"", ",", 
      "\"\<Mfs\>\"", ",", "\"\<Examples\>\""}], "}"}], ",", 
    "\"\<OPTICSdp0000.tfs\>\""}], "]"}]}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData["\<\"P:\\\\cern.ch\\\\user\\\\j\\\\jowett\\\\public\\\\math\\\\\
Madtomma\\\\Mfs\\\\Examples\\\\OPTICSdp0000.tfs\"\>"], "Output",
 CellChangeTimes->{3.3951370058587184`*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"OPTICS", "[", "0", "]"}], "=", 
   RowBox[{"tfsRead", "[", 
    RowBox[{"opticsfile", ",", 
     RowBox[{"mfsVerbose", "->", "False"}]}], "]"}]}], ";"}]], "Input",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsColumnNames", "[", 
  RowBox[{"OPTICS", "[", "0", "]"}], "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"NAME\"\>", ",", "\<\"BETX\"\>", ",", "\<\"DX\"\>", 
   ",", "\<\"BETY\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.3951370061399665`*^9},
 CellTags->"Examples section"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["General Selection  Method", "Subsubsection",
 CellTags->"Examples section"],

Cell[TextData[{
 StyleBox["mfsSelect", "Input"],
 " is a very general selection function modelled on the standard ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function ",
 StyleBox["Select ", "Input"],
 "[",
 ButtonBox["1",
  BaseStyle->"Hyperlink",
  ButtonData:>"Wolfram book"],
 "].  To understand how it works, you should first have some understanding of \
",
 StyleBox["Select", "Input"],
 " and the notion of pure functions in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ".  If you do not, then I recommend that you skip this subsection and look \
at the simpler  selection functions (",
 StyleBox["mfsMember", "Input"],
 ", ",
 StyleBox["mfsRange", "Input"],
 ") below.  They cover many practical cases.  "
}], "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "mfsSelect"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 StyleBox["\<\"mfsSelect[mfsdata,criterion] extracts rows satisfying \
criterion (function) from an mfsdata object.\"\>", "MSG"]], "Print", \
"PrintUsage",
 CellChangeTimes->{3.39513700640559*^9},
 CellTags->{"Examples section", "Info3395144206-1341006"}]
}, Open  ]],

Cell[TextData[{
 StyleBox["mfsSelect ", "Input"],
 "is usually used in conjunction with an auxiliary function ",
 StyleBox["mfsColumnValue", "Input"],
 StyleBox[".  ", "Input"],
 "This allows selection from a specified row. To see how it works, we can \
look at the row number 14 in the OPTICS table.  This function can be used to \
extract the value of the column ",
 StyleBox["\"NAME\"", "Input"],
 " for that row."
}], "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"arow", "=", 
  RowBox[{
   RowBox[{"mfsColumn", "[", 
    RowBox[{"OPTICS", "[", "0", "]"}], "]"}], "\[LeftDoubleBracket]", "14", 
   "\[RightDoubleBracket]"}]}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PU.QL15.R1\"\>", ",", "129.71`", ",", "0.987151`", ",", 
   "21.1482`"}], "}"}]], "Output",
 CellChangeTimes->{3.395137006530589*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsColumnValue", "[", 
  RowBox[{
   RowBox[{"OPTICS", "[", "0", "]"}], ",", "arow", ",", "\"\<NAME\>\""}], 
  "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData["\<\"PU.QL15.R1\"\>"], "Output",
 CellChangeTimes->{3.3951370065930886`*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[TextData[{
 "Now the ",
 StyleBox["mfsColumnValue", "Input"],
 " function allows a very convenient specification of a selection criterion,  \
. For example, using it to construct an appropriate pure function, you can \
create a ",
 StyleBox["new",
  FontSlant->"Italic"],
 " ",
 StyleBox["mfs", "Input"],
 " data object containing only the elements where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Beta]", "x"], ">", 
    RowBox[{"250", " ", ":"}]}], TraditionalForm]]]
}], "Text",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hibetx", "=", 
   RowBox[{"mfsSelect", "[", 
    RowBox[{
     RowBox[{"OPTICS", "[", "0", "]"}], ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"mfsColumnValue", "[", 
         RowBox[{
          RowBox[{"OPTICS", "[", "0", "]"}], ",", "#", ",", "\"\<BETX\>\""}], 
         "]"}], ">", "250."}], ")"}], "&"}]}], "]"}]}], ";"}]], "Input",
 CellTags->"Examples section"],

Cell[TextData[{
 "Then we can make a table showing the values of both ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Beta]", "x"], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Beta]", "y"], TraditionalForm]]],
 " at these elements:"
}], "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Transpose", "[", 
   RowBox[{"mfsColumn", "[", 
    RowBox[{"hibetx", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<NAME\>\"", ",", "\"\<BETX\>\"", ",", "\"\<BETY\>\""}], 
      "}"}]}], "]"}], "]"}], "//", "TableForm"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"PU.QS1A.L2\"\>", "294.131`", "70.5863`"},
    {"\<\"PU.QS1A.R2\"\>", "294.136`", "70.5862`"},
    {"\<\"PU.QS1A.L4\"\>", "321.516`", "74.436`"},
    {"\<\"PU.QS1A.R4\"\>", "321.519`", "74.4358`"},
    {"\<\"PU.QS1A.L6\"\>", "299.147`", "76.797`"},
    {"\<\"PU.QS1A.R6\"\>", "299.145`", "76.7969`"},
    {"\<\"PU.QS1A.L8\"\>", "321.465`", "74.4562`"},
    {"\<\"PU.QS1A.R8\"\>", "321.467`", "74.4614`"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.7]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.395137006671213*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[TextData[{
 "As a further example, we can select all the rows whose name contains the \
string ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"QL11", "."}], "Input"], TraditionalForm]]],
 "  The similarity to the mechanism used in ",
 StyleBox["Select", "Input"],
 " should now be very obvious."
}], "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{"Transpose", "[", 
   RowBox[{"mfsColumn", "[", 
    RowBox[{
     RowBox[{"mfsSelect", "[", 
      RowBox[{
       RowBox[{"OPTICS", "[", "0", "]"}], ",", 
       RowBox[{
        RowBox[{"StringMatchQ", "[", 
         RowBox[{
          RowBox[{"mfsColumnValue", "[", 
           RowBox[{
            RowBox[{"OPTICS", "[", "0", "]"}], ",", "#1", ",", 
            "\"\<NAME\>\""}], "]"}], ",", "\"\<*QL11*\>\""}], "]"}], "&"}]}], 
      "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<NAME\>\"", ",", "\"\<BETX\>\"", ",", "\"\<DX\>\""}], 
      "}"}]}], "]"}], "]"}], "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"PU.QL11.R1\"\>", "146.035`", "7.4742`*^-9"},
    {"\<\"PU.QL11.L3\"\>", "146.041`", 
     RowBox[{"-", "2.4281299999999997`*^-7"}]},
    {"\<\"PU.QL11.R3\"\>", "146.041`", "2.34022`*^-7"},
    {"\<\"PU.QL11.L5\"\>", "146.042`", "2.01702`*^-7"},
    {"\<\"PU.QL11.R5\"\>", "146.042`", 
     RowBox[{"-", "1.78043`*^-7"}]},
    {"\<\"PU.QL11.L7\"\>", "146.041`", 
     RowBox[{"-", "1.20652`*^-7"}]},
    {"\<\"PU.QL11.R7\"\>", "146.041`", "8.66908`*^-8"},
    {"\<\"PU.QL11.L1\"\>", "146.036`", "2.4693699999999996`*^-8"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.7]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.395137006733713*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[TextData[{
 "Arbitrary logical cominations of criteria can be built up using standard ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " functions and operators.  Here, we select those elements containing ",
 StyleBox["\"QS1\"", "Input"],
 " in their names where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Beta]", "x"], ">", "320"}], TraditionalForm]]],
 ":"
}], "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsSelect", "[", 
  RowBox[{
   RowBox[{"OPTICS", "[", "0", "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"StringMatchQ", "[", 
      RowBox[{
       RowBox[{"mfsColumnValue", "[", 
        RowBox[{
         RowBox[{"OPTICS", "[", "0", "]"}], ",", "#1", ",", "\"\<NAME\>\""}], 
        "]"}], ",", "\"\<*QS1*\>\""}], "]"}], "&&", 
     RowBox[{
      RowBox[{"mfsColumnValue", "[", 
       RowBox[{
        RowBox[{"OPTICS", "[", "0", "]"}], ",", "#1", ",", "\"\<BETX\>\""}], 
       "]"}], ">", "320."}]}], "&"}]}], "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{"mfs", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\<\"GAMTR\"\>", ",", "73.4237`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"ALFA\"\>", ",", "0.000185493`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"XIY\"\>", ",", "0.987098`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"XIX\"\>", ",", "1.00236`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"QY\"\>", ",", "76.1942`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"QX\"\>", ",", "90.2859`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"CIRCUM\"\>", ",", "26658.872082`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"DELTA\"\>", ",", "0.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"TYPE\"\>", ",", "\<\"OPTICS\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"TITLE\"\>", 
       ",", "\<\"N0520P97v2.lep, 90/60 BT optics for 1997 up to 97 GeV\"\>"}],
       "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"ORIGIN\"\>", ",", "\<\"MAD 8.21/13 HP/UX\"\>"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"DATE\"\>", ",", "\<\"12/08/97\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"TIME\"\>", ",", "\<\"15.04.39\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"Source_File\"\>", 
       ",", "\<\"P:\\\\cern.ch\\\\user\\\\j\\\\jowett\\\\public\\\\math\\\\\
Madtomma\\\\Mfs\\\\Examples\\\\OPTICSdp0000.tfs\"\>"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"NAME\"\>", ",", "\<\"BETX\"\>", ",", "\<\"DX\"\>", 
     ",", "\<\"BETY\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS1A.L4\"\>", ",", "321.516`", ",", 
       RowBox[{"-", "2.47388`*^-7"}], ",", "74.436`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS1A.R4\"\>", ",", "321.519`", ",", "6.39189`*^-8", ",",
        "74.4358`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS1A.L8\"\>", ",", "321.465`", ",", 
       RowBox[{"-", "3.40013`*^-7"}], ",", "74.4562`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS1A.R8\"\>", ",", "321.467`", ",", "3.03216`*^-7", ",",
        "74.4614`"}], "}"}]}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.395137006780587*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[TextData[{
 "If you know the internal structure of the mfs data object, you can refer \
directly to its elements  without using the ",
 StyleBox["mfsColumnValue", "Input"],
 " function directly (but this is not normally recommended). For instance, \
knowing the columns 2 and 2 contain the appropriate quantities you can select \
the rows where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Beta]", "x"], TraditionalForm]]],
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["D", "x"], ">", "140"}], TraditionalForm]]],
 ":"
}], "Text",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"mfsSelect", "[", 
    RowBox[{
     RowBox[{"OPTICS", "[", "0", "]"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
        " ", 
        RowBox[{
        "#1", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], ">", 
       "140."}], "&"}]}], "]"}]}], ";"}]], "Input",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Transpose", "[", 
   RowBox[{"mfsColumn", "[", 
    RowBox[{"result", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<NAME\>\"", ",", "\"\<BETX\>\"", ",", "\"\<DX\>\""}], 
      "}"}]}], "]"}], "]"}], "//", "TableForm"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"PU.QS15.L2\"\>", "149.927`", "0.950618`"},
    {"\<\"PU.QS15.R2\"\>", "149.922`", "0.950618`"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.7]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.395137006843087*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell["This is equivalent to the selection", "Text",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"result1", "=", 
   RowBox[{"mfsSelect", "[", 
    RowBox[{
     RowBox[{"OPTICS", "[", "0", "]"}], ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"mfsColumnValue", "[", 
          RowBox[{
           RowBox[{"OPTICS", "[", "0", "]"}], ",", "#", ",", "\"\<BETX\>\""}],
           "]"}], 
         RowBox[{"mfsColumnValue", "[", 
          RowBox[{
           RowBox[{"OPTICS", "[", "0", "]"}], ",", "#", ",", "\"\<DX\>\""}], 
          "]"}]}], ">", "140."}], ")"}], "&"}]}], "]"}]}], ";"}]], "Input",
 CellTags->"Examples section"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Simple  selection  mechanisms", "Subsubsection",
 CellTags->"Examples section"],

Cell["\<\
Common cases can be handled with simpler functions, e.g., when the names in a \
given column belongs to a specified set or numerical values fall in a given \
range. \
\>", "Text",
 CellTags->"Examples section"],

Cell["\<\
To select from a set, we can first create a set of interaction point names \
and then select all the rows containing them.\
\>", "Text",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IPs", " ", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<IP2\>\"", ",", "\"\<IP4\>\"", ",", "\"\<IP6\>\"", ",", 
     "\"\<IP8\>\""}], "}"}]}], ";"}]], "Input",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IPoptics", "=", 
  RowBox[{"mfsMember", "[", 
   RowBox[{
    RowBox[{"OPTICS", "[", "0", "]"}], ",", "\"\<NAME\>\"", ",", "IPs"}], 
   "]"}]}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{"mfs", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\<\"GAMTR\"\>", ",", "73.4237`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"ALFA\"\>", ",", "0.000185493`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"XIY\"\>", ",", "0.987098`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"XIX\"\>", ",", "1.00236`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"QY\"\>", ",", "76.1942`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"QX\"\>", ",", "90.2859`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"CIRCUM\"\>", ",", "26658.872082`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"DELTA\"\>", ",", "0.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"TYPE\"\>", ",", "\<\"OPTICS\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"TITLE\"\>", 
       ",", "\<\"N0520P97v2.lep, 90/60 BT optics for 1997 up to 97 GeV\"\>"}],
       "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"ORIGIN\"\>", ",", "\<\"MAD 8.21/13 HP/UX\"\>"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"DATE\"\>", ",", "\<\"12/08/97\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"TIME\"\>", ",", "\<\"15.04.39\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"Source_File\"\>", 
       ",", "\<\"P:\\\\cern.ch\\\\user\\\\j\\\\jowett\\\\public\\\\math\\\\\
Madtomma\\\\Mfs\\\\Examples\\\\OPTICSdp0000.tfs\"\>"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"NAME\"\>", ",", "\<\"BETX\"\>", ",", "\<\"DX\"\>", 
     ",", "\<\"BETY\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\<\"IP2\"\>", ",", "2.`", ",", "2.87934`*^-8", ",", 
       "0.049999100000000005`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"IP4\"\>", ",", "2.00002`", ",", 
       RowBox[{"-", "2.57651`*^-8"}], ",", "0.0499995`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"IP6\"\>", ",", "2.00002`", ",", "1.76834`*^-8", ",", 
       "0.050000100000000006`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"IP8\"\>", ",", "1.99995`", ",", 
       RowBox[{"-", "5.1688100000000005`*^-9"}], ",", "0.0499975`"}], "}"}]}],
     "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.3951370069524612`*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Transpose", "[", 
   RowBox[{"mfsColumn", "[", 
    RowBox[{"IPoptics", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<NAME\>\"", ",", "\"\<BETX\>\"", ",", "\"\<BETY\>\""}], 
      "}"}]}], "]"}], "]"}], "//", "TableForm"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"IP2\"\>", "2.`", "0.049999100000000005`"},
    {"\<\"IP4\"\>", "2.00002`", "0.0499995`"},
    {"\<\"IP6\"\>", "2.00002`", "0.050000100000000006`"},
    {"\<\"IP8\"\>", "1.99995`", "0.0499975`"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.7]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.3951370069993362`*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[TextData[{
 "A similar function handles the case when a value is a number in a specified \
range. For instance, select the rows with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"120", "<", 
    SubscriptBox["\[Beta]", "x"], "<", 
    RowBox[{"126", " ", ":"}]}], TraditionalForm]]]
}], "Text",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"betxval", "=", 
   RowBox[{"mfsRange", "[", 
    RowBox[{
     RowBox[{"OPTICS", "[", "0", "]"}], ",", "\"\<BETX\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"120", ",", "126"}], "}"}]}], "]"}]}], " ", ";"}]], "Input",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Transpose", "[", 
   RowBox[{"mfsColumn", "[", 
    RowBox[{"betxval", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<NAME\>\"", ",", "\"\<BETX\>\""}], "}"}]}], "]"}], "]"}], "//",
   "TableForm"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"PU.QL2B.R1\"\>", "125.212`"},
    {"\<\"PU.QL2B.L3\"\>", "125.213`"},
    {"\<\"PU.QL2B.R3\"\>", "125.21`"},
    {"\<\"PU.QL2B.L5\"\>", "125.212`"},
    {"\<\"PU.QL2B.R5\"\>", "125.211`"},
    {"\<\"PU.QL2B.L7\"\>", "125.21`"},
    {"\<\"PU.QL2B.R7\"\>", "125.213`"},
    {"\<\"PU.QL2B.L1\"\>", "125.209`"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.7]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.3951370070618353`*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[TextData[{
 "Of course, the limits of the range need not be finite.  To find all places \
with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Beta]", "x"], ">", "300"}], TraditionalForm]]],
 ", we can use"
}], "Text",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hibetx", "=", 
   RowBox[{"mfsRange", "[", 
    RowBox[{
     RowBox[{"OPTICS", "[", "0", "]"}], ",", "\"\<BETX\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"300", ",", "\[Infinity]"}], "}"}]}], "]"}]}], " ", 
  ";"}]], "Input",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsColumn", "[", 
  RowBox[{"hibetx", ",", "\"\<NAME\>\""}], "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PU.QS1A.L4\"\>", ",", "\<\"PU.QS1A.R4\"\>", 
   ",", "\<\"PU.QS1A.L8\"\>", ",", "\<\"PU.QS1A.R8\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.3951370071243353`*^9},
 CellTags->"Examples section"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Other Selection Methods", "Subsubsection",
 CellTags->"Examples section"],

Cell[TextData[{
 StyleBox["mfsSelect", "Input"],
 " is quite general and useful. However other methods of data selection are \
also possible. For instance, you can use BooleanSelect from the \
Statistics`DataManipulation` package (which is made available by the ",
 StyleBox["Mfs", "Input"],
 " package). As an example, first construct a boolean array  that indicates \
all places where the product ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Beta]", "x"], 
     SubscriptBox["D", "x"]}], ">", "120", " "}], TraditionalForm]]],
 "."
}], "Text",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"test", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"Greater", "[", 
      RowBox[{"#", ",", "120."}], "]"}], "&"}], " ", "/@", " ", 
    RowBox[{"(", " ", 
     RowBox[{
      RowBox[{"mfsColumn", "[", 
       RowBox[{
        RowBox[{"OPTICS", "[", "0", "]"}], ",", "\"\<BETX\>\""}], "]"}], " ", 
      
      RowBox[{"mfsColumn", "[", 
       RowBox[{
        RowBox[{"OPTICS", "[", "0", "]"}], ",", "\"\<DX\>\""}], "]"}]}], "  ",
      ")"}]}]}], ";"}]], "Input",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Short", "[", 
  RowBox[{"test", ",", "5"}], "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
   "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
    "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
    "False", ",", "False", ",", "False", ",", "True", ",", "False", ",", 
    "True", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
    "False", ",", "False", ",", "False", ",", 
    RowBox[{"\[LeftSkeleton]", "463", "\[RightSkeleton]"}], ",", "False", ",",
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
    "False", ",", "True", ",", "False", ",", "True", ",", "False", ",", 
    "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
    "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
    "False", ",", "False"}], "}"}],
  Short[#, 5]& ]], "Output",
 CellChangeTimes->{3.3951370071712103`*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[TextData[{
 "Then get the rows where the product ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Beta]", "x"], 
     SubscriptBox["D", "x"]}], ">", "120", " "}], TraditionalForm]]],
 "."
}], "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "BooleanSelect"}]], "Input",
 CellTags->"Examples section"],

Cell["Madtomma`Mfs`Mfs`BooleanSelect", "Print", "PrintUsage",
 CellChangeTimes->{3.3951370311398067`*^9},
 CellTags->{"Examples section", "Info3395144230-6821624"}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanSelect", "[", 
  RowBox[{
   RowBox[{"Transpose", "[", " ", 
    RowBox[{"mfsColumn", "[", 
     RowBox[{
      RowBox[{"OPTICS", "[", "0", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<NAME\>\"", ",", "\"\<BETX\>\"", ",", "\"\<DX\>\""}], 
       "}"}]}], "]"}], "]"}], ",", "test"}], "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{"BooleanSelect", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\<\"IP1\"\>", ",", "25.2426`", ",", "8.783129999999999`*^-8"}],
       "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL1B.R1\"\>", ",", "75.9511`", ",", 
       "1.1074299999999999`*^-7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL2B.R1\"\>", ",", "125.212`", ",", "1.33995`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL4B.R1\"\>", ",", "17.0004`", ",", 
       RowBox[{"-", "5.92225`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL5.R1\"\>", ",", "148.59`", ",", 
       RowBox[{"-", "2.09735`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL6.R1\"\>", ",", "43.6364`", ",", 
       RowBox[{"-", "1.14942`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL7.R1\"\>", ",", "146.044`", ",", 
       RowBox[{"-", "1.84568`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL8.R1\"\>", ",", "55.9802`", ",", 
       RowBox[{"-", "9.39521`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL9.R1\"\>", ",", "146.039`", ",", 
       RowBox[{"-", "1.0375299999999999`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL10.R1\"\>", ",", "55.9782`", ",", 
       RowBox[{"-", "3.2671699999999993`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL11.R1\"\>", ",", "146.035`", ",", "7.4742`*^-9"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL12.R1\"\>", ",", "43.2113`", ",", "0.00951065`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL14.R1\"\>", ",", "8.51054`", ",", "0.281133`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL15.R1\"\>", ",", "129.71`", ",", "0.987151`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL16.R1\"\>", ",", "39.1902`", ",", "0.568661`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL17.R1\"\>", ",", "117.425`", ",", "1.07893`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL18.R1\"\>", ",", "26.5935`", ",", "0.603865`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD20.R1\"\>", ",", "25.9668`", ",", "0.597167`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD22.R1\"\>", ",", "25.9684`", ",", "0.59725`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD24.R1\"\>", ",", "25.9692`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD26.R1\"\>", ",", "25.9705`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD28.R1\"\>", ",", "25.9692`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD30.R1\"\>", ",", "25.9705`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD32.R1\"\>", ",", "25.9692`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD34.R1\"\>", ",", "25.9705`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD36.R1\"\>", ",", "25.9692`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD38.R1\"\>", ",", "25.9705`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD40.R1\"\>", ",", "25.9692`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD42.R1\"\>", ",", "25.9705`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD44.R1\"\>", ",", "25.9692`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD46.R1\"\>", ",", "25.9705`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD48.R1\"\>", ",", "25.9692`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD48.L2\"\>", ",", "25.9705`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD46.L2\"\>", ",", "25.9692`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD44.L2\"\>", ",", "25.9705`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD42.L2\"\>", ",", "25.9692`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD40.L2\"\>", ",", "25.9705`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD38.L2\"\>", ",", "25.9692`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD36.L2\"\>", ",", "25.9705`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD34.L2\"\>", ",", "25.9692`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD32.L2\"\>", ",", "25.9705`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD30.L2\"\>", ",", "25.9692`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD28.L2\"\>", ",", "25.9705`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD26.L2\"\>", ",", "25.9692`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD24.L2\"\>", ",", "25.9705`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD22.L2\"\>", ",", "25.9692`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD20.L2\"\>", ",", "25.9705`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS18.L2\"\>", ",", "25.9692`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS17.L2\"\>", ",", "99.7021`", ",", "0.969197`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS16.L2\"\>", ",", "41.1536`", ",", "0.540284`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS15.L2\"\>", ",", "149.927`", ",", "0.950618`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS14.L2\"\>", ",", "8.55713`", ",", "0.288718`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS12.L2\"\>", ",", "27.9648`", ",", "0.0114436`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS11.L2\"\>", ",", "91.2109`", ",", 
       RowBox[{"-", "3.4675`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS10.L2\"\>", ",", "7.85585`", ",", 
       "5.706139999999999`*^-8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS9.L2\"\>", ",", "130.1`", ",", "1.82484`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS8.L2\"\>", ",", "22.782`", ",", "3.16583`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS7.L2\"\>", ",", "86.3211`", ",", 
       RowBox[{"-", "5.4380099999999993`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS6.L2\"\>", ",", "27.454`", ",", 
       RowBox[{"-", "6.99656`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS5.L2\"\>", ",", "90.0553`", ",", 
       RowBox[{"-", "1.8224299999999997`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS4.L2\"\>", ",", "17.4177`", ",", 
       RowBox[{"-", "2.5884899999999998`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS3.L2\"\>", ",", "40.9498`", ",", 
       RowBox[{"-", "1.05204`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS1A.L2\"\>", ",", "294.131`", ",", "1.02048`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS0.L2\"\>", ",", "40.0054`", ",", "4.48462`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"IP2\"\>", ",", "2.`", ",", "2.87934`*^-8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS0.R2\"\>", ",", "40.0061`", ",", 
       "4.2124899999999996`*^-8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS1A.R2\"\>", ",", "294.136`", ",", "9.45253`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS3.R2\"\>", ",", "40.9496`", ",", 
       RowBox[{"-", "1.34331`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS4.R2\"\>", ",", "17.4174`", ",", 
       RowBox[{"-", "2.76953`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS5.R2\"\>", ",", "90.0569`", ",", 
       RowBox[{"-", "1.8075599999999998`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS6.R2\"\>", ",", "27.4547`", ",", 
       RowBox[{"-", "6.81399`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS7.R2\"\>", ",", "86.3233`", ",", 
       RowBox[{"-", "5.02989`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS8.R2\"\>", ",", "22.7817`", ",", "3.37123`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS9.R2\"\>", ",", "130.094`", ",", 
       "1.8566099999999998`*^-7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS10.R2\"\>", ",", "7.85615`", ",", 
       "5.7026799999999994`*^-8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS11.R2\"\>", ",", "91.2073`", ",", 
       RowBox[{"-", "3.8959799999999995`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS12.R2\"\>", ",", "27.9644`", ",", "0.0114436`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS14.R2\"\>", ",", "8.55696`", ",", "0.288718`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS15.R2\"\>", ",", "149.922`", ",", "0.950618`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS16.R2\"\>", ",", "41.1532`", ",", "0.540284`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS17.R2\"\>", ",", "99.7042`", ",", "0.969197`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS18.R2\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD20.R2\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD22.R2\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD24.R2\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD26.R2\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD28.R2\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD30.R2\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD32.R2\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD34.R2\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD36.R2\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD38.R2\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD40.R2\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD42.R2\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD44.R2\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD46.R2\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD48.R2\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD48.L3\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD46.L3\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD44.L3\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD42.L3\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD40.L3\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD38.L3\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD36.L3\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD34.L3\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD32.L3\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD30.L3\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD28.L3\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD26.L3\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD24.L3\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD22.L3\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD20.L3\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL18.L3\"\>", ",", "26.5917`", ",", "0.603944`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL17.L3\"\>", ",", "117.415`", ",", "1.07886`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL16.L3\"\>", ",", "39.1978`", ",", "0.568597`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL15.L3\"\>", ",", "129.783`", ",", "0.987148`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL14.L3\"\>", ",", "8.50772`", ",", "0.28111`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL12.L3\"\>", ",", "43.2115`", ",", "0.00951048`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL11.L3\"\>", ",", "146.041`", ",", 
       RowBox[{"-", "2.4281299999999997`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL10.L3\"\>", ",", "55.9802`", ",", 
       RowBox[{"-", "1.37245`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL9.L3\"\>", ",", "146.042`", ",", 
       RowBox[{"-", "1.8671199999999998`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL8.L3\"\>", ",", "55.9802`", ",", 
       RowBox[{"-", "8.27258`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL7.L3\"\>", ",", "146.041`", ",", 
       RowBox[{"-", "7.588129999999999`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL6.L3\"\>", ",", "43.6347`", ",", "1.22517`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL5.L3\"\>", ",", "148.595`", ",", 
       "9.169359999999999`*^-8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL4B.L3\"\>", ",", "17.0029`", ",", "6.04301`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL2B.L3\"\>", ",", "125.213`", ",", "1.32513`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL1B.L3\"\>", ",", "75.9377`", ",", 
       "9.449459999999999`*^-8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"IP3\"\>", ",", "25.2416`", ",", 
       RowBox[{"-", "2.4002699999999997`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL1B.R3\"\>", ",", "75.9361`", ",", 
       RowBox[{"-", "1.5257999999999998`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL2B.R3\"\>", ",", "125.21`", ",", 
       RowBox[{"-", "2.02445`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL4B.R3\"\>", ",", "17.0033`", ",", 
       RowBox[{"-", "2.7192499999999997`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL5.R3\"\>", ",", "148.596`", ",", "2.36161`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL6.R3\"\>", ",", "43.6344`", ",", "5.01969`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL7.R3\"\>", ",", "146.038`", ",", 
       "1.7428999999999998`*^-7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL8.R3\"\>", ",", "55.979`", ",", "1.31958`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL9.R3\"\>", ",", "146.039`", ",", "2.39216`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL10.R3\"\>", ",", "55.9797`", ",", "1.52245`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL11.R3\"\>", ",", "146.041`", ",", "2.34022`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL12.R3\"\>", ",", "43.2122`", ",", "0.00951072`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL14.R3\"\>", ",", "8.50756`", ",", "0.28111`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL15.R3\"\>", ",", "129.783`", ",", "0.987147`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL16.R3\"\>", ",", "39.1984`", ",", "0.568597`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL17.R3\"\>", ",", "117.418`", ",", "1.07886`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL18.R3\"\>", ",", "26.5919`", ",", "0.603944`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD20.R3\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD22.R3\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD24.R3\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD26.R3\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD28.R3\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD30.R3\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD32.R3\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD34.R3\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD36.R3\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD38.R3\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD40.R3\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD42.R3\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD44.R3\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD46.R3\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD48.R3\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD48.L4\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD46.L4\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD44.L4\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD42.L4\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD40.L4\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD38.L4\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD36.L4\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD34.L4\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD32.L4\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD30.L4\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD28.L4\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD26.L4\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD24.L4\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD22.L4\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD20.L4\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS18.L4\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS17.L4\"\>", ",", "91.4156`", ",", "0.904504`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS16.L4\"\>", ",", "49.269`", ",", "0.565283`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS15.L4\"\>", ",", "139.083`", ",", "0.891688`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS14.L4\"\>", ",", "8.01018`", ",", "0.275156`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS12.L4\"\>", ",", "20.0172`", ",", "0.0116072`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS11.L4\"\>", ",", "89.1784`", ",", 
       RowBox[{"-", "9.44196`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS10.L4\"\>", ",", "17.0369`", ",", 
       RowBox[{"-", "8.29976`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS9.L4\"\>", ",", "107.639`", ",", 
       RowBox[{"-", "1.84119`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS8.L4\"\>", ",", "8.48464`", ",", "2.11101`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS7.L4\"\>", ",", "148.581`", ",", 
       "2.3103899999999998`*^-7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS6.L4\"\>", ",", "12.9968`", ",", "6.84185`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS5.L4\"\>", ",", "65.1719`", ",", 
       RowBox[{"-", "1.7628`*^-9"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS3A.L4\"\>", ",", "38.6852`", ",", 
       RowBox[{"-", "3.76497`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS1A.L4\"\>", ",", "321.516`", ",", 
       RowBox[{"-", "2.47388`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS0.L4\"\>", ",", "39.596`", ",", 
       RowBox[{"-", "9.22467`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"IP4\"\>", ",", "2.00002`", ",", 
       RowBox[{"-", "2.57651`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS0.R4\"\>", ",", "39.5963`", ",", 
       "1.4910999999999997`*^-8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS1A.R4\"\>", ",", "321.519`", ",", "6.39189`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS3A.R4\"\>", ",", "38.685`", ",", "7.34487`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS5.R4\"\>", ",", "65.1712`", ",", "1.29728`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS6.R4\"\>", ",", "12.9969`", ",", "6.23764`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS7.R4\"\>", ",", "148.583`", ",", "6.80107`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS8.R4\"\>", ",", "8.48462`", ",", 
       RowBox[{"-", "3.1336099999999996`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS9.R4\"\>", ",", "107.639`", ",", 
       RowBox[{"-", "1.93446`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS10.R4\"\>", ",", "17.0371`", ",", 
       RowBox[{"-", "4.00992`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS11.R4\"\>", ",", "89.1785`", ",", "7.61655`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS12.R4\"\>", ",", "20.0169`", ",", 
       "0.011607300000000001`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS14.R4\"\>", ",", "8.01025`", ",", "0.275156`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS15.R4\"\>", ",", "139.082`", ",", "0.891688`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS16.R4\"\>", ",", "49.2684`", ",", "0.565283`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS17.R4\"\>", ",", "91.4149`", ",", "0.904504`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS18.R4\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD20.R4\"\>", ",", "25.9695`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD22.R4\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD24.R4\"\>", ",", "25.9695`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD26.R4\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD28.R4\"\>", ",", "25.9695`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD30.R4\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD32.R4\"\>", ",", "25.9695`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD34.R4\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD36.R4\"\>", ",", "25.9695`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD38.R4\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD40.R4\"\>", ",", "25.9695`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD42.R4\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD44.R4\"\>", ",", "25.9695`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD46.R4\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD48.R4\"\>", ",", "25.9695`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD48.L5\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD46.L5\"\>", ",", "25.9695`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD44.L5\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD42.L5\"\>", ",", "25.9695`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD40.L5\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD38.L5\"\>", ",", "25.9695`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD36.L5\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD34.L5\"\>", ",", "25.9695`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD32.L5\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD30.L5\"\>", ",", "25.9695`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD28.L5\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD26.L5\"\>", ",", "25.9695`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD24.L5\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD22.L5\"\>", ",", "25.9695`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD20.L5\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL18.L5\"\>", ",", "26.5917`", ",", "0.603944`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL17.L5\"\>", ",", "117.417`", ",", "1.07886`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL16.L5\"\>", ",", "39.1983`", ",", "0.568597`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL15.L5\"\>", ",", "129.783`", ",", "0.987147`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL14.L5\"\>", ",", "8.50762`", ",", "0.28111`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL12.L5\"\>", ",", "43.212`", ",", "0.00951074`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL11.L5\"\>", ",", "146.042`", ",", "2.01702`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL10.L5\"\>", ",", "55.9802`", ",", 
       "9.508809999999999`*^-8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL9.L5\"\>", ",", "146.041`", ",", 
       "9.895059999999999`*^-8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL8.L5\"\>", ",", "55.9796`", ",", 
       "1.9237699999999997`*^-8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL7.L5\"\>", ",", "146.039`", ",", 
       RowBox[{"-", "3.2804899999999996`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL6.L5\"\>", ",", "43.6355`", ",", 
       RowBox[{"-", "6.89246`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL5.L5\"\>", ",", "148.585`", ",", 
       RowBox[{"-", "1.82266`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL4B.L5\"\>", ",", "17.0016`", ",", 
       RowBox[{"-", "7.96134`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL2B.L5\"\>", ",", "125.212`", ",", 
       RowBox[{"-", "3.92767`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL1B.L5\"\>", ",", "75.9468`", ",", 
       RowBox[{"-", "2.0225599999999997`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"IP5\"\>", ",", "25.2415`", ",", "6.459719999999999`*^-8"}],
       "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL1B.R5\"\>", ",", "75.9468`", ",", 
       "1.7655599999999998`*^-7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL2B.R5\"\>", ",", "125.211`", ",", 
       "2.2747899999999997`*^-7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL4B.R5\"\>", ",", "17.0016`", ",", 
       RowBox[{"-", "9.83156`*^-9"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL5.R5\"\>", ",", "148.585`", ",", 
       RowBox[{"-", "1.2804999999999999`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL6.R5\"\>", ",", "43.6355`", ",", 
       RowBox[{"-", "9.91423`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL7.R5\"\>", ",", "146.04`", ",", 
       RowBox[{"-", "2.33285`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL8.R5\"\>", ",", "55.9804`", ",", 
       RowBox[{"-", "1.52085`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL9.R5\"\>", ",", "146.041`", ",", 
       RowBox[{"-", "2.40252`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL10.R5\"\>", ",", "55.9835`", ",", 
       RowBox[{"-", "1.32377`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL11.R5\"\>", ",", "146.042`", ",", 
       RowBox[{"-", "1.78043`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL12.R5\"\>", ",", "43.212`", ",", "0.00951055`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL14.R5\"\>", ",", "8.50761`", ",", "0.28111`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL15.R5\"\>", ",", "129.783`", ",", "0.987148`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL16.R5\"\>", ",", "39.1983`", ",", "0.568597`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL17.R5\"\>", ",", "117.417`", ",", "1.07886`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL18.R5\"\>", ",", "26.5917`", ",", "0.603944`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD20.R5\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD22.R5\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD24.R5\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD26.R5\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD28.R5\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD30.R5\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD32.R5\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD34.R5\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD36.R5\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD38.R5\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD40.R5\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD42.R5\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD44.R5\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD46.R5\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD48.R5\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD48.L6\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD46.L6\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD44.L6\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD42.L6\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD40.L6\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD38.L6\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD36.L6\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD34.L6\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD32.L6\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD30.L6\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD28.L6\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD26.L6\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD24.L6\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD22.L6\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD20.L6\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS18.L6\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS17.L6\"\>", ",", "118.596`", ",", "1.10177`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS16.L6\"\>", ",", "37.4394`", ",", "0.571651`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS15.L6\"\>", ",", "109.087`", ",", "0.902138`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS14.L6\"\>", ",", "10.3385`", ",", "0.289143`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS12.L6\"\>", ",", "21.676`", ",", "0.0114441`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS11.L6\"\>", ",", "85.8298`", ",", "1.31311`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS10.L6\"\>", ",", "10.7726`", ",", 
       "6.456269999999999`*^-8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS9.L6\"\>", ",", "80.1496`", ",", "7.65062`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS8.L6\"\>", ",", "16.7796`", ",", 
       RowBox[{"-", "2.90955`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS7.L6\"\>", ",", "87.4257`", ",", 
       RowBox[{"-", "1.5959499999999997`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS6.L6\"\>", ",", "24.1883`", ",", 
       RowBox[{"-", "1.0007199999999998`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS5.L6\"\>", ",", "91.3708`", ",", 
       RowBox[{"-", "1.6855`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS4.L6\"\>", ",", "17.3124`", ",", "4.72242`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS3.L6\"\>", ",", "41.8943`", ",", "9.61409`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS1A.L6\"\>", ",", "299.147`", ",", 
       "3.2620900000000003`*^-7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS0.L6\"\>", ",", "41.5873`", ",", 
       "1.2426899999999999`*^-7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"IP6\"\>", ",", "2.00002`", ",", "1.76834`*^-8"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS0.R6\"\>", ",", "41.5865`", ",", 
       RowBox[{"-", "7.144869999999999`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS1A.R6\"\>", ",", "299.145`", ",", 
       RowBox[{"-", "2.0832`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS3.R6\"\>", ",", "41.8944`", ",", 
       RowBox[{"-", "1.109`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS4.R6\"\>", ",", "17.3125`", ",", 
       RowBox[{"-", "7.973519999999999`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS5.R6\"\>", ",", "91.3699`", ",", 
       RowBox[{"-", "5.28845`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS6.R6\"\>", ",", "24.188`", ",", "2.70062`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS7.R6\"\>", ",", "87.4255`", ",", 
       "1.3964799999999998`*^-7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS8.R6\"\>", ",", "16.7798`", ",", "8.28844`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS9.R6\"\>", ",", "80.1501`", ",", "1.41574`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS10.R6\"\>", ",", "10.7725`", ",", "8.08094`*^-10"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS11.R6\"\>", ",", "85.8301`", ",", 
       RowBox[{"-", "1.63405`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS12.R6\"\>", ",", "21.6762`", ",", 
       "0.011444000000000001`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS14.R6\"\>", ",", "10.3384`", ",", "0.289143`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS15.R6\"\>", ",", "109.088`", ",", "0.902138`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS16.R6\"\>", ",", "37.4398`", ",", "0.571651`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS17.R6\"\>", ",", "118.596`", ",", "1.10177`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS18.R6\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD20.R6\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD22.R6\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD24.R6\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD26.R6\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD28.R6\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD30.R6\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD32.R6\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD34.R6\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD36.R6\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD38.R6\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD40.R6\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD42.R6\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD44.R6\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD46.R6\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD48.R6\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD48.L7\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD46.L7\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD44.L7\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD42.L7\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD40.L7\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD38.L7\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD36.L7\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD34.L7\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD32.L7\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD30.L7\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD28.L7\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD26.L7\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD24.L7\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD22.L7\"\>", ",", "25.9698`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD20.L7\"\>", ",", "25.97`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL18.L7\"\>", ",", "26.5919`", ",", "0.603944`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL17.L7\"\>", ",", "117.418`", ",", "1.07886`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL16.L7\"\>", ",", "39.1984`", ",", "0.568597`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL15.L7\"\>", ",", "129.783`", ",", "0.987148`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL14.L7\"\>", ",", "8.50755`", ",", "0.28111`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL12.L7\"\>", ",", "43.2122`", ",", "0.00951051`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL11.L7\"\>", ",", "146.041`", ",", 
       RowBox[{"-", "1.20652`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL10.L7\"\>", ",", "55.9797`", ",", 
       RowBox[{"-", "3.396449999999999`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL9.L7\"\>", ",", "146.039`", ",", "8.81553`*^-9"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL8.L7\"\>", ",", "55.979`", ",", "4.84231`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL7.L7\"\>", ",", "146.038`", ",", 
       "1.3569999999999998`*^-7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL6.L7\"\>", ",", "43.6344`", ",", "1.12378`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL5.L7\"\>", ",", "148.596`", ",", "2.37538`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL4B.L7\"\>", ",", "17.0033`", ",", "8.32536`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL2B.L7\"\>", ",", "125.21`", ",", 
       RowBox[{"-", "6.225699999999999`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL1B.L7\"\>", ",", "75.9359`", ",", 
       RowBox[{"-", "5.84817`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"IP7\"\>", ",", "25.2416`", ",", 
       RowBox[{"-", "9.272909999999999`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL1B.R7\"\>", ",", "75.9377`", ",", 
       RowBox[{"-", "1.65917`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL2B.R7\"\>", ",", "125.213`", ",", 
       RowBox[{"-", "2.07908`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL4B.R7\"\>", ",", "17.0029`", ",", 
       "4.5152399999999995`*^-8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL5.R7\"\>", ",", "148.595`", ",", "2.07935`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL6.R7\"\>", ",", "43.6347`", ",", "1.28878`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL7.R7\"\>", ",", "146.041`", ",", "2.44482`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL8.R7\"\>", ",", "55.9803`", ",", "1.41774`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL9.R7\"\>", ",", "146.042`", ",", "1.94022`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL10.R7\"\>", ",", "55.9802`", ",", 
       "9.191479999999999`*^-8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL11.R7\"\>", ",", "146.041`", ",", "8.66908`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL12.R7\"\>", ",", "43.2115`", ",", 
       "0.009510610000000001`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL14.R7\"\>", ",", "8.50772`", ",", "0.28111`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL15.R7\"\>", ",", "129.783`", ",", "0.987147`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL16.R7\"\>", ",", "39.1978`", ",", "0.568597`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL17.R7\"\>", ",", "117.415`", ",", "1.07886`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL18.R7\"\>", ",", "26.5917`", ",", "0.603944`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD20.R7\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD22.R7\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD24.R7\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD26.R7\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD28.R7\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD30.R7\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD32.R7\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD34.R7\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD36.R7\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD38.R7\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD40.R7\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD42.R7\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD44.R7\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD46.R7\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD48.R7\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD48.L8\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD46.L8\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD44.L8\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD42.L8\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD40.L8\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD38.L8\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD36.L8\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD34.L8\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD32.L8\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD30.L8\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD28.L8\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD26.L8\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD24.L8\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD22.L8\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD20.L8\"\>", ",", "25.9696`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS18.L8\"\>", ",", "25.9702`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS17.L8\"\>", ",", "91.4137`", ",", "0.904504`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS16.L8\"\>", ",", "49.268`", ",", "0.565283`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS15.L8\"\>", ",", "139.082`", ",", "0.891688`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS14.L8\"\>", ",", "8.01035`", ",", "0.275156`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS12.L8\"\>", ",", "20.0168`", ",", "0.0116072`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS11.L8\"\>", ",", "89.1795`", ",", 
       RowBox[{"-", "1.78083`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS10.L8\"\>", ",", "17.0372`", ",", 
       RowBox[{"-", "5.66596`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS9.L8\"\>", ",", "107.638`", ",", 
       RowBox[{"-", "2.81991`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS8.L8\"\>", ",", "8.48469`", ",", "5.31644`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS7.L8\"\>", ",", "148.585`", ",", "1.98414`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS6.L8\"\>", ",", "12.9969`", ",", "1.93501`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS5.L8\"\>", ",", "65.1739`", ",", 
       RowBox[{"-", "1.23034`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS3A.L8\"\>", ",", "38.6921`", ",", 
       RowBox[{"-", "1.11209`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS1A.L8\"\>", ",", "321.465`", ",", 
       RowBox[{"-", "3.40013`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS0.L8\"\>", ",", "39.5991`", ",", 
       RowBox[{"-", "1.18475`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"IP8\"\>", ",", "1.99995`", ",", 
       RowBox[{"-", "5.1688100000000005`*^-9"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS0.R8\"\>", ",", "39.5971`", ",", 
       "1.0295999999999999`*^-7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS1A.R8\"\>", ",", "321.467`", ",", "3.03216`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS3A.R8\"\>", ",", "38.6935`", ",", 
       "1.1838899999999999`*^-7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS5.R8\"\>", ",", "65.1769`", ",", "1.48701`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS6.R8\"\>", ",", "12.9965`", ",", "6.88967`*^-9"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS7.R8\"\>", ",", "148.579`", ",", 
       RowBox[{"-", "1.3841`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS8.R8\"\>", ",", "8.48496`", ",", 
       RowBox[{"-", "5.52126`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS9.R8\"\>", ",", "107.636`", ",", 
       RowBox[{"-", "4.7545299999999996`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS10.R8\"\>", ",", "17.0364`", ",", "3.19619`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS11.R8\"\>", ",", "89.1813`", ",", "1.74411`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS12.R8\"\>", ",", "20.0177`", ",", 
       "0.011607300000000001`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS14.R8\"\>", ",", "8.01027`", ",", "0.275156`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS15.R8\"\>", ",", "139.088`", ",", "0.891688`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS16.R8\"\>", ",", "49.2698`", ",", "0.565283`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS17.R8\"\>", ",", "91.4142`", ",", "0.904504`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QS18.R8\"\>", ",", "25.969`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD20.R8\"\>", ",", "25.9708`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD22.R8\"\>", ",", "25.969`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD24.R8\"\>", ",", "25.9708`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD26.R8\"\>", ",", "25.969`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD28.R8\"\>", ",", "25.9708`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD30.R8\"\>", ",", "25.969`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD32.R8\"\>", ",", "25.9708`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD34.R8\"\>", ",", "25.969`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD36.R8\"\>", ",", "25.9708`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD38.R8\"\>", ",", "25.969`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD40.R8\"\>", ",", "25.9708`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD42.R8\"\>", ",", "25.969`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD44.R8\"\>", ",", "25.9708`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD46.R8\"\>", ",", "25.969`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD48.R8\"\>", ",", "25.9708`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD48.L1\"\>", ",", "25.969`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD46.L1\"\>", ",", "25.9708`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD44.L1\"\>", ",", "25.969`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD42.L1\"\>", ",", "25.9708`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD40.L1\"\>", ",", "25.969`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD38.L1\"\>", ",", "25.9708`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD36.L1\"\>", ",", "25.969`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD34.L1\"\>", ",", "25.9708`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD32.L1\"\>", ",", "25.969`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD30.L1\"\>", ",", "25.9708`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD28.L1\"\>", ",", "25.969`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD26.L1\"\>", ",", "25.9708`", ",", "0.59727`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD24.L1\"\>", ",", "25.969`", ",", "0.59727`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD22.L1\"\>", ",", "25.9686`", ",", "0.59725`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QD20.L1\"\>", ",", "25.9665`", ",", "0.597167`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL18.L1\"\>", ",", "26.5938`", ",", "0.603865`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL17.L1\"\>", ",", "117.428`", ",", "1.07893`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL16.L1\"\>", ",", "39.1909`", ",", "0.568661`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL15.L1\"\>", ",", "129.71`", ",", "0.987151`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL14.L1\"\>", ",", "8.51035`", ",", "0.281133`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL12.L1\"\>", ",", "43.2122`", ",", "0.00951066`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL11.L1\"\>", ",", "146.036`", ",", 
       "2.4693699999999996`*^-8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL10.L1\"\>", ",", "55.9776`", ",", 
       RowBox[{"-", "2.22177`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL9.L1\"\>", ",", "146.036`", ",", 
       RowBox[{"-", "8.83716`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL8.L1\"\>", ",", "55.9788`", ",", 
       RowBox[{"-", "8.619949999999999`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL7.L1\"\>", ",", "146.041`", ",", 
       RowBox[{"-", "1.75534`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL6.L1\"\>", ",", "43.636`", ",", 
       RowBox[{"-", "1.13571`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL5.L1\"\>", ",", "148.591`", ",", 
       RowBox[{"-", "2.1219399999999997`*^-7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL4B.L1\"\>", ",", "17.0008`", ",", 
       RowBox[{"-", "6.238679999999999`*^-8"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL2B.L1\"\>", ",", "125.209`", ",", "1.21899`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PU.QL1B.L1\"\>", ",", "75.9491`", ",", "1.0182`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"ENDLEP\"\>", ",", "25.2426`", ",", 
       "8.783129999999999`*^-8"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "True", ",", "False", ",", 
     "True", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "True", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "True", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "True", ",", "False", ",", 
     "True", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "True", ",", "False", ",", "True", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "True", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "True", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "True", ",", 
     "False", ",", "True", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "True", ",", "False", ",", "True", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "True", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "True", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "True", ",", "False", ",", "True", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "True", ",", "False", ",", "True", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "True", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "True", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "True", ",", "False", ",", 
     "True", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
     "False", ",", "False", ",", "False", ",", "False"}], "}"}]}], 
  "]"}]], "Output",
 CellChangeTimes->{{3.395137007452458*^9, 3.395137034842908*^9}},
 CellTags->"Examples section"]
}, Open  ]],

Cell[TextData[{
 "Still another way to do this is to use ",
 StyleBox["MapThread", "Input"],
 " to form the product of the two columns together with the element names.  \
Then the elements can be selected."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"MapThread", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"#1", ",", 
        RowBox[{"#2", " ", "#3"}]}], "}"}], "&"}], ",", 
     RowBox[{"mfsColumn", "[", 
      RowBox[{
       RowBox[{"OPTICS", "[", "0", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<NAME\>\"", ",", "\"\<BETX\>\"", ",", "\"\<DX\>\""}], 
        "}"}]}], "]"}]}], "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Last", "[", "#1", "]"}], ">", "120."}], "&"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"PU.QL15.R1\"\>", ",", "128.04335621`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"PU.QL17.R1\"\>", ",", "126.69335525`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"PU.QS15.L2\"\>", ",", "142.52330488599998`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"PU.QS15.R2\"\>", ",", "142.518551796`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"PU.QL17.L3\"\>", ",", "126.6743469`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"PU.QL15.L3\"\>", ",", "128.115028884`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"PU.QL15.R3\"\>", ",", "128.114899101`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"PU.QL17.R3\"\>", ",", "126.67758348`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"PU.QS15.L4\"\>", ",", "124.01864210400001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"PU.QS15.R4\"\>", ",", "124.017750416`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"PU.QL17.L5\"\>", ",", "126.67650461999999`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"PU.QL15.L5\"\>", ",", "128.114899101`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"PU.QL15.R5\"\>", ",", "128.115028884`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"PU.QL17.R5\"\>", ",", "126.67650461999999`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"PU.QS17.L6\"\>", ",", "130.66551492`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"PU.QS17.R6\"\>", ",", "130.66551492`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"PU.QL17.L7\"\>", ",", "126.67758348`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"PU.QL15.L7\"\>", ",", "128.115028884`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"PU.QL15.R7\"\>", ",", "128.114899101`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"PU.QL17.R7\"\>", ",", "126.6743469`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"PU.QS15.L8\"\>", ",", "124.017750416`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"PU.QS15.R8\"\>", ",", "124.023100544`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"PU.QL17.L1\"\>", ",", "126.69659203999998`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"PU.QL15.L1\"\>", ",", "128.04335621`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.3951370075618324`*^9, 3.395137077498885*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Modifying and saving ",
 StyleBox["mfs", "Input"],
 " objects"
}], "Subsection",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell["Modifying the header part of the object", "Subsubsection"],

Cell[TextData[{
 "It may be useful to add additional ",
 "key",
 "s and values that were not given in the original TFS file. These can be any \
kind of object definable in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"qpmfs", "=", 
   RowBox[{"mfsAddKey", "[", 
    RowBox[{"qpmfs", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<REMARK\>\"", ",", "\"\<Example for conference paper.\>\""}], 
      "}"}]}], "]"}]}], ";"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"qpmfs", "=", 
   RowBox[{"mfsAddKey", "[", 
    RowBox[{"qpmfs", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<KICKVALUE\>\"", ",", 
       RowBox[{"4", "\[Times]", 
        SuperscriptBox["10", 
         RowBox[{"-", "3"}]]}]}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"qpmfs", " ", "=", " ", 
   RowBox[{"mfsAddKey", "[", 
    RowBox[{"qpmfs", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<AMATRIX\>\"", ",", 
       RowBox[{"Inverse", "[", 
        RowBox[{"(", GridBox[{
           {"\[Sigma]", "\[Alpha]"},
           {"\[Beta]", 
            RowBox[{"-", 
             SuperscriptBox["\[Sigma]", 
              RowBox[{"-", "1"}]]}]}
          }], ")"}], "]"}]}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsKeyValue", "[", 
   RowBox[{"qpmfs", ",", "\"\<AMATRIX\>\""}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"-", 
       FractionBox["1", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "-", 
           RowBox[{"\[Alpha]", " ", "\[Beta]"}]}], ")"}], " ", 
         "\[Sigma]"}]]}], 
      RowBox[{"-", 
       FractionBox["\[Alpha]", 
        RowBox[{
         RowBox[{"-", "1"}], "-", 
         RowBox[{"\[Alpha]", " ", "\[Beta]"}]}]]}]},
     {
      RowBox[{"-", 
       FractionBox["\[Beta]", 
        RowBox[{
         RowBox[{"-", "1"}], "-", 
         RowBox[{"\[Alpha]", " ", "\[Beta]"}]}]]}], 
      FractionBox["\[Sigma]", 
       RowBox[{
        RowBox[{"-", "1"}], "-", 
        RowBox[{"\[Alpha]", " ", "\[Beta]"}]}]]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.395137086217579*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[TextData[{
 "Descriptors can be changed with ",
 StyleBox["mfsEditKey", "Input"],
 " as follows.  In this example, the ",
 StyleBox["COMMENT", "Input"],
 " is empty since nothing was supplied in the MAD run:"
}], "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsKeyValue", "[", 
  RowBox[{"qpmfs", ",", "\"\<COMMENT\>\""}], "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsKeyValue", "::", "\<\"notfound\"\>"}], ":", 
  " ", "\<\"Descriptor \\!\\(\\\"COMMENT\\\"\\) not found. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/notfound\\\", \
ButtonNote -> \\\"Madtomma`Mfs`Mfs`mfsKeyValue::notfound\\\"]\\)\"\>"}]], \
"Message", "MSG",
 CellChangeTimes->{3.3951370889831867`*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell["However it can be added as an afterthought:", "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"qpmfs", "=", 
   RowBox[{"mfsEditKey", "[", 
    RowBox[{"qpmfs", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<COMMENT\>\"", ",", "\"\<Tracking from an initial kick.\>\""}], 
      "}"}]}], "]"}]}], ";"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsKeyValue", "::", "\<\"notfound\"\>"}], ":", 
  " ", "\<\"Descriptor \\!\\(\\\"COMMENT\\\"\\) not found. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/notfound\\\", \
ButtonNote -> \\\"Madtomma`Mfs`Mfs`mfsKeyValue::notfound\\\"]\\)\"\>"}]], \
"Message", "MSG",
 CellChangeTimes->{3.3951371017487297`*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsKeyValue", "[", 
  RowBox[{"qpmfs", ",", "\"\<COMMENT\>\""}], "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{"mfsKeyValue", "[", 
  RowBox[{"Null", ",", "\<\"COMMENT\"\>"}], "]"}]], "Output",
 CellChangeTimes->{3.3951371017956047`*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell["Descriptors can be deleted with", "Text",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"qpmfs", "=", 
   RowBox[{"mfsDeleteKey", "[", 
    RowBox[{"qpmfs", ",", "\"\<ET\>\""}], "]"}]}], ";"}]], "Input",
 CellTags->"Examples section"],

Cell["The list of keys now reads", "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsKeyNames", "[", "qpmfs", "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{"mfsKeyNames", "[", 
  RowBox[{"mfsDeleteKey", "[", 
   RowBox[{"Null", ",", "\<\"ET\"\>"}], "]"}], "]"}]], "Output",
 CellChangeTimes->{3.3951371018581038`*^9},
 CellTags->"Examples section"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Adding and removing columns", "Subsubsection"],

Cell[TextData[{
 "Let us show how to add another column of data to the mfs data object ",
 StyleBox["OPTICS[0]", "Input"],
 ".  An additional column should have length"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"collen", "=", 
  RowBox[{"Length", "[", 
   RowBox[{"Last", "[", 
    RowBox[{"OPTICS", "[", "0", "]"}], "]"}], "]"}]}]], "Input"],

Cell[BoxData["509"], "Output",
 CellChangeTimes->{3.395137116389261*^9}]
}, Open  ]],

Cell["\<\
Let us construct a simple index of the elements since this particular data \
object contains no azimuth \"S\" \
\>", "Text"],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{"idx", "=", 
    RowBox[{"Range", "[", "collen", "]"}]}], " ", ";"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"OPTICS", "[", "1", "]"}], "=", 
   RowBox[{"mfsAddColumn", "[", 
    RowBox[{
     RowBox[{"OPTICS", "[", "0", "]"}], ",", "\"\<INDEX\>\"", ",", "idx"}], 
    "]"}]}], ";"}]], "Input"],

Cell["\<\
Now there is a new column that we can use in a trivial way to produce a plot\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsColumnNames", "[", 
  RowBox[{"OPTICS", "[", "1", "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"BETX\"\>", ",", "\<\"BETY\"\>", ",", "\<\"DX\"\>", 
   ",", "\<\"INDEX\"\>", ",", "\<\"NAME\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.3951371164517603`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"Transpose", "[", 
    RowBox[{"mfsColumn", "[", 
     RowBox[{
      RowBox[{"OPTICS", "[", "1", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<BETX\>\"", ",", "\"\<INDEX\>\""}], "}"}]}], "]"}], "]"}], 
   ",", 
   RowBox[{"Joined", "\[Rule]", "True"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
1kmr
     "]]}},
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{0., 189.48124374999966`}, {0., 509.}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{3.3951371165142603`*^9}]
}, Open  ]],

Cell["There are also functions for removing keys and columns", "Text",
 CellChangeTimes->{{3.6300497912990785`*^9, 3.6300497926280613`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"nodx", "=", 
   RowBox[{"mfsDeleteKey", "[", " ", "\n", "\t\t", 
    RowBox[{
     RowBox[{"mfsDeleteColumn", "[", 
      RowBox[{
       RowBox[{"OPTICS", "[", "0", "]"}], ",", "\"\<DX\>\""}], "]"}], ",", 
     "\n", "\t\t\t", "\"\<DELTA\>\""}], "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"nobetas", "=", " ", 
   RowBox[{"mfsDeleteColumn", "[", 
    RowBox[{
     RowBox[{"OPTICS", "[", "0", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<BETX\>\"", ",", "\"\<BETY\>\""}], "}"}]}], "]"}]}], 
  ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsKeyNames", "[", "nodx", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"GAMTR\"\>", ",", "\<\"ALFA\"\>", ",", "\<\"XIY\"\>", 
   ",", "\<\"XIX\"\>", ",", "\<\"QY\"\>", ",", "\<\"QX\"\>", 
   ",", "\<\"CIRCUM\"\>", ",", "\<\"TYPE\"\>", ",", "\<\"TITLE\"\>", 
   ",", "\<\"ORIGIN\"\>", ",", "\<\"DATE\"\>", ",", "\<\"TIME\"\>", 
   ",", "\<\"Source_File\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.3951371165767593`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsColumnNames", "[", "nodx", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"NAME\"\>", ",", "\<\"BETX\"\>", ",", "\<\"BETY\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.3951371166080093`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsColumnNames", "[", "nobetas", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"NAME\"\>", ",", "\<\"DX\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.3951371166392593`*^9}]
}, Open  ]],

Cell["\<\
We shall use these reduced data objects in the next subsection.\
\>", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Merging several mfs objects and making sure they match", "Subsubsection"],

Cell[TextData[{
 "It is often useful to be able to combine the contents of two or more table \
files generated by MAD.  For example you may want to combine SURVEY and TWISS \
information for the same set of elements.  The function ",
 StyleBox["mfsMerge", "Input"],
 " allows you to combine two mfs objects.  Using it, we can recombine the two \
partial optics tables "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"togetherAgain", "=", 
   RowBox[{"mfsMerge", "[", 
    RowBox[{"{", 
     RowBox[{"nodx", ",", "nobetas"}], "}"}], "]"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsColumnNames", "[", "togetherAgain", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"BETX\"\>", ",", "\<\"BETY\"\>", ",", "\<\"DX\"\>", 
   ",", "\<\"NAME\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.3951371239360876`*^9}]
}, Open  ]],

Cell["\<\
The columns of data in the mfs objects must be of the same length.  If column \
names are duplicated in more than one of the mfs objects only the column \
belonging to the first mfs object in the list is retained.   \
\>", "Text"],

Cell[TextData[{
 "In addition, the function ",
 StyleBox["mfsMerge", "Input"],
 " has an option designed to ensure that columns that are duplicated in more \
than one of the mfs objects are identical or, in the case of numerical data, \
equal to machine precision.  By default only the columns called \"NAME\" are \
checked."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Options", "[", "mfsMerge", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"matchColumns", "\[Rule]", 
   RowBox[{"{", "\<\"NAME\"\>", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.3951371239673376`*^9}]
}, Open  ]],

Cell["\<\
To enforce the stronger requirement, that all columns with identical names \
match up, do\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetOptions", "[", 
  RowBox[{"mfsMerge", ",", 
   RowBox[{"matchColumns", "->", "Automatic"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"matchColumns", "\[Rule]", "Automatic"}], "}"}]], "Output",
 CellChangeTimes->{3.3951371240298367`*^9}]
}, Open  ]],

Cell[TextData[{
 "or give the option on individual calls to ",
 StyleBox["mfsMerge", "Input"],
 "."
}], "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Reversing the order in the columns", "Subsubsection"],

Cell["\<\
In MAD, calculations for electrons have to be done with the sequence of \
elements reversed with respect to that for positrons.  So we need a function \
to reverse the order of the rows in the block of columns :\
\>", "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Short", "[", 
  RowBox[{
   RowBox[{"mfsColumn", "[", 
    RowBox[{
     RowBox[{"mfsReverse", "[", " ", 
      RowBox[{"OPTICS", "[", "0", "]"}], "]"}], ",", "\"\<NAME\>\""}], "]"}], 
   ",", "7"}], "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{"\<\"ENDLEP\"\>", ",", "\<\"PU.QL1B.L1\"\>", 
    ",", "\<\"PU.QL2B.L1\"\>", ",", "\<\"PU.QL4B.L1\"\>", 
    ",", "\<\"PU.QL5.L1\"\>", ",", "\<\"PU.QL6.L1\"\>", 
    ",", "\<\"PU.QL7.L1\"\>", ",", "\<\"PU.QL8.L1\"\>", 
    ",", "\<\"PU.QL9.L1\"\>", ",", "\<\"PU.QL10.L1\"\>", 
    ",", "\<\"PU.QL11.L1\"\>", ",", "\<\"PU.QL12.L1\"\>", 
    ",", "\<\"PU.QL14.L1\"\>", ",", "\<\"PU.QL15.L1\"\>", 
    ",", "\<\"PU.QL16.L1\"\>", ",", "\<\"PU.QL17.L1\"\>", ",", 
    RowBox[{"\[LeftSkeleton]", "478", "\[RightSkeleton]"}], 
    ",", "\<\"PU.QL16.R1\"\>", ",", "\<\"PU.QL15.R1\"\>", 
    ",", "\<\"PU.QL14.R1\"\>", ",", "\<\"PU.QL12.R1\"\>", 
    ",", "\<\"PU.QL11.R1\"\>", ",", "\<\"PU.QL10.R1\"\>", 
    ",", "\<\"PU.QL9.R1\"\>", ",", "\<\"PU.QL8.R1\"\>", 
    ",", "\<\"PU.QL7.R1\"\>", ",", "\<\"PU.QL6.R1\"\>", 
    ",", "\<\"PU.QL5.R1\"\>", ",", "\<\"PU.QL4B.R1\"\>", 
    ",", "\<\"PU.QL2B.R1\"\>", ",", "\<\"PU.QL1B.R1\"\>", 
    ",", "\<\"IP1\"\>"}], "}"}],
  Short[#, 7]& ]], "Output",
 CellChangeTimes->{3.3951371292329288`*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell["\<\
Other changes to the columns of data have not been implemented so far.\
\>", "Text",
 CellTags->"Examples section"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Saving an mfs object in a file", "Subsubsection"],

Cell["\<\
The new version of the object can then be saved in a file specified by the \
user.  Here we take a temporary file.\
\>", "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"junk", "=", 
   RowBox[{"OpenWrite", "[", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Save", "[", 
   RowBox[{"junk", ",", "qpmfs"}], "]"}], ";"}], "\n", 
 RowBox[{"Close", "[", "junk", "]"}]}], "Input",
 CellTags->"Examples section"],

Cell[BoxData["\<\"C:\\\\Documents and Settings\\\\jowett\\\\Local \
Settings\\\\Temp\\\\000009a03288\"\>"], "Output",
 CellChangeTimes->{3.3951371333735275`*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[TextData[{
 "Of course, a file can contain any number of mfs objects together with other \
",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " objects."
}], "Text",
 CellTags->"Examples section"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exporting mfs objects in other formats", "Subsubsection"],

Cell["\<\
It is straightforward to export mfs objects as CSV files that are easily read \
into spreadsheets and other programs.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsToCSV", "[", 
  RowBox[{"\"\<junk.csv\>\"", ",", "qp"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"mfsToCSV", "[", 
  RowBox[{"\<\"junk.csv\"\>", ",", "qp"}], "]"}]], "Output",
 CellChangeTimes->{3.3951371370453787`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Miscellaneous extra functionality  and utilities", "Subsection",
 CellTags->"Examples section"],

Cell["\<\
The previous subsection illustrated the most important functions in the \
package.  Other functions in the package are inteneded to be used internally. \
 However some of them may be useful to the user and have been made visible.  \
Their names are given by listing all the names in the package context.\
\>", "Text",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{"Names", "[", "\"\<Madtomma`Mfs`Mfs`*\>\"", "]"}]], "Input",
 CellTags->"Examples section"],

Cell["\<\
Some of them are illustrated in the following (hidden) subsections.  All have \
usage messages that can be seen by prefixing their names with a question mark \
in the usual way.\
\>", "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell["Removing lines  from a file", "Subsubsection",
 CellTags->"Examples section"],

Cell["\<\
This function is used internally but may be useful for other purposes.\
\>", "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "removeUnwantedLines"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Information", "::", "\<\"notfound\"\>"}], ":", 
  " ", "\<\"Symbol \\!\\(\\\"removeUnwantedLines\\\"\\) not found. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/notfound\\\", \
ButtonNote -> \\\"Information::notfound\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.395137157139*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"junk", "=", 
   RowBox[{"First", "[", 
    RowBox[{"OpenWrite", "[", "]"}], "]"}]}], ";", 
  RowBox[{"Close", "[", "%", "]"}]}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"General", "::", "\<\"stream\"\>"}], ":", 
  " ", "\<\"\\!\\({Null}\\) is not a string, InputStream[ ], or OutputStream[ \
]. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/stream\\\", \
ButtonNote -> \\\"General::stream\\\"]\\)\"\>"}]], "Message",
 CellChangeTimes->{3.395137157263999*^9},
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{"Close", "[", 
  RowBox[{"{", "Null", "}"}], "]"}]], "Output",
 CellChangeTimes->{3.395137157279624*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Close", "[", "junk", "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData["\<\"C:\\\\Documents and Settings\\\\jowett\\\\Local \
Settings\\\\Temp\\\\000010a03288\"\>"], "Output",
 CellChangeTimes->{3.395137157310874*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"removeUnwantedLines", "[", 
  RowBox[{"sampleFile", ",", "junk", ",", "\"\<Segment\>\"", ",", 
   RowBox[{"mfsVerbose", "->", "False"}]}], "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{"removeUnwantedLines", "[", 
  RowBox[{"\<\"P:\\\\cern.ch\\\\user\\\\j\\\\jowett\\\\public\\\\math\\\\\
Madtomma\\\\Mfs\\\\Examples\\\\qkick.tfs\"\>", 
   ",", "\<\"C:\\\\Documents and Settings\\\\jowett\\\\Local Settings\\\\Temp\
\\\\000010a03288\"\>", ",", "\<\"Segment\"\>", ",", 
   RowBox[{"mfsVerbose", "\[Rule]", "False"}]}], "]"}]], "Output",
 CellChangeTimes->{3.395137157357749*^9},
 CellTags->"Examples section"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Removing quotes from strings", "Subsubsection",
 CellTags->"Examples section"],

Cell["\<\
This function is used internally but may be useful for other purposes.\
\>", "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "removeQuotes"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 StyleBox["\<\"removeQuotes[x] will remove any double quotes \\\" explicitly \
included in a string x.  If x is not a string then it is returned \
unchanged.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.395137157623372*^9},
 CellTags->{"Examples section", "Info3395144357-8104660"}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"removeQuotes", "[", "\"\<\\\"IP4\\\"\>\"", "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData["\<\"IP4\"\>"], "Output",
 CellChangeTimes->{3.395137157732746*^9},
 CellTags->"Examples section"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples for Descriptor Lines", "Subsubsection",
 CellTags->"Examples section"],

Cell["\<\
This function is probably of limited use outside the package.\
\>", "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "tfsParseDescriptorLine"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 StyleBox["\<\"tfsParseDescriptorLine[string] takes a TFS descriptor line as \
a string and returns a list consisting of the TFS key and its value.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.395137158013994*^9},
 CellTags->{"Examples section", "Info3395144357-5978858"}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tfsParseDescriptorLine", "[", 
  "\"\<@ X                %le    -.388353611751E-03\>\"", "\n", "\t\t", 
  "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"X\"\>", ",", 
   RowBox[{"-", "0.00038835361175100004`"}]}], "}"}]], "Output",
 CellChangeTimes->{3.3951371581389933`*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tfsParseDescriptorLine", "[", 
  "\"\<@ TYPE             %08s \\\"TRACK\\\" \>\"", "\n", "\t\t", 
  "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"TYPE\"\>", ",", "\<\"TRACK\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.3951371581858683`*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell["\<\
(To make the next example work, we have to insert backslashes before the \
quotes to simulate the value we would get when reading the line from a file.)\
\
\>", "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
  "tfsParseDescriptorLine", "[", "\n", "\t", 
   "\"\<@ ORIGIN           %24s \\\"MAD 8.21/11 RS6000 - AIX\\\"\>\"", "\n", 
   "\t\t", "]"}], "//", "FullForm"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"List", "[", 
    RowBox[{"\"\<ORIGIN\>\"", ",", "\"\<MAD 8.21/11 RS6000 - AIX\>\""}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellChangeTimes->{3.3951371582327433`*^9},
 CellTags->"Examples section"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The header block", "Subsubsection",
 CellTags->"Examples section"],

Cell["\<\
This function can be useful to preview or summarise what is in a file before \
reading it all in.\
\>", "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tfsParseHeaderBlock", "[", 
  RowBox[{"sampleFile", ",", 
   RowBox[{"mfsVerbose", "->", "False"}]}], "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\<\"TYPE\"\>", ",", "\<\"TRACK\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"X\"\>", ",", 
       RowBox[{"-", "0.00038835361175100004`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PX\"\>", ",", 
       RowBox[{"-", "0.0000167029349567`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"Y\"\>", ",", 
       RowBox[{"-", "0.00038184396626099996`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PY\"\>", ",", 
       RowBox[{"-", "2.9493485039200003`*^-6"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"ET\"\>", ",", "0.0000102626001956`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"EY\"\>", ",", "1.05428403375`*^-10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"EX\"\>", ",", "2.98256612951`*^-8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E11\"\>", ",", "5.25333002895`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E12\"\>", ",", 
       RowBox[{"-", "3.43414759638`*^-17"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E13\"\>", ",", "0.185018159186`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E14\"\>", ",", "0.0829796374966`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E15\"\>", ",", 
       RowBox[{"-", "0.0026510085008000003`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E16\"\>", ",", 
       RowBox[{"-", "0.0111704421761`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E21\"\>", ",", "0.011563874218500001`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E22\"\>", ",", "0.190232632187`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E23\"\>", ",", "0.00199451841627`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E24\"\>", ",", "0.00440399981552`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E25\"\>", ",", 
       RowBox[{"-", "0.000041497916127800004`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E26\"\>", ",", "0.0013772593876200002`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E31\"\>", ",", 
       RowBox[{"-", "0.118845072845`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E32\"\>", ",", "0.0846274349415`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E33\"\>", ",", "5.35717075012`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E34\"\>", ",", "1.0125579562000001`*^-16"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E35\"\>", ",", 
       RowBox[{"-", "0.00436134264581`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E36\"\>", ",", 
       RowBox[{"-", "0.00337974309699`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E41\"\>", ",", "0.00148938982552`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E42\"\>", ",", 
       RowBox[{"-", "0.006521738772670001`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E43\"\>", ",", "0.003038214738`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E44\"\>", ",", "0.186544772125`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E45\"\>", ",", 
       RowBox[{"-", "0.000051178374618`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E46\"\>", ",", "0.000242385635122`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E51\"\>", ",", 
       RowBox[{"-", "0.0174585465196`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E52\"\>", ",", 
       RowBox[{"-", "0.0050503245767`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E53\"\>", ",", 
       RowBox[{"-", "0.00377175447184`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E54\"\>", ",", 
       RowBox[{"-", "0.00188830049664`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E55\"\>", ",", "2.37836715853`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E56\"\>", ",", 
       RowBox[{"-", "7.68138184883`*^-17"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E61\"\>", ",", 
       RowBox[{"-", "0.000102914870556`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E62\"\>", ",", "0.000189745354973`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E63\"\>", ",", 
       RowBox[{"-", "0.00011706941393`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E64\"\>", ",", "0.000342355037377`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E65\"\>", ",", "0.00400955859218`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"E66\"\>", ",", "0.420458776176`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"COMMENT\"\>", ",", "\<\"\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"ORIGIN\"\>", ",", "\<\"MAD 8.21/11 RS6000 - AIX\"\>"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"DATE\"\>", ",", "\<\"01/05/97\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"TIME\"\>", ",", "\<\"15.40.36\"\>"}], "}"}]}], "}"}], ",", 
   
   RowBox[{"{", 
    RowBox[{
    "Number", ",", "Number", ",", "Number", ",", "Number", ",", "Number", ",",
      "Number", ",", "Number", ",", "Number"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"TURNS\"\>", ",", "\<\"PARTICLE\"\>", ",", "\<\"X\"\>", 
     ",", "\<\"PX\"\>", ",", "\<\"Y\"\>", ",", "\<\"PY\"\>", ",", "\<\"T\"\>",
      ",", "\<\"DELTAP\"\>"}], "}"}], ",", "2335"}], "}"}]], "Output",
 CellChangeTimes->{3.3951371583108673`*^9},
 CellTags->"Examples section"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Supplementary details about generating new variables", "Subsubsection",
 CellTags->"Examples section"],

Cell[TextData[{
 "We saw how the function ",
 StyleBox["mfsInterpret", "Input"],
 " can be used to create new symbols in the Global context.  This works as \
follows.  The ",
 StyleBox["Mfs", "Input"],
 " package contains a function which creates a symbol from a string and \
assigns it a value."
}], "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "interpretTagValue"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 StyleBox["\<\"interpretTagValue[{\\\"tag\\\",val}] creates a variable tag \
and assigms it the value val.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.3951371586233654`*^9},
 CellTags->{"Examples section", "Info3395144358-4510271"}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"interpretTagValue", "[", 
  RowBox[{"{", 
   RowBox[{"\"\<abc\>\"", ",", "123"}], "}"}], "]"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData["Madtomma`Mfs`Mfs`Private`temp"], "Output",
 CellChangeTimes->{3.3951371587483644`*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell["The symbol now evaluates", "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData["abc"], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"abc", "::", "\<\"shdw\"\>"}], ":", 
  " ", "\<\"Symbol \\!\\(\\\"abc\\\"\\) appears in multiple contexts \
\\!\\({\\\"Madtomma`Mfs`Mfs`\\\", \\\"Global`\\\"}\\); definitions in context \
\\!\\(\\\"Madtomma`Mfs`Mfs`\\\"\\) may shadow or be shadowed by other \
definitions. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/shdw\\\", ButtonNote -> \
\\\"Madtomma`Mfs`Mfs`abc::shdw\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.3951371591233625`*^9},
 CellTags->"Examples section"],

Cell[BoxData["abc"], "Output",
 CellChangeTimes->{3.395137159185862*^9},
 CellTags->"Examples section"]
}, Open  ]],

Cell["\<\
This is used by the following function to create symbols for all the keys in \
an mfs data object.\
\>", "Text",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mfsInterpret", "[", "qpmfs", "]"}], ";"}]], "InputOnly",
 CellTags->"Examples section"],

Cell["\<\
Now we can evaluate them or use them in calculations by referring to their \
names.\
\>", "Text",
 CellTags->"Examples section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TYPE", ",", 
   FractionBox["KICKVALUE", 
    SqrtBox[
     RowBox[{"EX", "+", "EY"}]]]}], "}"}]], "Input",
 CellTags->"Examples section"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"TYPE", ",", 
   FractionBox["KICKVALUE", 
    SqrtBox[
     RowBox[{"EX", "+", "EY"}]]]}], "}"}]], "Output",
 CellChangeTimes->{3.395137159326486*^9},
 CellTags->"Examples section"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Sorting the keys ", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"key1", "=", 
   RowBox[{"{", 
    RowBox[{
    "b", ",", "n", ",", "1", ",", "\"\<VVV\>\"", ",", "\"\<DATE\>\"", ",", 
     "\"\<TIME\>\"", ",", "\"\<COMMENT\>\""}], "}"}]}], ";", 
  RowBox[{"key2", "=", 
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{"key1", ",", 
      RowBox[{"Range", "[", 
       RowBox[{"Length", "[", "key1", "]"}], "]"}]}], "}"}], 
    "]"}]}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"b", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"VVV\"\>", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DATE\"\>", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"TIME\"\>", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"COMMENT\"\>", ",", "7"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.3951371593889856`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsSortKey", "[", "key1", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ReplaceAll", "::", "\<\"argr\"\>"}], ":", 
  " ", "\<\"\\!\\(ReplaceAll\\) called with 1 argument; \\!\\(2\\) arguments \
are expected. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/ReplaceAll\\\", ButtonNote -> \\\"ReplaceAll::argr\
\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.3951371597796082`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ReplaceAll", "::", "\<\"argr\"\>"}], ":", 
  " ", "\<\"\\!\\(ReplaceAll\\) called with 1 argument; \\!\\(2\\) arguments \
are expected. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/ReplaceAll\\\", ButtonNote -> \\\"ReplaceAll::argr\
\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.3951371597952332`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Intersection", "::", "\<\"heads\"\>"}], ":", 
  " ", "\<\"Heads \\!\\(ReplaceAll\\) and \\!\\(List\\) at positions \
\\!\\(2\\) and \\!\\(1\\) are expected to be the same. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/heads\\\", \
ButtonNote -> \\\"Intersection::heads\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.395137160013982*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Part", "::", "\<\"partw\"\>"}], ":", 
  " ", "\<\"Part \\!\\(1\\) of \\!\\({}\\) does not exist. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/partw\\\", \
ButtonNote -> \\\"Part::partw\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.3951371602171054`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Part", "::", "\<\"partw\"\>"}], ":", 
  " ", "\<\"Part \\!\\(1\\) of \\!\\({}\\) does not exist. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/partw\\\", \
ButtonNote -> \\\"Part::partw\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.395137160279605*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Complement", "::", "\<\"heads\"\>"}], ":", 
  " ", "\<\"Heads \\!\\(ReplaceAll\\) and \\!\\(List\\) at positions \
\\!\\(2\\) and \\!\\(1\\) are expected to be the same. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/heads\\\", \
ButtonNote -> \\\"Complement::heads\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.395137160435854*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Join", "::", "\<\"heads\"\>"}], ":", 
  " ", "\<\"Heads \\!\\(Intersection\\) and \\!\\(Complement\\) at positions \
\\!\\(1\\) and \\!\\(2\\) are expected to be the same. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/heads\\\", \
ButtonNote -> \\\"Join::heads\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.395137160623353*^9}],

Cell[BoxData[
 RowBox[{"Join", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "b", ",", "n", ",", "1", ",", "\<\"VVV\"\>", ",", "\<\"DATE\"\>", 
      ",", "\<\"TIME\"\>", ",", "\<\"COMMENT\"\>"}], "}"}], "\[Intersection]", 
    RowBox[{"(", 
     RowBox[{"ReplaceAll", "[", 
      RowBox[{"{", 
       RowBox[{"\<\"COMMENT\"\>", ",", "\<\"NAME\"\>", ",", "\<\"TYPE\"\>", 
        ",", "\<\"OPTICS_SOURCE\"\>", ",", "\<\"DATE\"\>", 
        ",", "\<\"TIME\"\>", ",", "\<\"ORIGIN\"\>", ",", "\<\"CIRCUM\"\>", 
        ",", "\<\"QX\"\>", ",", "\<\"QY\"\>"}], "}"}], "]"}], ")"}]}], ",", 
   RowBox[{"Complement", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "b", ",", "n", ",", "1", ",", "\<\"VVV\"\>", ",", "\<\"DATE\"\>", 
       ",", "\<\"TIME\"\>", ",", "\<\"COMMENT\"\>"}], "}"}], ",", 
     RowBox[{"ReplaceAll", "[", 
      RowBox[{"{", 
       RowBox[{"\<\"COMMENT\"\>", ",", "\<\"NAME\"\>", ",", "\<\"TYPE\"\>", 
        ",", "\<\"OPTICS_SOURCE\"\>", ",", "\<\"DATE\"\>", 
        ",", "\<\"TIME\"\>", ",", "\<\"ORIGIN\"\>", ",", "\<\"CIRCUM\"\>", 
        ",", "\<\"QX\"\>", ",", "\<\"QY\"\>"}], "}"}], "]"}]}], "]"}]}], 
  "]"}]], "Output",
 CellChangeTimes->{3.3951371606702275`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"key1", "\[Intersection]", "mfsKeyOrder"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Intersection", "::", "\<\"normal\"\>"}], ":", 
  " ", "\<\"Nonatomic expression expected at position \\!\\(2\\) in \\!\\(\\(\
\\({b, n, 1, \\\"VVV\\\", \\\"DATE\\\", \\\"TIME\\\", \\\"COMMENT\\\"}\\)\\) \
\[Intersection] mfsKeyOrder\\). \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/normal\\\", ButtonNote -> \
\\\"Intersection::normal\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.395137160935851*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "b", ",", "n", ",", "1", ",", "\<\"VVV\"\>", ",", "\<\"DATE\"\>", 
    ",", "\<\"TIME\"\>", ",", "\<\"COMMENT\"\>"}], "}"}], "\[Intersection]", 
  "mfsKeyOrder"}]], "Output",
 CellChangeTimes->{3.3951371609827256`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsSortKey", "[", "key2", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ReplaceAll", "::", "\<\"argr\"\>"}], ":", 
  " ", "\<\"\\!\\(ReplaceAll\\) called with 1 argument; \\!\\(2\\) arguments \
are expected. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/ReplaceAll\\\", ButtonNote -> \\\"ReplaceAll::argr\
\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.395137161045225*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ReplaceAll", "::", "\<\"argr\"\>"}], ":", 
  " ", "\<\"\\!\\(ReplaceAll\\) called with 1 argument; \\!\\(2\\) arguments \
are expected. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/ReplaceAll\\\", ButtonNote -> \\\"ReplaceAll::argr\
\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.395137161107725*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"b", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"VVV\"\>", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DATE\"\>", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"TIME\"\>", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"COMMENT\"\>", ",", "7"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.395137161154599*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mfsSortKey", "[", "key2", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ReplaceAll", "::", "\<\"argr\"\>"}], ":", 
  " ", "\<\"\\!\\(ReplaceAll\\) called with 1 argument; \\!\\(2\\) arguments \
are expected. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/ReplaceAll\\\", ButtonNote -> \\\"ReplaceAll::argr\
\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.395137161217099*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ReplaceAll", "::", "\<\"argr\"\>"}], ":", 
  " ", "\<\"\\!\\(ReplaceAll\\) called with 1 argument; \\!\\(2\\) arguments \
are expected. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/ReplaceAll\\\", ButtonNote -> \\\"ReplaceAll::argr\
\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.3951371612639737`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"b", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"VVV\"\>", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DATE\"\>", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"TIME\"\>", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"COMMENT\"\>", ",", "7"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.395137161310848*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"textDate", "[", "]"}]], "Input"],

Cell[BoxData["\<\"15:39:37 3/8/2007\"\>"], "Output",
 CellChangeTimes->{3.395137161373348*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Palettes for this package", "Section",
 CellTags->"palette"],

Cell[TextData[{
 "Mathematica's palettes provide a convenient way to input commands without \
having to remember their names or  syntax. They also help considerably to \
reduce syntax errors when you build up complex expressions. By selecting it \
ant then using the ",
 StyleBox["File/Generate Palette from Selection",
  FontWeight->"Bold"],
 " command, the following input cell can be transformed into a palette \
containing templates for the most commonly used commands in this package.  "
}], "Text"],

Cell[BoxData[GridBox[{
   {
    ButtonBox[
     StyleBox[
      RowBox[{"Needs", "[", "\<\"Madtomma`Mfs`Mfs`\"\>", "]"}], "Input"]]},
   {
    ButtonBox[
     RowBox[{"mfsToRules", "[", "\[SelectionPlaceholder]", "]"}]]},
   {
    ButtonBox[
     RowBox[{"tfsRead", "[", "\[SelectionPlaceholder]", "]"}]]},
   {
    ButtonBox[
     RowBox[{"mfsKeyNames", "[", "\[SelectionPlaceholder]", "]"}]]},
   {
    ButtonBox[
     RowBox[{"mfsKeyValue", "[", 
      RowBox[{"\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}]]},
   {
    ButtonBox[
     RowBox[{"mfsColumnNames", "[", "\[SelectionPlaceholder]", "]"}]]},
   {
    ButtonBox[
     RowBox[{"mfsColumn", "[", 
      RowBox[{"\[SelectionPlaceholder]", ",", "\<\"\[Placeholder]\"\>"}], 
      "]"}]]},
   {
    ButtonBox[
     RowBox[{"mfsColumn", "[", 
      RowBox[{"\[SelectionPlaceholder]", ",", 
       RowBox[{"{", 
        RowBox[{"\<\"\[Placeholder]\"\>", ",", "\<\"\[Placeholder]\"\>"}], 
        "}"}]}], "]"}]]},
   {
    ButtonBox[
     RowBox[{"mfsMember", "[", 
      RowBox[{
      "\[SelectionPlaceholder]", ",", "\<\"\[Placeholder]\"\>", 
       ",", "\<\"\[Placeholder]\"\>"}], "]"}]]},
   {
    ButtonBox[
     RowBox[{"mfsRange", "[", 
      RowBox[{"\[SelectionPlaceholder]", ",", "\<\"\[Placeholder]\"\>", ",", 
       RowBox[{"{", 
        RowBox[{"\[Placeholder]", ",", "\[Placeholder]"}], "}"}]}], "]"}]]},
   {
    ButtonBox[
     RowBox[{"mfsSelect", "[", 
      RowBox[{"\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}]]},
   {
    ButtonBox[
     RowBox[{"mfsColumnValue", "[", 
      RowBox[{
      "\[SelectionPlaceholder]", ",", "\[Placeholder]", 
       ",", "\<\"\[Placeholder]\"\>"}], "]"}]]}
  },
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.]}, 
      Offset[0.2]}, "RowsIndexed" -> {}},
  GridDefaultElement:>ButtonBox["\\[Placeholder]"]]], "Input",
 CellMargins->{{Inherited, Inherited}, {5, Inherited}},
 Evaluatable->True,
 CellGroupingRules->"InputGrouping",
 PageBreakAbove->True,
 PageBreakWithin->False,
 GroupPageBreakWithin->False,
 CellLabelMargins->{{11, Inherited}, {Inherited, Inherited}},
 DefaultFormatType->DefaultInputFormatType,
 LineSpacing->{1.25, 0},
 AutoItalicWords->{},
 ScriptMinSize->9,
 ShowStringCharacters->True,
 NumberMarks->True,
 CounterIncrements->"Input",
 StyleMenuListing->None,
 FontFamily->"Courier",
 FontWeight->"Bold"],

Cell[TextData[{
 "The option ",
 StyleBox["ShowGroupOpenCloseIcon->True ", "Input"],
 "is useful in palettes.  Note that the palette buttons are most useful if \
you first select a part of an expression on your screen to which you want to \
apply them. "
}], "Text"],

Cell["\<\
Generating your own palette from this notebook has the advantage that you can \
modify it to your taste.  Otherwise, the default ready-made palette will \
appear automatically on your screen when you load the package (if you don't \
want it, just close it).\
\>", "Text"],

Cell["\<\
Of course, you can also generate commands quickly by other standard \
mechanisms such as auto-completion (Ctrl-K or Ctrl-Shift-K).   As in all \
properly constructed packages, every function has an associated usage message \
giving brief instructions, e.g.,\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "interpretDescriptors"}]], "Input"],

Cell[BoxData["\<\"Obsolete function name.  Please use \
mfsInterpretKeys.\"\>"], "Print"]
}, Open  ]],

Cell[TextData[{
 "Here is another palette for the functions used to modify mfs objects.  It \
is available as ",
 StyleBox["MfsEditPalette.nb.", "Input"]
}], "Text"],

Cell[BoxData[GridBox[{
   {
    ButtonBox[
     RowBox[{"mfsAddKey", "[", 
      RowBox[{"\[SelectionPlaceholder]", ",", 
       RowBox[{"{", 
        RowBox[{"\[Placeholder]", ",", "\[Placeholder]"}], "}"}]}], "]"}]]},
   {
    ButtonBox[
     RowBox[{"mfsEditKey", "[", 
      RowBox[{"\[SelectionPlaceholder]", ",", 
       RowBox[{"{", 
        RowBox[{"\[Placeholder]", ",", "\[Placeholder]"}], "}"}]}], "]"}]]},
   {
    ButtonBox[
     RowBox[{"mfsDeleteKey", "[", 
      RowBox[{"\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}]]},
   {
    ButtonBox[
     RowBox[{"mfsAddColumn", "[", 
      RowBox[{
      "\[SelectionPlaceholder]", ",", "\[Placeholder]", ",", 
       "\[Placeholder]"}], "]"}]]},
   {
    ButtonBox[
     RowBox[{"mfsDeleteColumn", "[", 
      RowBox[{"\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "]"}]]},
   {
    ButtonBox[
     RowBox[{"mfsMerge", "[", 
      RowBox[{"{", 
       RowBox[{"\[SelectionPlaceholder]", ",", "\[Placeholder]"}], "}"}], 
      "]"}]]},
   {
    ButtonBox[
     RowBox[{"mfsReverse", "[", "\[SelectionPlaceholder]", "]"}]]}
  },
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.]}, 
      Offset[0.2]}, "RowsIndexed" -> {}},
  GridDefaultElement:>ButtonBox["\\[Placeholder]"]]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Bibliography", "Section"],

Cell["\<\
[1] Stephen Wolfram, The Mathematica Book, 3rd ed., Wolfram Media/Cambridge \
University Press, 1996.\
\>", "Text",
 CellTags->"Wolfram book"],

Cell[TextData[{
 "[2]  Roman Maeder, ",
 StyleBox["Programming in Mathematica",
  FontSlant->"Italic"],
 ", 3rd ed. Addison-Wesley, 1996"
}], "Text",
 CellTags->"Maeder book"],

Cell[TextData[ButtonBox["\thttp://www.wolfram.com/~maeder/ProgInMath/",
 BaseStyle->"Hyperlink",
 ButtonData:>{
   URL["http://www.wolfram.com/~maeder/ProgInMath/"], None}]], "Program"],

Cell["[3] The MAD  Home Page", "Text",
 CellTags->"MAD manual"],

Cell[TextData[ButtonBox["\thttp://cern.ch/mad/",
 BaseStyle->"Hyperlink",
 ButtonData:>{
   URL["http://.cern.ch/mad/"], None}]], "Program"]
}, Closed]]
}, Open  ]]
},
AutoGeneratedPackage->Automatic,
ScreenStyleEnvironment->"Working",
WindowToolbars->"EditBar",
InitializationCellEvaluation->False,
CellGrouping->Automatic,
WindowSize->{828, 1342},
WindowMargins->{{Automatic, 425}, {Automatic, 0}},
PrintingCopies->1,
PrintingPageRange->{Automatic, Automatic},
PrintingOptions->{"GraphicsPrintingFormat"->"DownloadPostScript"},
PrivateNotebookOptions->{"VersionedStylesheet"->{"Default.nb"[8.] -> False}},
ShowSelection->True,
ShowCellLabel->True,
PrivateFontOptions->{"FontType"->"Outline"},
FrontEndVersion->"10.0 for Microsoft Windows (64-bit) (December 4, 2014)",
StyleDefinitions->"Default.nb",
PrivateNotebookOptions -> {"ColorPalette" -> {RGBColor, 128}},
RenderingOptions -> {"ObjectDithering" -> True},
RenderingOptions -> {"RasterDithering" -> False}
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Intrduction section"->{
  Cell[1055, 42, 65, 1, 69, "Section",
   CellTags->"Intrduction section"],
  Cell[1123, 45, 1193, 38, 105, "Text",
   CellTags->"Intrduction section"],
  Cell[2319, 85, 328, 7, 49, "Text",
   CellTags->"Intrduction section"],
  Cell[2650, 94, 682, 12, 104, "Text",
   CellTags->"Intrduction section"],
  Cell[3335, 108, 659, 12, 104, "Text",
   CellTags->"Intrduction section"],
  Cell[3997, 122, 343, 11, 49, "Text",
   CellTags->"Intrduction section"],
  Cell[5574, 176, 635, 15, 86, "Text",
   CellTags->"Intrduction section"],
  Cell[6212, 193, 555, 14, 67, "Text",
   CellTags->"Intrduction section"],
  Cell[6865, 213, 234, 7, 48, "Text",
   CellTags->"Intrduction section"]},
 "Reference section"->{
  Cell[8785, 269, 60, 1, 69, "Section",
   CellTags->"Reference section"],
  Cell[8870, 274, 62, 1, 38, "Subsubsection",
   CellTags->"Reference section"],
  Cell[8935, 277, 132, 5, 29, "Text",
   CellTags->"Reference section"],
  Cell[9104, 287, 63, 1, 38, "Subsubsection",
   CellTags->"Reference section"],
  Cell[9170, 290, 62, 1, 29, "Text",
   CellTags->"Reference section"],
  Cell[9269, 296, 64, 1, 38, "Subsubsection",
   CellTags->"Reference section"],
  Cell[9336, 299, 272, 5, 48, "Text",
   CellTags->"Reference section"],
  Cell[9611, 306, 138, 4, 29, "Text",
   CellTags->"Reference section"],
  Cell[11625, 349, 73, 1, 32, "Subsubsection",
   CellTags->"Reference section"],
  Cell[11701, 352, 52, 1, 29, "Text",
   CellTags->"Reference section"],
  Cell[11790, 358, 129, 5, 38, "Subsubsection",
   CellTags->"Reference section"],
  Cell[11922, 365, 169, 4, 29, "Text",
   CellTags->"Reference section"],
  Cell[12128, 374, 64, 1, 38, "Subsubsection",
   CellTags->"Reference section"],
  Cell[12195, 377, 750, 15, 179, "Text",
   CellTags->"Reference section"],
  Cell[12948, 394, 1118, 24, 180, "Text",
   CellTags->"Reference section"],
  Cell[14069, 420, 954, 21, 201, "Text",
   CellTags->"Reference section"],
  Cell[20022, 581, 65, 1, 38, "Subsubsection",
   CellTags->"Reference section"],
  Cell[20090, 584, 89, 1, 27, "Text",
   CellTags->"Reference section"],
  Cell[20216, 590, 63, 1, 32, "Subsubsection",
   CellTags->"Reference section"],
  Cell[20282, 593, 308, 6, 67, "Text",
   CellTags->"Reference section"],
  Cell[20593, 601, 234, 5, 45, "Program",
   CellTags->"Reference section"],
  Cell[20864, 611, 65, 1, 38, "Subsubsection",
   CellTags->"Reference section"],
  Cell[20932, 614, 350, 7, 60, "Text",
   CellTags->"Reference section"],
  Cell[21319, 626, 67, 1, 32, "Subsubsection",
   CellTags->"Reference section"],
  Cell[21389, 629, 182, 5, 30, "Text",
   CellTags->"Reference section"],
  Cell[21574, 636, 172, 5, 30, "Text",
   CellTags->"Reference section"],
  Cell[21749, 643, 572, 16, 87, "Text",
   CellTags->"Reference section"],
  Cell[22324, 661, 296, 8, 48, "Text",
   CellTags->"Reference section"],
  Cell[22623, 671, 204, 7, 29, "Text",
   CellTags->"Reference section"],
  Cell[22830, 680, 146, 4, 29, "Text",
   CellTags->"Reference section"],
  Cell[24252, 723, 69, 1, 38, "Subsubsection",
   CellTags->"Reference section"],
  Cell[24324, 726, 102, 1, 29, "Text",
   CellTags->"Reference section"],
  Cell[24429, 729, 119, 3, 29, "Text",
   CellTags->"Reference section"],
  Cell[24551, 734, 195, 4, 48, "Text",
   CellTags->"Reference section"]},
 "Setup section"->{
  Cell[24795, 744, 52, 1, 69, "Section",
   CellTags->"Setup section"],
  Cell[24850, 747, 273, 5, 48, "Text",
   CellTags->"Setup section"],
  Cell[25148, 756, 74, 1, 47, "Subsection",
   CellTags->"Setup section"],
  Cell[25656, 770, 348, 9, 67, "Text",
   CellTags->"Setup section"],
  Cell[26041, 784, 69, 1, 47, "Subsection",
   CellTags->"Setup section"],
  Cell[26113, 787, 891, 24, 86, "Text",
   CellTags->"Setup section"],
  Cell[27007, 813, 139, 4, 28, "InputOnly",
   CellTags->"Setup section"],
  Cell[27149, 819, 404, 11, 67, "Text",
   CellTags->"Setup section"],
  Cell[27556, 832, 327, 7, 67, "Text",
   CellTags->"Setup section"],
  Cell[141463, 4061, 111, 2, 29, "Input",
   CellTags->"Setup section"]},
 "Interface section"->{
  Cell[27932, 845, 87, 2, 69, "Section",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[28022, 849, 154, 4, 29, "Text",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[28201, 857, 133, 2, 47, "Subsection",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[28736, 876, 153, 4, 47, "Subsection",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[28892, 882, 147, 4, 29, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[29042, 888, 487, 10, 103, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[29532, 900, 316, 8, 67, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[29851, 910, 260, 7, 67, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[30114, 919, 334, 9, 67, "Input",
   CellTags->"Interface section"],
  Cell[30451, 930, 320, 8, 67, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[31277, 955, 322, 8, 67, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[31602, 965, 273, 7, 67, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[31878, 974, 338, 8, 67, "Input",
   Evaluatable->False,
   CellTags->"Interface section"],
  Cell[32219, 984, 359, 8, 85, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[32581, 994, 335, 8, 67, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[33858, 1026, 492, 10, 122, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[34353, 1038, 278, 7, 67, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[34634, 1047, 284, 7, 67, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[34921, 1056, 428, 9, 103, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[36498, 1087, 346, 8, 67, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[36847, 1097, 274, 7, 67, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[37124, 1106, 299, 8, 67, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[37426, 1116, 313, 8, 67, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[37742, 1126, 541, 11, 49, "Code",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[38487, 1145, 312, 8, 49, "Code",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[39047, 1163, 299, 8, 67, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[39349, 1173, 345, 8, 67, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[39697, 1183, 297, 7, 67, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[40745, 1212, 280, 7, 67, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[45762, 1345, 120, 2, 47, "Subsection",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[46397, 1368, 212, 6, 29, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[46612, 1376, 233, 7, 29, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[46848, 1385, 206, 6, 29, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[47319, 1402, 211, 6, 29, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[47533, 1410, 212, 6, 29, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[47748, 1418, 214, 6, 29, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[47965, 1426, 222, 6, 29, "Input",
   InitializationCell->True,
   CellTags->"Interface section"],
  Cell[48190, 1434, 277, 7, 67, "Input",
   InitializationCell->True,
   CellTags->"Interface section"]},
 "Info3395143885-6759278"->{
  Cell[149244, 4280, 232, 4, 42, "Print",
   CellTags->"Info3395143885-6759278"]},
 "Info3395143907-9632325"->{
  Cell[152445, 4375, 272, 5, 42, "Print",
   CellTags->"Info3395143907-9632325"]},
 "Examples section"->{
  Cell[153031, 4395, 75, 1, 78, "Section",
   CellTags->"Examples section"],
  Cell[153131, 4400, 96, 1, 42, "Subsection",
   CellTags->"Examples section"],
  Cell[153230, 4403, 357, 6, 61, "Text",
   CellTags->"Examples section"],
  Cell[153612, 4413, 400, 10, 63, "Input",
   CellTags->"Examples section"],
  Cell[154015, 4425, 206, 3, 27, "Output",
   CellTags->"Examples section"],
  Cell[154568, 4443, 181, 5, 28, "Text",
   CellTags->"Examples section"],
  Cell[154774, 4452, 65, 1, 28, "Input",
   CellTags->"Examples section"],
  Cell[154842, 4455, 125, 3, 27, "Output",
   CellTags->"Examples section"],
  Cell[154982, 4461, 117, 3, 27, "Text",
   CellTags->"Examples section"],
  Cell[155124, 4468, 81, 2, 28, "Input",
   CellTags->"Examples section"],
  Cell[155208, 4472, 258, 4, 42, "Print",
   CellTags->{"Examples section", "Info3395143931-6822858"}],
  Cell[155481, 4479, 208, 5, 27, "Text",
   CellTags->"Examples section"],
  Cell[155692, 4486, 223, 7, 27, "InputOnly",
   CellTags->"Examples section"],
  Cell[155918, 4495, 296, 6, 44, "Text",
   CellTags->"Examples section"],
  Cell[156217, 4503, 359, 7, 45, "Text",
   CellTags->"Examples section"],
  Cell[156579, 4512, 180, 5, 28, "Text",
   CellTags->"Examples section"],
  Cell[156784, 4521, 116, 3, 28, "Input",
   CellTags->"Examples section"],
  Cell[156903, 4526, 213, 6, 27, "Output",
   CellTags->"Examples section"],
  Cell[157131, 4535, 229, 7, 28, "Text",
   CellTags->"Examples section"],
  Cell[182571, 5176, 87, 1, 36, "Subsection",
   CellTags->"Examples section"],
  Cell[182683, 5181, 104, 1, 25, "Subsubsection",
   CellTags->"Examples section"],
  Cell[182790, 5184, 389, 10, 44, "Text",
   CellTags->"Examples section"],
  Cell[183204, 5198, 99, 2, 28, "Input",
   CellTags->"Examples section"],
  Cell[183306, 5202, 1183, 20, 61, "Output",
   CellTags->"Examples section"],
  Cell[184504, 5225, 177, 5, 28, "Text",
   CellTags->"Examples section"],
  Cell[184706, 5234, 174, 4, 28, "Input",
   CellTags->"Examples section"],
  Cell[184883, 5240, 118, 2, 29, "Output",
   CellTags->"Examples section"],
  Cell[185038, 5247, 135, 3, 28, "Input",
   CellTags->"Examples section"],
  Cell[185176, 5252, 134, 2, 27, "Output",
   CellTags->"Examples section"],
  Cell[185325, 5257, 183, 7, 28, "Text",
   CellTags->"Examples section"],
  Cell[185533, 5268, 131, 3, 28, "Input",
   CellTags->"Examples section"],
  Cell[185667, 5273, 448, 8, 21, "Message",
   CellTags->"Examples section"],
  Cell[186130, 5284, 143, 4, 27, "Text",
   CellTags->"Examples section"],
  Cell[186298, 5292, 307, 8, 28, "Input",
   CellTags->"Examples section"],
  Cell[186608, 5302, 352, 8, 32, "Output",
   CellTags->"Examples section"],
  Cell[186975, 5313, 162, 6, 27, "Text",
   CellTags->"Examples section"],
  Cell[187162, 5323, 300, 7, 28, "Input",
   CellTags->"Examples section"],
  Cell[187465, 5332, 133, 3, 27, "Output",
   CellTags->"Examples section"],
  Cell[187647, 5341, 104, 1, 25, "Subsubsection",
   CellTags->"Examples section"],
  Cell[187754, 5344, 153, 4, 27, "Text",
   CellTags->"Examples section"],
  Cell[187932, 5352, 102, 2, 28, "Input",
   CellTags->"Examples section"],
  Cell[188037, 5356, 294, 6, 27, "Output",
   CellTags->"Examples section"],
  Cell[188346, 5365, 146, 4, 28, "Text",
   CellTags->"Examples section"],
  Cell[188517, 5373, 83, 2, 28, "Input",
   CellTags->"Examples section"],
  Cell[188603, 5377, 424, 6, 59, "Print",
   CellTags->{"Examples section", "Info3395144168-1990905"}],
  Cell[189042, 5386, 235, 5, 28, "Text",
   CellTags->"Examples section"],
  Cell[189302, 5395, 204, 6, 28, "Input",
   CellTags->"Examples section"],
  Cell[189509, 5403, 1160, 24, 84, "Output",
   CellTags->"Examples section"],
  Cell[190684, 5430, 289, 6, 45, "Text",
   CellTags->"Examples section"],
  Cell[190998, 5440, 340, 10, 28, "Input",
   CellTags->"Examples section"],
  Cell[191341, 5452, 2280, 66, 119, "Output",
   CellTags->"Examples section"],
  Cell[193636, 5521, 437, 11, 45, "Text",
   CellTags->"Examples section"],
  Cell[194632, 5553, 94, 2, 28, "Input",
   CellTags->"Examples section"],
  Cell[194729, 5557, 7950, 135, 231, "Output",
   CellTags->"Examples section"],
  Cell[202694, 5695, 118, 4, 28, "Text",
   CellTags->"Examples section"],
  Cell[202837, 5703, 130, 3, 28, "Input",
   CellTags->"Examples section"],
  Cell[202970, 5708, 441, 8, 21, "Message",
   CellTags->"Examples section"],
  Cell[203426, 5719, 233, 6, 28, "Text",
   CellTags->"Examples section"],
  Cell[203684, 5729, 154, 4, 28, "Input",
   CellTags->"Examples section"],
  Cell[203841, 5735, 1677, 41, 93, "Output",
   CellTags->"Examples section"],
  Cell[205533, 5779, 237, 6, 28, "Text",
   CellTags->"Examples section"],
  Cell[205795, 5789, 134, 3, 28, "Input",
   CellTags->"Examples section"],
  Cell[205932, 5794, 150, 4, 27, "Output",
   CellTags->"Examples section"],
  Cell[206131, 5804, 116, 2, 25, "Subsubsection",
   CellTags->"Examples section"],
  Cell[226097, 6247, 195, 4, 19, "Subsubsection",
   CellTags->"Examples section"],
  Cell[244715, 6688, 151, 6, 37, "Subsection",
   CellTags->"Examples section"],
  Cell[244869, 6696, 797, 14, 94, "Text",
   CellTags->"Examples section"],
  Cell[245669, 6712, 154, 4, 27, "Text",
   CellTags->"Examples section"],
  Cell[245848, 6720, 79, 1, 25, "Subsubsection",
   CellTags->"Examples section"],
  Cell[245930, 6723, 188, 6, 28, "Text",
   CellTags->"Examples section"],
  Cell[246143, 6733, 418, 10, 63, "Input",
   CellTags->"Examples section"],
  Cell[246564, 6745, 217, 3, 27, "Output",
   CellTags->"Examples section"],
  Cell[246796, 6751, 241, 7, 28, "Input",
   CellTags->"Examples section"],
  Cell[247062, 6762, 131, 3, 28, "Input",
   CellTags->"Examples section"],
  Cell[247196, 6767, 214, 5, 27, "Output",
   CellTags->"Examples section"],
  Cell[247459, 6778, 81, 1, 25, "Subsubsection",
   CellTags->"Examples section"],
  Cell[247543, 6781, 775, 24, 63, "Text",
   CellTags->"Examples section"],
  Cell[248343, 6809, 83, 2, 28, "Input",
   CellTags->"Examples section"],
  Cell[248429, 6813, 269, 5, 42, "Print",
   CellTags->{"Examples section", "Info3395144206-1341006"}],
  Cell[248713, 6821, 460, 11, 62, "Text",
   CellTags->"Examples section"],
  Cell[249198, 6836, 227, 6, 28, "Input",
   CellTags->"Examples section"],
  Cell[249428, 6844, 208, 5, 27, "Output",
   CellTags->"Examples section"],
  Cell[249673, 6854, 182, 5, 28, "Input",
   CellTags->"Examples section"],
  Cell[249858, 6861, 120, 2, 27, "Output",
   CellTags->"Examples section"],
  Cell[249993, 6866, 535, 17, 46, "Text",
   CellTags->"Examples section"],
  Cell[250531, 6885, 429, 13, 28, "Input",
   CellTags->"Examples section"],
  Cell[250963, 6900, 306, 11, 29, "Text",
   CellTags->"Examples section"],
  Cell[251294, 6915, 295, 8, 28, "Input",
   CellTags->"Examples section"],
  Cell[251592, 6925, 973, 24, 138, "Output",
   CellTags->"Examples section"],
  Cell[252580, 6952, 350, 11, 45, "Text",
   CellTags->"Examples section"],
  Cell[252955, 6967, 673, 19, 80, "Input",
   CellTags->"Examples section"],
  Cell[253631, 6988, 1091, 27, 154, "Output",
   CellTags->"Examples section"],
  Cell[254737, 7018, 428, 13, 45, "Text",
   CellTags->"Examples section"],
  Cell[255190, 7035, 593, 17, 63, "Input",
   CellTags->"Examples section"],
  Cell[255786, 7054, 2274, 56, 156, "Output",
   CellTags->"Examples section"],
  Cell[258075, 7113, 579, 16, 62, "Text",
   CellTags->"Examples section"],
  Cell[258657, 7131, 454, 14, 28, "Input",
   CellTags->"Examples section"],
  Cell[259136, 7149, 293, 8, 28, "Input",
   CellTags->"Examples section"],
  Cell[259432, 7159, 665, 18, 43, "Output",
   CellTags->"Examples section"],
  Cell[260112, 7180, 82, 1, 27, "Text",
   CellTags->"Examples section"],
  Cell[260197, 7183, 609, 18, 46, "Input",
   CellTags->"Examples section"],
  Cell[260843, 7206, 85, 1, 25, "Subsubsection",
   CellTags->"Examples section"],
  Cell[260931, 7209, 220, 5, 44, "Text",
   CellTags->"Examples section"],
  Cell[261154, 7216, 177, 4, 27, "Text",
   CellTags->"Examples section"],
  Cell[261334, 7222, 225, 7, 28, "Input",
   CellTags->"Examples section"],
  Cell[261584, 7233, 209, 6, 28, "Input",
   CellTags->"Examples section"],
  Cell[261796, 7241, 2290, 57, 156, "Output",
   CellTags->"Examples section"],
  Cell[264123, 7303, 297, 8, 28, "Input",
   CellTags->"Examples section"],
  Cell[264423, 7313, 766, 20, 75, "Output",
   CellTags->"Examples section"],
  Cell[265204, 7336, 325, 9, 28, "Text",
   CellTags->"Examples section"],
  Cell[265532, 7347, 284, 8, 28, "Input",
   CellTags->"Examples section"],
  Cell[265841, 7359, 271, 8, 28, "Input",
   CellTags->"Examples section"],
  Cell[266115, 7369, 879, 24, 138, "Output",
   CellTags->"Examples section"],
  Cell[267009, 7396, 267, 9, 28, "Text",
   CellTags->"Examples section"],
  Cell[267279, 7407, 294, 9, 28, "Input",
   CellTags->"Examples section"],
  Cell[267598, 7420, 132, 3, 28, "Input",
   CellTags->"Examples section"],
  Cell[267733, 7425, 240, 5, 27, "Output",
   CellTags->"Examples section"],
  Cell[268022, 7436, 79, 1, 25, "Subsubsection",
   CellTags->"Examples section"],
  Cell[268104, 7439, 606, 16, 63, "Text",
   CellTags->"Examples section"],
  Cell[268713, 7457, 542, 17, 28, "Input",
   CellTags->"Examples section"],
  Cell[269280, 7478, 115, 3, 28, "Input",
   CellTags->"Examples section"],
  Cell[269398, 7483, 912, 17, 76, "Output",
   CellTags->"Examples section"],
  Cell[270325, 7503, 261, 10, 28, "Text",
   CellTags->"Examples section"],
  Cell[270611, 7517, 87, 2, 28, "Input",
   CellTags->"Examples section"],
  Cell[270701, 7521, 164, 2, 39, "Print",
   CellTags->{"Examples section", "Info3395144230-6821624"}],
  Cell[270902, 7528, 370, 10, 28, "Input",
   CellTags->"Examples section"],
  Cell[271275, 7540, 66797, 1637, 4204, "Output",
   CellTags->"Examples section"],
  Cell[341211, 9267, 129, 5, 37, "Subsection",
   CellTags->"Examples section"],
  Cell[341432, 9278, 271, 9, 44, "Text",
   CellTags->"Examples section"],
  Cell[341706, 9289, 284, 9, 28, "Input",
   CellTags->"Examples section"],
  Cell[341993, 9300, 328, 10, 32, "Input",
   CellTags->"Examples section"],
  Cell[342324, 9312, 497, 15, 46, "Input",
   CellTags->"Examples section"],
  Cell[342846, 9331, 173, 5, 29, "Input",
   CellTags->"Examples section"],
  Cell[343022, 9338, 1312, 41, 66, "Output",
   CellTags->"Examples section"],
  Cell[344349, 9382, 256, 7, 49, "Text",
   CellTags->"Examples section"],
  Cell[344630, 9393, 136, 3, 29, "Input",
   CellTags->"Examples section"],
  Cell[344769, 9398, 464, 9, 25, "Message",
   CellTags->"Examples section"],
  Cell[345248, 9410, 90, 1, 29, "Text",
   CellTags->"Examples section"],
  Cell[345363, 9415, 287, 9, 29, "Input",
   CellTags->"Examples section"],
  Cell[345653, 9426, 464, 9, 25, "Message",
   CellTags->"Examples section"],
  Cell[346154, 9440, 136, 3, 29, "Input",
   CellTags->"Examples section"],
  Cell[346293, 9445, 180, 4, 28, "Output",
   CellTags->"Examples section"],
  Cell[346488, 9452, 78, 1, 29, "Text",
   CellTags->"Examples section"],
  Cell[346569, 9455, 180, 5, 29, "Input",
   CellTags->"Examples section"],
  Cell[346752, 9462, 73, 1, 29, "Text",
   CellTags->"Examples section"],
  Cell[346850, 9467, 99, 2, 29, "Input",
   CellTags->"Examples section"],
  Cell[346952, 9471, 215, 5, 28, "Output",
   CellTags->"Examples section"],
  Cell[357486, 9784, 266, 5, 48, "Text",
   CellTags->"Examples section"],
  Cell[357777, 9793, 271, 8, 29, "Input",
   CellTags->"Examples section"],
  Cell[358051, 9803, 1114, 22, 99, "Output",
   CellTags->"Examples section"],
  Cell[359180, 9828, 125, 3, 29, "Text",
   CellTags->"Examples section"],
  Cell[359400, 9838, 169, 4, 29, "Text",
   CellTags->"Examples section"],
  Cell[359594, 9846, 270, 8, 67, "Input",
   CellTags->"Examples section"],
  Cell[359867, 9856, 192, 3, 28, "Output",
   CellTags->"Examples section"],
  Cell[360074, 9862, 203, 7, 29, "Text",
   CellTags->"Examples section"],
  Cell[360855, 9897, 101, 1, 47, "Subsection",
   CellTags->"Examples section"],
  Cell[360959, 9900, 358, 6, 67, "Text",
   CellTags->"Examples section"],
  Cell[361320, 9908, 114, 2, 29, "Input",
   CellTags->"Examples section"],
  Cell[361437, 9912, 232, 5, 48, "Text",
   CellTags->"Examples section"],
  Cell[361694, 9921, 83, 1, 38, "Subsubsection",
   CellTags->"Examples section"],
  Cell[361780, 9924, 125, 3, 29, "Text",
   CellTags->"Examples section"],
  Cell[361930, 9931, 93, 2, 29, "Input",
   CellTags->"Examples section"],
  Cell[362026, 9935, 448, 8, 25, "Message",
   CellTags->"Examples section"],
  Cell[362511, 9948, 204, 6, 29, "Input",
   CellTags->"Examples section"],
  Cell[362718, 9956, 444, 8, 21, "Message",
   CellTags->"Examples section"],
  Cell[363165, 9966, 158, 4, 28, "Output",
   CellTags->"Examples section"],
  Cell[363360, 9975, 92, 2, 29, "Input",
   CellTags->"Examples section"],
  Cell[363455, 9979, 190, 3, 28, "Output",
   CellTags->"Examples section"],
  Cell[363682, 9987, 210, 4, 29, "Input",
   CellTags->"Examples section"],
  Cell[363895, 9993, 446, 8, 82, "Output",
   CellTags->"Examples section"],
  Cell[364390, 10007, 84, 1, 38, "Subsubsection",
   CellTags->"Examples section"],
  Cell[364477, 10010, 125, 3, 29, "Text",
   CellTags->"Examples section"],
  Cell[364627, 10017, 86, 2, 29, "Input",
   CellTags->"Examples section"],
  Cell[364716, 10021, 310, 5, 42, "Print",
   CellTags->{"Examples section", "Info3395144357-8104660"}],
  Cell[365063, 10031, 114, 2, 29, "Input",
   CellTags->"Examples section"],
  Cell[365180, 10035, 111, 2, 28, "Output",
   CellTags->"Examples section"],
  Cell[365340, 10043, 85, 1, 38, "Subsubsection",
   CellTags->"Examples section"],
  Cell[365428, 10046, 116, 3, 29, "Text",
   CellTags->"Examples section"],
  Cell[365569, 10053, 96, 2, 29, "Input",
   CellTags->"Examples section"],
  Cell[365668, 10057, 303, 5, 42, "Print",
   CellTags->{"Examples section", "Info3395144357-5978858"}],
  Cell[366008, 10067, 177, 4, 48, "Input",
   CellTags->"Examples section"],
  Cell[366188, 10073, 197, 5, 28, "Output",
   CellTags->"Examples section"],
  Cell[366422, 10083, 171, 4, 48, "Input",
   CellTags->"Examples section"],
  Cell[366596, 10089, 171, 4, 28, "Output",
   CellTags->"Examples section"],
  Cell[366782, 10096, 209, 5, 48, "Text",
   CellTags->"Examples section"],
  Cell[367016, 10105, 237, 6, 67, "Input",
   CellTags->"Examples section"],
  Cell[367256, 10113, 325, 10, 28, "Output",
   CellTags->"Examples section"],
  Cell[367630, 10129, 72, 1, 38, "Subsubsection",
   CellTags->"Examples section"],
  Cell[367705, 10132, 152, 4, 29, "Text",
   CellTags->"Examples section"],
  Cell[367882, 10140, 173, 4, 29, "Input",
   CellTags->"Examples section"],
  Cell[368058, 10146, 5347, 132, 278, "Output",
   CellTags->"Examples section"],
  Cell[373454, 10284, 108, 1, 25, "Subsubsection",
   CellTags->"Examples section"],
  Cell[373565, 10287, 339, 9, 45, "Text",
   CellTags->"Examples section"],
  Cell[373929, 10300, 91, 2, 28, "Input",
   CellTags->"Examples section"],
  Cell[374023, 10304, 261, 4, 42, "Print",
   CellTags->{"Examples section", "Info3395144358-4510271"}],
  Cell[374321, 10313, 160, 4, 28, "Input",
   CellTags->"Examples section"],
  Cell[374484, 10319, 131, 2, 27, "Output",
   CellTags->"Examples section"],
  Cell[374630, 10324, 71, 1, 27, "Text",
   CellTags->"Examples section"],
  Cell[374726, 10329, 60, 1, 28, "Input",
   CellTags->"Examples section"],
  Cell[374789, 10332, 611, 11, 41, "Message",
   CellTags->"Examples section"],
  Cell[375403, 10345, 103, 2, 27, "Output",
   CellTags->"Examples section"],
  Cell[375521, 10350, 153, 4, 27, "Text",
   CellTags->"Examples section"],
  Cell[375677, 10356, 122, 3, 27, "InputOnly",
   CellTags->"Examples section"],
  Cell[375802, 10361, 138, 4, 27, "Text",
   CellTags->"Examples section"],
  Cell[375965, 10369, 178, 6, 50, "Input",
   CellTags->"Examples section"],
  Cell[376146, 10377, 221, 7, 49, "Output",
   CellTags->"Examples section"]},
 "Info3395143931-6822858"->{
  Cell[155208, 4472, 258, 4, 42, "Print",
   CellTags->{"Examples section", "Info3395143931-6822858"}]},
 "mfsInterpret"->{
  Cell[158015, 4573, 110, 2, 36, "Subsection",
   CellTags->"mfsInterpret"]},
 "Info3395144020-9288427"->{
  Cell[176762, 5003, 695, 10, 111, "Print",
   CellTags->"Info3395144020-9288427"]},
 "Info3395144168-1990905"->{
  Cell[188603, 5377, 424, 6, 59, "Print",
   CellTags->{"Examples section", "Info3395144168-1990905"}]},
 "Info3434726551-5985816"->{
  Cell[228512, 6313, 702, 10, 112, "Print",
   CellTags->"Info3434726551-5985816"]},
 "Info3395144206-1341006"->{
  Cell[248429, 6813, 269, 5, 42, "Print",
   CellTags->{"Examples section", "Info3395144206-1341006"}]},
 "Info3395144230-6821624"->{
  Cell[270701, 7521, 164, 2, 39, "Print",
   CellTags->{"Examples section", "Info3395144230-6821624"}]},
 "Info3395144357-8104660"->{
  Cell[364716, 10021, 310, 5, 42, "Print",
   CellTags->{"Examples section", "Info3395144357-8104660"}]},
 "Info3395144357-5978858"->{
  Cell[365668, 10057, 303, 5, 42, "Print",
   CellTags->{"Examples section", "Info3395144357-5978858"}]},
 "Info3395144358-4510271"->{
  Cell[374023, 10304, 261, 4, 42, "Print",
   CellTags->{"Examples section", "Info3395144358-4510271"}]},
 "palette"->{
  Cell[386073, 10663, 66, 1, 69, "Section",
   CellTags->"palette"]},
 "Wolfram book"->{
  Cell[391857, 10847, 152, 4, 27, "Text",
   CellTags->"Wolfram book"]},
 "Maeder book"->{
  Cell[392012, 10853, 175, 6, 27, "Text",
   CellTags->"Maeder book"]},
 "MAD manual"->{
  Cell[392378, 10866, 63, 1, 27, "Text",
   CellTags->"MAD manual"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Intrduction section", 393532, 10901},
 {"Reference section", 394240, 10920},
 {"Setup section", 396868, 10989},
 {"Interface section", 397615, 11010},
 {"Info3395143885-6759278", 401604, 11124},
 {"Info3395143907-9632325", 401716, 11127},
 {"Examples section", 401822, 11130},
 {"Info3395143931-6822858", 417919, 11543},
 {"mfsInterpret", 418043, 11546},
 {"Info3395144020-9288427", 418150, 11549},
 {"Info3395144168-1990905", 418264, 11552},
 {"Info3434726551-5985816", 418398, 11555},
 {"Info3395144206-1341006", 418512, 11558},
 {"Info3395144230-6821624", 418646, 11561},
 {"Info3395144357-8104660", 418780, 11564},
 {"Info3395144357-5978858", 418915, 11567},
 {"Info3395144358-4510271", 419050, 11570},
 {"palette", 419170, 11573},
 {"Wolfram book", 419259, 11576},
 {"Maeder book", 419350, 11579},
 {"MAD manual", 419439, 11582}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[545, 20, 63, 1, 29, "Text"],
Cell[CellGroupData[{
Cell[633, 25, 107, 5, 91, "Title"],
Cell[743, 32, 287, 6, 89, "Subtitle"],
Cell[CellGroupData[{
Cell[1055, 42, 65, 1, 69, "Section",
 CellTags->"Intrduction section"],
Cell[1123, 45, 1193, 38, 105, "Text",
 CellTags->"Intrduction section"],
Cell[2319, 85, 328, 7, 49, "Text",
 CellTags->"Intrduction section"],
Cell[2650, 94, 682, 12, 104, "Text",
 CellTags->"Intrduction section"],
Cell[3335, 108, 659, 12, 104, "Text",
 CellTags->"Intrduction section"],
Cell[3997, 122, 343, 11, 49, "Text",
 CellTags->"Intrduction section"],
Cell[4343, 135, 115, 3, 29, "Text"],
Cell[4461, 140, 356, 12, 48, "Text"],
Cell[4820, 154, 306, 7, 48, "Text"],
Cell[5129, 163, 262, 6, 48, "Text"],
Cell[5394, 171, 177, 3, 45, "Program"],
Cell[5574, 176, 635, 15, 86, "Text",
 CellTags->"Intrduction section"],
Cell[6212, 193, 555, 14, 67, "Text",
 CellTags->"Intrduction section"],
Cell[6770, 209, 92, 2, 29, "Text"],
Cell[6865, 213, 234, 7, 48, "Text",
 CellTags->"Intrduction section"],
Cell[CellGroupData[{
Cell[7124, 224, 40, 0, 47, "Subsection"],
Cell[7167, 226, 340, 6, 67, "Text"],
Cell[7510, 234, 72, 0, 29, "Text"],
Cell[7585, 236, 139, 3, 48, "Text"],
Cell[7727, 241, 194, 4, 48, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7958, 250, 52, 0, 47, "Subsection"],
Cell[8013, 252, 723, 11, 142, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[8785, 269, 60, 1, 69, "Section",
 CellTags->"Reference section"],
Cell[CellGroupData[{
Cell[8870, 274, 62, 1, 38, "Subsubsection",
 CellTags->"Reference section"],
Cell[8935, 277, 132, 5, 29, "Text",
 CellTags->"Reference section"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9104, 287, 63, 1, 38, "Subsubsection",
 CellTags->"Reference section"],
Cell[9170, 290, 62, 1, 29, "Text",
 CellTags->"Reference section"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9269, 296, 64, 1, 38, "Subsubsection",
 CellTags->"Reference section"],
Cell[9336, 299, 272, 5, 48, "Text",
 CellTags->"Reference section"],
Cell[9611, 306, 138, 4, 29, "Text",
 CellTags->"Reference section"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9786, 315, 34, 0, 38, "Subsubsection"],
Cell[9823, 317, 1765, 27, 420, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[11625, 349, 73, 1, 32, "Subsubsection",
 CellTags->"Reference section"],
Cell[11701, 352, 52, 1, 29, "Text",
 CellTags->"Reference section"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11790, 358, 129, 5, 38, "Subsubsection",
 CellTags->"Reference section"],
Cell[11922, 365, 169, 4, 29, "Text",
 CellTags->"Reference section"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12128, 374, 64, 1, 38, "Subsubsection",
 CellTags->"Reference section"],
Cell[12195, 377, 750, 15, 179, "Text",
 CellTags->"Reference section"],
Cell[12948, 394, 1118, 24, 180, "Text",
 CellTags->"Reference section"],
Cell[14069, 420, 954, 21, 201, "Text",
 CellTags->"Reference section"],
Cell[15026, 443, 246, 4, 67, "Text"],
Cell[15275, 449, 127, 3, 29, "Text"],
Cell[15405, 454, 162, 3, 48, "Text"],
Cell[15570, 459, 446, 8, 104, "Text"],
Cell[16019, 469, 163, 3, 48, "Text"],
Cell[16185, 474, 135, 3, 29, "Text"],
Cell[16323, 479, 230, 8, 48, "Text"],
Cell[16556, 489, 294, 6, 48, "Text"],
Cell[16853, 497, 186, 4, 48, "Text"],
Cell[17042, 503, 253, 4, 67, "Text"],
Cell[17298, 509, 384, 8, 67, "Text"],
Cell[17685, 519, 437, 7, 85, "Text"],
Cell[18125, 528, 203, 6, 29, "Text"],
Cell[18331, 536, 202, 4, 48, "Text"],
Cell[18536, 542, 316, 6, 67, "Text"],
Cell[18855, 550, 269, 5, 48, "Text"],
Cell[19127, 557, 537, 11, 67, "Text"],
Cell[19667, 570, 318, 6, 48, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20022, 581, 65, 1, 38, "Subsubsection",
 CellTags->"Reference section"],
Cell[20090, 584, 89, 1, 27, "Text",
 CellTags->"Reference section"]
}, Closed]],
Cell[CellGroupData[{
Cell[20216, 590, 63, 1, 32, "Subsubsection",
 CellTags->"Reference section"],
Cell[20282, 593, 308, 6, 67, "Text",
 CellTags->"Reference section"],
Cell[20593, 601, 234, 5, 45, "Program",
 CellTags->"Reference section"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20864, 611, 65, 1, 38, "Subsubsection",
 CellTags->"Reference section"],
Cell[20932, 614, 350, 7, 60, "Text",
 CellTags->"Reference section"]
}, Closed]],
Cell[CellGroupData[{
Cell[21319, 626, 67, 1, 32, "Subsubsection",
 CellTags->"Reference section"],
Cell[21389, 629, 182, 5, 30, "Text",
 CellTags->"Reference section"],
Cell[21574, 636, 172, 5, 30, "Text",
 CellTags->"Reference section"],
Cell[21749, 643, 572, 16, 87, "Text",
 CellTags->"Reference section"],
Cell[22324, 661, 296, 8, 48, "Text",
 CellTags->"Reference section"],
Cell[22623, 671, 204, 7, 29, "Text",
 CellTags->"Reference section"],
Cell[22830, 680, 146, 4, 29, "Text",
 CellTags->"Reference section"],
Cell[22979, 686, 598, 10, 104, "Text"],
Cell[23580, 698, 299, 9, 49, "Text"],
Cell[23882, 709, 333, 9, 49, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24252, 723, 69, 1, 38, "Subsubsection",
 CellTags->"Reference section"],
Cell[24324, 726, 102, 1, 29, "Text",
 CellTags->"Reference section"],
Cell[24429, 729, 119, 3, 29, "Text",
 CellTags->"Reference section"],
Cell[24551, 734, 195, 4, 48, "Text",
 CellTags->"Reference section"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[24795, 744, 52, 1, 69, "Section",
 CellTags->"Setup section"],
Cell[24850, 747, 273, 5, 48, "Text",
 CellTags->"Setup section"],
Cell[CellGroupData[{
Cell[25148, 756, 74, 1, 47, "Subsection",
 CellTags->"Setup section"],
Cell[25225, 759, 234, 4, 48, "Text"],
Cell[25462, 765, 191, 3, 45, "Program"],
Cell[25656, 770, 348, 9, 67, "Text",
 CellTags->"Setup section"]
}, Open  ]],
Cell[CellGroupData[{
Cell[26041, 784, 69, 1, 47, "Subsection",
 CellTags->"Setup section"],
Cell[26113, 787, 891, 24, 86, "Text",
 CellTags->"Setup section"],
Cell[27007, 813, 139, 4, 28, "InputOnly",
 CellTags->"Setup section"],
Cell[27149, 819, 404, 11, 67, "Text",
 CellTags->"Setup section"],
Cell[27556, 832, 327, 7, 67, "Text",
 CellTags->"Setup section"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[27932, 845, 87, 2, 69, "Section",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[28022, 849, 154, 4, 29, "Text",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[CellGroupData[{
Cell[28201, 857, 133, 2, 47, "Subsection",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[CellGroupData[{
Cell[28359, 863, 211, 4, 29, "Input",
 InitializationCell->True],
Cell[28573, 869, 114, 1, 28, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[28736, 876, 153, 4, 47, "Subsection",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[28892, 882, 147, 4, 29, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[29042, 888, 487, 10, 103, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[29532, 900, 316, 8, 67, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[29851, 910, 260, 7, 67, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[30114, 919, 334, 9, 67, "Input",
 CellTags->"Interface section"],
Cell[30451, 930, 320, 8, 67, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[30774, 940, 118, 2, 29, "Text"],
Cell[30895, 944, 379, 9, 85, "Input",
 Evaluatable->False],
Cell[31277, 955, 322, 8, 67, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[31602, 965, 273, 7, 67, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[31878, 974, 338, 8, 67, "Input",
 Evaluatable->False,
 CellTags->"Interface section"],
Cell[32219, 984, 359, 8, 85, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[32581, 994, 335, 8, 67, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[32919, 1004, 463, 9, 103, "Input",
 InitializationCell->True],
Cell[33385, 1015, 470, 9, 103, "Input",
 InitializationCell->True],
Cell[33858, 1026, 492, 10, 122, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[34353, 1038, 278, 7, 67, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[34634, 1047, 284, 7, 67, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[34921, 1056, 428, 9, 103, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[35352, 1067, 1143, 18, 158, "Input",
 InitializationCell->True],
Cell[36498, 1087, 346, 8, 67, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[36847, 1097, 274, 7, 67, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[37124, 1106, 299, 8, 67, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[37426, 1116, 313, 8, 67, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[37742, 1126, 541, 11, 49, "Code",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[38286, 1139, 198, 4, 49, "Code"],
Cell[38487, 1145, 312, 8, 49, "Code",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[38802, 1155, 242, 6, 67, "Input",
 InitializationCell->True],
Cell[39047, 1163, 299, 8, 67, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[39349, 1173, 345, 8, 67, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[39697, 1183, 297, 7, 67, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[39997, 1192, 309, 7, 67, "Input",
 InitializationCell->True],
Cell[40309, 1201, 433, 9, 85, "Input",
 InitializationCell->True],
Cell[40745, 1212, 280, 7, 67, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[41028, 1221, 299, 7, 67, "Input",
 InitializationCell->True],
Cell[41330, 1230, 381, 8, 85, "Input",
 InitializationCell->True],
Cell[41714, 1240, 343, 7, 85, "Input",
 InitializationCell->True],
Cell[42060, 1249, 427, 9, 85, "Input",
 InitializationCell->True],
Cell[42490, 1260, 248, 6, 67, "Input",
 InitializationCell->True],
Cell[42741, 1268, 289, 7, 67, "Input",
 InitializationCell->True],
Cell[43033, 1277, 495, 9, 122, "Input",
 InitializationCell->True],
Cell[43531, 1288, 586, 11, 140, "Input",
 InitializationCell->True],
Cell[44120, 1301, 318, 7, 85, "Input",
 InitializationCell->True],
Cell[44441, 1310, 311, 7, 67, "Input",
 InitializationCell->True],
Cell[44755, 1319, 254, 6, 67, "Input",
 InitializationCell->True],
Cell[45012, 1327, 713, 13, 177, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[45762, 1345, 120, 2, 47, "Subsection",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[45885, 1349, 172, 5, 29, "Input",
 InitializationCell->True],
Cell[46060, 1356, 161, 4, 29, "Input",
 InitializationCell->True],
Cell[46224, 1362, 170, 4, 29, "Input",
 InitializationCell->True],
Cell[46397, 1368, 212, 6, 29, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[46612, 1376, 233, 7, 29, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[46848, 1385, 206, 6, 29, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[47057, 1393, 259, 7, 29, "Input",
 InitializationCell->True],
Cell[47319, 1402, 211, 6, 29, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[47533, 1410, 212, 6, 29, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[47748, 1418, 214, 6, 29, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[47965, 1426, 222, 6, 29, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[48190, 1434, 277, 7, 67, "Input",
 InitializationCell->True,
 CellTags->"Interface section"],
Cell[48470, 1443, 233, 6, 48, "Input",
 InitializationCell->True],
Cell[48706, 1451, 209, 6, 29, "Input",
 InitializationCell->True],
Cell[48918, 1459, 214, 6, 48, "Input",
 InitializationCell->True],
Cell[49135, 1467, 189, 5, 29, "Input",
 InitializationCell->True],
Cell[49327, 1474, 191, 5, 29, "Input",
 InitializationCell->True],
Cell[49521, 1481, 195, 5, 29, "Input",
 InitializationCell->True],
Cell[49719, 1488, 435, 9, 48, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[50191, 1502, 105, 1, 47, "Subsection"],
Cell[50299, 1505, 193, 4, 29, "Text"],
Cell[50495, 1511, 291, 7, 48, "Input",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[50835, 1524, 60, 1, 69, "Section",
 InitializationCell->True],
Cell[50898, 1527, 131, 3, 29, "Text"],
Cell[CellGroupData[{
Cell[51054, 1534, 96, 1, 47, "Subsection",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[51175, 1539, 64, 1, 29, "Input",
 InitializationCell->True],
Cell[51242, 1542, 102, 1, 28, "Output"]
}, Open  ]]
}, Open  ]],
Cell[51371, 1547, 75, 1, 47, "Subsection",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[51471, 1552, 119, 3, 39, "Subsection",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[51615, 1559, 108, 3, 29, "Input",
 InitializationCell->True],
Cell[51726, 1564, 94, 2, 28, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[51869, 1572, 85, 1, 47, "Subsection",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[51979, 1577, 53, 0, 38, "Subsubsection"],
Cell[52035, 1579, 384, 6, 85, "Text"],
Cell[52422, 1587, 426, 12, 67, "Input",
 InitializationCell->True],
Cell[52851, 1601, 163, 3, 48, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[53051, 1609, 170, 3, 38, "Subsubsection"],
Cell[53224, 1614, 186, 4, 48, "Text"],
Cell[53413, 1620, 299, 8, 92, "Input",
 Evaluatable->False]
}, Open  ]],
Cell[CellGroupData[{
Cell[53749, 1633, 57, 0, 38, "Subsubsection"],
Cell[53809, 1635, 311, 4, 48, "Text"],
Cell[54123, 1641, 504, 8, 104, "Text"],
Cell[54630, 1651, 293, 6, 49, "Text"],
Cell[54926, 1659, 153, 3, 48, "Text"],
Cell[55082, 1664, 641, 13, 139, "Input",
 InitializationCell->True],
Cell[55726, 1679, 344, 6, 67, "Text"],
Cell[56073, 1687, 236, 4, 48, "Text"],
Cell[56312, 1693, 173, 3, 48, "Text"],
Cell[56488, 1698, 365, 9, 76, "Input",
 InitializationCell->True],
Cell[56856, 1709, 272, 5, 67, "Text"],
Cell[57131, 1716, 1200, 22, 279, "Input",
 InitializationCell->True],
Cell[58334, 1740, 273, 6, 49, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[58644, 1751, 54, 0, 38, "Subsubsection"],
Cell[58701, 1753, 159, 3, 48, "Text"],
Cell[58863, 1758, 470, 13, 68, "Text"],
Cell[59336, 1773, 188, 4, 48, "Text"],
Cell[59527, 1779, 268, 7, 49, "Code",
 InitializationCell->True],
Cell[59798, 1788, 1637, 40, 170, "Code",
 InitializationCell->True],
Cell[61438, 1830, 254, 6, 49, "Code"],
Cell[61695, 1838, 4376, 102, 375, "Code",
 InitializationCell->True],
Cell[66074, 1942, 4259, 96, 324, "Code"]
}, Open  ]],
Cell[CellGroupData[{
Cell[70370, 2043, 166, 2, 38, "Subsubsection"],
Cell[70539, 2047, 143, 1, 29, "Text"],
Cell[70685, 2050, 1082, 29, 122, "Input",
 InitializationCell->True],
Cell[71770, 2081, 1019, 28, 103, "Input",
 InitializationCell->True],
Cell[72792, 2111, 340, 7, 30, "Text"],
Cell[73135, 2120, 429, 9, 29, "Input",
 InitializationCell->True],
Cell[73567, 2131, 296, 7, 29, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[73900, 2143, 69, 0, 38, "Subsubsection"],
Cell[73972, 2145, 45, 0, 29, "Text"],
Cell[74020, 2147, 94, 1, 29, "Input",
 InitializationCell->True],
Cell[74117, 2150, 127, 3, 29, "Text"],
Cell[74247, 2155, 38, 0, 29, "Text"],
Cell[74288, 2157, 213, 5, 45, "Input",
 InitializationCell->True],
Cell[74504, 2164, 218, 4, 29, "Text"],
Cell[74725, 2170, 118, 3, 29, "Input",
 InitializationCell->True],
Cell[74846, 2175, 118, 3, 29, "Input",
 InitializationCell->True],
Cell[74967, 2180, 58, 0, 29, "Text"],
Cell[75028, 2182, 76, 1, 29, "Input",
 InitializationCell->True],
Cell[75107, 2185, 48, 0, 29, "Text"],
Cell[75158, 2187, 78, 1, 29, "Input",
 InitializationCell->True],
Cell[75239, 2190, 152, 4, 30, "Text"],
Cell[75394, 2196, 143, 5, 29, "Text"],
Cell[75540, 2203, 949, 28, 48, "Input",
 InitializationCell->True],
Cell[76492, 2233, 50, 0, 29, "Text"],
Cell[76545, 2235, 114, 3, 29, "Input",
 InitializationCell->True],
Cell[76662, 2240, 73, 1, 29, "Input",
 InitializationCell->True],
Cell[76738, 2243, 250, 5, 29, "Text"],
Cell[76991, 2250, 4348, 101, 231, "Input",
 InitializationCell->True],
Cell[81342, 2353, 544, 16, 67, "Code"]
}, Open  ]],
Cell[CellGroupData[{
Cell[81923, 2374, 56, 0, 38, "Subsubsection"],
Cell[81982, 2376, 58, 0, 29, "Text"],
Cell[82043, 2378, 246, 6, 60, "Input",
 InitializationCell->True],
Cell[82292, 2386, 59, 0, 29, "Text"],
Cell[82354, 2388, 155, 4, 45, "Input",
 InitializationCell->True],
Cell[82512, 2394, 88, 2, 29, "Text"],
Cell[82603, 2398, 169, 4, 45, "Input",
 InitializationCell->True],
Cell[82775, 2404, 174, 4, 45, "Input",
 InitializationCell->True],
Cell[82952, 2410, 665, 10, 123, "Text"],
Cell[83620, 2422, 466, 7, 66, "Text"],
Cell[84089, 2431, 4862, 129, 451, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[88988, 2565, 44, 0, 38, "Subsubsection"],
Cell[89035, 2567, 44, 0, 29, "Text"],
Cell[89082, 2569, 220, 5, 60, "Input",
 InitializationCell->True],
Cell[89305, 2576, 361, 8, 107, "Input",
 InitializationCell->True],
Cell[89669, 2586, 393, 8, 107, "Input",
 InitializationCell->True],
Cell[90065, 2596, 70, 0, 29, "Text"],
Cell[90138, 2598, 104, 1, 29, "Input",
 InitializationCell->True],
Cell[90245, 2601, 66, 0, 29, "Text"],
Cell[90314, 2603, 271, 7, 76, "Input",
 InitializationCell->True],
Cell[90588, 2612, 233, 7, 60, "Input",
 InitializationCell->True],
Cell[90824, 2621, 60, 0, 29, "Text"],
Cell[90887, 2623, 165, 3, 29, "Text"],
Cell[91055, 2628, 1429, 43, 140, "Input",
 Evaluatable->False],
Cell[92487, 2673, 126, 2, 29, "Input"],
Cell[92616, 2677, 185, 4, 29, "Text"],
Cell[92804, 2683, 16, 0, 29, "Text"],
Cell[92823, 2685, 106, 1, 29, "Text"],
Cell[CellGroupData[{
Cell[92954, 2690, 141, 2, 29, "Input"],
Cell[93098, 2694, 113, 2, 28, "Output"]
}, Open  ]],
Cell[93226, 2699, 1754, 37, 49, "Input",
 InitializationCell->True],
Cell[94983, 2738, 2084, 49, 138, "Input"],
Cell[97070, 2789, 315, 6, 48, "Text"],
Cell[97388, 2797, 462, 13, 65, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[97887, 2815, 44, 0, 38, "Subsubsection"],
Cell[97934, 2817, 75, 0, 29, "Text"],
Cell[98012, 2819, 377, 8, 92, "Input",
 InitializationCell->True],
Cell[98392, 2829, 382, 6, 48, "Text"],
Cell[98777, 2837, 201, 5, 60, "Input",
 InitializationCell->True],
Cell[98981, 2844, 49, 0, 29, "Text"],
Cell[99033, 2846, 154, 4, 45, "Input",
 InitializationCell->True],
Cell[99190, 2852, 95, 2, 29, "Text"],
Cell[99288, 2856, 127, 4, 45, "Input",
 InitializationCell->True],
Cell[99418, 2862, 94, 1, 29, "Input",
 InitializationCell->True],
Cell[99515, 2865, 207, 4, 29, "Text"],
Cell[99725, 2871, 3952, 100, 433, "Input",
 Evaluatable->False],
Cell[103680, 2973, 156, 3, 29, "Text"],
Cell[103839, 2978, 706, 12, 170, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[104582, 2995, 59, 0, 33, "Subsubsection"],
Cell[104644, 2997, 350, 8, 44, "Text"],
Cell[104997, 3007, 133, 3, 27, "Text"],
Cell[105133, 3012, 143, 4, 28, "Text"],
Cell[CellGroupData[{
Cell[105301, 3020, 462, 11, 63, "Input",
 InitializationCell->True],
Cell[105766, 3033, 400, 8, 27, "Output"]
}, Open  ]],
Cell[106181, 3044, 427, 12, 28, "Input",
 InitializationCell->True],
Cell[106611, 3058, 203, 6, 27, "Text"],
Cell[106817, 3066, 152, 4, 28, "Text"],
Cell[106972, 3072, 1399, 40, 80, "Input",
 InitializationCell->True],
Cell[108374, 3114, 159, 4, 28, "Text"],
Cell[108536, 3120, 2148, 60, 166, "Input",
 InitializationCell->True],
Cell[110687, 3182, 213, 6, 28, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[110937, 3193, 133, 1, 27, "Subsubsection"],
Cell[111073, 3196, 187, 4, 29, "Text"],
Cell[111263, 3202, 1890, 50, 122, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[113190, 3257, 64, 0, 33, "Subsubsection"],
Cell[113257, 3259, 169, 4, 27, "Text",
 InitializationCell->True],
Cell[113429, 3265, 774, 22, 80, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[114240, 3292, 60, 0, 27, "Subsubsection"],
Cell[114303, 3294, 234, 4, 48, "Text"],
Cell[114540, 3300, 1418, 39, 49, "Input",
 InitializationCell->True],
Cell[115961, 3341, 195, 5, 30, "Input",
 InitializationCell->True],
Cell[116159, 3348, 1427, 39, 122, "Input",
 InitializationCell->True],
Cell[117589, 3389, 261, 7, 30, "Input",
 InitializationCell->True],
Cell[117853, 3398, 1232, 35, 104, "Input",
 InitializationCell->True],
Cell[119088, 3435, 372, 11, 30, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[119497, 3451, 126, 1, 33, "Subsubsection"],
Cell[119626, 3454, 147, 3, 29, "Text"],
Cell[119776, 3459, 72, 0, 29, "Text"],
Cell[119851, 3461, 494, 14, 30, "Input",
 InitializationCell->True],
Cell[120348, 3477, 73, 0, 29, "Text"],
Cell[120424, 3479, 490, 14, 30, "Input",
 InitializationCell->True],
Cell[120917, 3495, 99, 2, 29, "Text"],
Cell[121019, 3499, 393, 11, 30, "Input",
 InitializationCell->True],
Cell[121415, 3512, 747, 11, 67, "Text"],
Cell[122165, 3525, 568, 9, 48, "Text"],
Cell[122736, 3536, 124, 1, 29, "Text"],
Cell[CellGroupData[{
Cell[122885, 3541, 141, 2, 29, "Input"],
Cell[123029, 3545, 87, 2, 28, "Output"]
}, Open  ]],
Cell[123131, 3550, 3745, 85, 195, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[126913, 3640, 76, 0, 33, "Subsubsection"],
Cell[126992, 3642, 860, 14, 105, "Text"],
Cell[127855, 3658, 408, 10, 49, "Text"],
Cell[128266, 3670, 4617, 119, 398, "Input",
 InitializationCell->True],
Cell[132886, 3791, 3934, 103, 343, "Input",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[136869, 3900, 72, 1, 42, "Subsection",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[136966, 3905, 50, 1, 29, "Input",
 InitializationCell->True],
Cell[137019, 3908, 102, 1, 28, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[137182, 3916, 54, 1, 78, "Section",
 InitializationCell->True],
Cell[137239, 3919, 76, 0, 27, "Text"],
Cell[CellGroupData[{
Cell[137340, 3923, 73, 1, 36, "Subsection",
 InitializationCell->True],
Cell[137416, 3926, 593, 11, 80, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[138046, 3942, 72, 1, 36, "Subsection",
 InitializationCell->True],
Cell[138121, 3945, 57, 1, 28, "Input",
 InitializationCell->True],
Cell[138181, 3948, 109, 3, 27, "Text"],
Cell[138293, 3953, 229, 4, 44, "Text"],
Cell[CellGroupData[{
Cell[138547, 3961, 288, 8, 28, "Input",
 InitializationCell->True],
Cell[138838, 3971, 1228, 37, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[140103, 4013, 136, 3, 28, "Input",
 InitializationCell->True],
Cell[140242, 4018, 117, 1, 20, "Print"]
}, Open  ]],
Cell[CellGroupData[{
Cell[140396, 4024, 309, 8, 80, "Input",
 InitializationCell->True],
Cell[140708, 4034, 180, 2, 37, "Print"]
}, Open  ]],
Cell[140903, 4039, 350, 9, 80, "Input",
 InitializationCell->True]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[141302, 4054, 38, 0, 48, "Section"],
Cell[141343, 4056, 117, 3, 29, "Text"],
Cell[141463, 4061, 111, 2, 29, "Input",
 CellTags->"Setup section"],
Cell[141577, 4065, 76, 0, 29, "Text"],
Cell[CellGroupData[{
Cell[141678, 4069, 47, 1, 29, "Input"],
Cell[CellGroupData[{
Cell[141750, 4074, 7491, 204, 371, "Print"],
Cell[149244, 4280, 232, 4, 42, "Print",
 CellTags->"Info3395143885-6759278"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[149525, 4290, 47, 1, 29, "Input"],
Cell[149575, 4293, 2633, 69, 76, "Print"]
}, Open  ]],
Cell[152223, 4365, 142, 3, 29, "Text"],
Cell[CellGroupData[{
Cell[152390, 4372, 52, 1, 29, "Input"],
Cell[152445, 4375, 272, 5, 42, "Print",
 CellTags->"Info3395143907-9632325"]
}, Open  ]],
Cell[152732, 4383, 139, 3, 29, "Text"],
Cell[152874, 4388, 120, 2, 29, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[153031, 4395, 75, 1, 78, "Section",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[153131, 4400, 96, 1, 42, "Subsection",
 CellTags->"Examples section"],
Cell[153230, 4403, 357, 6, 61, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[153612, 4413, 400, 10, 63, "Input",
 CellTags->"Examples section"],
Cell[154015, 4425, 206, 3, 27, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[154236, 4431, 66, 0, 27, "Text"],
Cell[CellGroupData[{
Cell[154327, 4435, 80, 1, 28, "Input"],
Cell[154410, 4438, 143, 2, 27, "Output"]
}, Open  ]],
Cell[154568, 4443, 181, 5, 28, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[154774, 4452, 65, 1, 28, "Input",
 CellTags->"Examples section"],
Cell[154842, 4455, 125, 3, 27, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[154982, 4461, 117, 3, 27, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[155124, 4468, 81, 2, 28, "Input",
 CellTags->"Examples section"],
Cell[155208, 4472, 258, 4, 42, "Print",
 CellTags->{"Examples section", "Info3395143931-6822858"}]
}, Open  ]],
Cell[155481, 4479, 208, 5, 27, "Text",
 CellTags->"Examples section"],
Cell[155692, 4486, 223, 7, 27, "InputOnly",
 CellTags->"Examples section"],
Cell[155918, 4495, 296, 6, 44, "Text",
 CellTags->"Examples section"],
Cell[156217, 4503, 359, 7, 45, "Text",
 CellTags->"Examples section"],
Cell[156579, 4512, 180, 5, 28, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[156784, 4521, 116, 3, 28, "Input",
 CellTags->"Examples section"],
Cell[156903, 4526, 213, 6, 27, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[157131, 4535, 229, 7, 28, "Text",
 CellTags->"Examples section"]
}, Open  ]],
Cell[CellGroupData[{
Cell[157397, 4547, 52, 0, 36, "Subsection"],
Cell[157452, 4549, 91, 2, 27, "Text"],
Cell[CellGroupData[{
Cell[157568, 4555, 192, 5, 63, "Input"],
Cell[157763, 4562, 203, 5, 27, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[158015, 4573, 110, 2, 36, "Subsection",
 CellTags->"mfsInterpret"],
Cell[158128, 4577, 419, 9, 61, "Text"],
Cell[158550, 4588, 115, 3, 28, "Input"],
Cell[158668, 4593, 278, 6, 45, "Text"],
Cell[CellGroupData[{
Cell[158971, 4603, 67, 1, 28, "Input"],
Cell[159041, 4606, 85, 1, 27, "Output"]
}, Open  ]],
Cell[159141, 4610, 63, 0, 27, "Text"],
Cell[CellGroupData[{
Cell[159229, 4614, 92, 2, 28, "Input"],
Cell[159324, 4618, 325, 8, 27, "Output"]
}, Open  ]],
Cell[159664, 4629, 131, 4, 28, "Text"],
Cell[CellGroupData[{
Cell[159820, 4637, 90, 2, 30, "Input"],
Cell[159913, 4641, 86, 1, 27, "Output"]
}, Open  ]],
Cell[160014, 4645, 280, 6, 45, "Text"],
Cell[CellGroupData[{
Cell[160319, 4655, 227, 5, 28, "Input"],
Cell[160549, 4662, 7915, 134, 234, "Output"]
}, Open  ]],
Cell[168479, 4799, 76, 0, 27, "Text"],
Cell[CellGroupData[{
Cell[168580, 4803, 96, 2, 28, "Input"],
Cell[168679, 4807, 110, 2, 27, "Output"]
}, Open  ]],
Cell[168804, 4812, 32, 0, 27, "Text"],
Cell[CellGroupData[{
Cell[168861, 4816, 202, 6, 43, "Input"],
Cell[169066, 4824, 712, 19, 45, "Output"]
}, Open  ]],
Cell[169793, 4846, 280, 6, 44, "Text"],
Cell[170076, 4854, 164, 3, 27, "Text"],
Cell[CellGroupData[{
Cell[170265, 4861, 124, 3, 28, "Input"],
Cell[170392, 4866, 286, 6, 27, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[170715, 4877, 120, 3, 28, "Input"],
Cell[170838, 4882, 355, 7, 27, "Output"]
}, Open  ]],
Cell[171208, 4892, 57, 0, 27, "Text"],
Cell[CellGroupData[{
Cell[171290, 4896, 203, 6, 28, "Input"],
Cell[171496, 4904, 4804, 83, 222, "Output"]
}, Open  ]],
Cell[176315, 4990, 366, 6, 61, "Text"],
Cell[CellGroupData[{
Cell[176706, 5000, 53, 1, 28, "Input"],
Cell[176762, 5003, 695, 10, 111, "Print",
 CellTags->"Info3395144020-9288427"]
}, Open  ]],
Cell[177472, 5016, 156, 3, 27, "Text"],
Cell[CellGroupData[{
Cell[177653, 5023, 60, 1, 28, "Input"],
Cell[177716, 5026, 1318, 21, 61, "Output"]
}, Open  ]],
Cell[179049, 5050, 198, 4, 44, "Text"],
Cell[179250, 5056, 313, 8, 45, "Text"],
Cell[CellGroupData[{
Cell[179588, 5068, 166, 3, 28, "Input"],
Cell[179757, 5073, 500, 12, 27, "Output"]
}, Open  ]],
Cell[180272, 5088, 38, 0, 27, "Text"],
Cell[CellGroupData[{
Cell[180335, 5092, 206, 5, 28, "Input"],
Cell[180544, 5099, 475, 12, 27, "Output"]
}, Open  ]],
Cell[181034, 5114, 138, 3, 27, "Text"],
Cell[CellGroupData[{
Cell[181197, 5121, 126, 3, 28, "Input"],
Cell[181326, 5126, 150, 3, 27, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[181513, 5134, 140, 4, 28, "Input"],
Cell[181656, 5140, 176, 4, 20, "Message"],
Cell[181835, 5146, 25, 0, 27, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[181897, 5151, 261, 7, 28, "Input"],
Cell[182161, 5160, 194, 4, 20, "Message"],
Cell[182358, 5166, 164, 4, 27, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[182571, 5176, 87, 1, 36, "Subsection",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[182683, 5181, 104, 1, 25, "Subsubsection",
 CellTags->"Examples section"],
Cell[182790, 5184, 389, 10, 44, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[183204, 5198, 99, 2, 28, "Input",
 CellTags->"Examples section"],
Cell[183306, 5202, 1183, 20, 61, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[184504, 5225, 177, 5, 28, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[184706, 5234, 174, 4, 28, "Input",
 CellTags->"Examples section"],
Cell[184883, 5240, 118, 2, 29, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[CellGroupData[{
Cell[185038, 5247, 135, 3, 28, "Input",
 CellTags->"Examples section"],
Cell[185176, 5252, 134, 2, 27, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[185325, 5257, 183, 7, 28, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[185533, 5268, 131, 3, 28, "Input",
 CellTags->"Examples section"],
Cell[185667, 5273, 448, 8, 21, "Message",
 CellTags->"Examples section"]
}, Open  ]],
Cell[186130, 5284, 143, 4, 27, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[186298, 5292, 307, 8, 28, "Input",
 CellTags->"Examples section"],
Cell[186608, 5302, 352, 8, 32, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[186975, 5313, 162, 6, 27, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[187162, 5323, 300, 7, 28, "Input",
 CellTags->"Examples section"],
Cell[187465, 5332, 133, 3, 27, "Output",
 CellTags->"Examples section"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[187647, 5341, 104, 1, 25, "Subsubsection",
 CellTags->"Examples section"],
Cell[187754, 5344, 153, 4, 27, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[187932, 5352, 102, 2, 28, "Input",
 CellTags->"Examples section"],
Cell[188037, 5356, 294, 6, 27, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[188346, 5365, 146, 4, 28, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[188517, 5373, 83, 2, 28, "Input",
 CellTags->"Examples section"],
Cell[188603, 5377, 424, 6, 59, "Print",
 CellTags->{"Examples section", "Info3395144168-1990905"}]
}, Open  ]],
Cell[189042, 5386, 235, 5, 28, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[189302, 5395, 204, 6, 28, "Input",
 CellTags->"Examples section"],
Cell[189509, 5403, 1160, 24, 84, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[190684, 5430, 289, 6, 45, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[190998, 5440, 340, 10, 28, "Input",
 CellTags->"Examples section"],
Cell[191341, 5452, 2280, 66, 119, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[193636, 5521, 437, 11, 45, "Text",
 CellTags->"Examples section"],
Cell[194076, 5534, 198, 4, 27, "Text"],
Cell[194277, 5540, 330, 9, 28, "Input"],
Cell[CellGroupData[{
Cell[194632, 5553, 94, 2, 28, "Input",
 CellTags->"Examples section"],
Cell[194729, 5557, 7950, 135, 231, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[202694, 5695, 118, 4, 28, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[202837, 5703, 130, 3, 28, "Input",
 CellTags->"Examples section"],
Cell[202970, 5708, 441, 8, 21, "Message",
 CellTags->"Examples section"]
}, Open  ]],
Cell[203426, 5719, 233, 6, 28, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[203684, 5729, 154, 4, 28, "Input",
 CellTags->"Examples section"],
Cell[203841, 5735, 1677, 41, 93, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[205533, 5779, 237, 6, 28, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[205795, 5789, 134, 3, 28, "Input",
 CellTags->"Examples section"],
Cell[205932, 5794, 150, 4, 27, "Output",
 CellTags->"Examples section"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[206131, 5804, 116, 2, 25, "Subsubsection",
 CellTags->"Examples section"],
Cell[206250, 5808, 189, 7, 28, "Text"],
Cell[206442, 5817, 675, 17, 62, "Text"],
Cell[207120, 5836, 335, 10, 28, "Input"],
Cell[207458, 5848, 56, 0, 27, "Text"],
Cell[CellGroupData[{
Cell[207539, 5852, 88, 2, 28, "Input"],
Cell[207630, 5856, 774, 16, 69, "Output"]
}, Open  ]],
Cell[208419, 5875, 122, 4, 28, "Text"],
Cell[208544, 5881, 287, 9, 28, "Input"],
Cell[CellGroupData[{
Cell[208856, 5894, 70, 1, 28, "Input"],
Cell[208929, 5897, 75, 1, 27, "Output"]
}, Open  ]],
Cell[209019, 5901, 171, 3, 27, "Text"],
Cell[209193, 5906, 252, 7, 28, "Input"],
Cell[CellGroupData[{
Cell[209470, 5917, 70, 1, 28, "Input"],
Cell[209543, 5920, 75, 1, 27, "Output"]
}, Open  ]],
Cell[209633, 5924, 231, 8, 28, "Text"],
Cell[209867, 5934, 104, 3, 28, "Input"],
Cell[209974, 5939, 41, 0, 27, "Text"],
Cell[CellGroupData[{
Cell[210040, 5943, 70, 1, 28, "Input"],
Cell[210113, 5946, 15935, 295, 1569, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[226097, 6247, 195, 4, 19, "Subsubsection",
 CellTags->"Examples section"],
Cell[226295, 6253, 267, 5, 27, "Text"],
Cell[CellGroupData[{
Cell[226587, 6262, 452, 11, 28, "Input"],
Cell[227042, 6275, 1173, 26, 175, "Output"]
}, Open  ]],
Cell[228230, 6304, 139, 1, 27, "Text"],
Cell[CellGroupData[{
Cell[228394, 6309, 115, 2, 28, "Input"],
Cell[228512, 6313, 702, 10, 112, "Print",
 CellTags->"Info3434726551-5985816"]
}, Open  ]],
Cell[CellGroupData[{
Cell[229251, 6328, 139, 2, 28, "Input"],
Cell[229393, 6332, 565, 10, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[229995, 6347, 324, 9, 28, "Input"],
Cell[230322, 6358, 7189, 122, 230, "Output"]
}, Open  ]],
Cell[237526, 6483, 114, 1, 27, "Text"],
Cell[CellGroupData[{
Cell[237665, 6488, 522, 15, 28, "Input"],
Cell[238190, 6505, 346, 6, 23, "Message"],
Cell[238539, 6513, 178, 2, 27, "Output"]
}, Open  ]],
Cell[238732, 6518, 206, 4, 27, "Text"],
Cell[CellGroupData[{
Cell[238963, 6526, 910, 24, 81, "Input"],
Cell[239876, 6552, 4778, 129, 110, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[244715, 6688, 151, 6, 37, "Subsection",
 CellTags->"Examples section"],
Cell[244869, 6696, 797, 14, 94, "Text",
 CellTags->"Examples section"],
Cell[245669, 6712, 154, 4, 27, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[245848, 6720, 79, 1, 25, "Subsubsection",
 CellTags->"Examples section"],
Cell[245930, 6723, 188, 6, 28, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[246143, 6733, 418, 10, 63, "Input",
 CellTags->"Examples section"],
Cell[246564, 6745, 217, 3, 27, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[246796, 6751, 241, 7, 28, "Input",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[247062, 6762, 131, 3, 28, "Input",
 CellTags->"Examples section"],
Cell[247196, 6767, 214, 5, 27, "Output",
 CellTags->"Examples section"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[247459, 6778, 81, 1, 25, "Subsubsection",
 CellTags->"Examples section"],
Cell[247543, 6781, 775, 24, 63, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[248343, 6809, 83, 2, 28, "Input",
 CellTags->"Examples section"],
Cell[248429, 6813, 269, 5, 42, "Print",
 CellTags->{"Examples section", "Info3395144206-1341006"}]
}, Open  ]],
Cell[248713, 6821, 460, 11, 62, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[249198, 6836, 227, 6, 28, "Input",
 CellTags->"Examples section"],
Cell[249428, 6844, 208, 5, 27, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[CellGroupData[{
Cell[249673, 6854, 182, 5, 28, "Input",
 CellTags->"Examples section"],
Cell[249858, 6861, 120, 2, 27, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[249993, 6866, 535, 17, 46, "Text",
 CellTags->"Examples section"],
Cell[250531, 6885, 429, 13, 28, "Input",
 CellTags->"Examples section"],
Cell[250963, 6900, 306, 11, 29, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[251294, 6915, 295, 8, 28, "Input",
 CellTags->"Examples section"],
Cell[251592, 6925, 973, 24, 138, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[252580, 6952, 350, 11, 45, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[252955, 6967, 673, 19, 80, "Input",
 CellTags->"Examples section"],
Cell[253631, 6988, 1091, 27, 154, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[254737, 7018, 428, 13, 45, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[255190, 7035, 593, 17, 63, "Input",
 CellTags->"Examples section"],
Cell[255786, 7054, 2274, 56, 156, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[258075, 7113, 579, 16, 62, "Text",
 CellTags->"Examples section"],
Cell[258657, 7131, 454, 14, 28, "Input",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[259136, 7149, 293, 8, 28, "Input",
 CellTags->"Examples section"],
Cell[259432, 7159, 665, 18, 43, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[260112, 7180, 82, 1, 27, "Text",
 CellTags->"Examples section"],
Cell[260197, 7183, 609, 18, 46, "Input",
 CellTags->"Examples section"]
}, Open  ]],
Cell[CellGroupData[{
Cell[260843, 7206, 85, 1, 25, "Subsubsection",
 CellTags->"Examples section"],
Cell[260931, 7209, 220, 5, 44, "Text",
 CellTags->"Examples section"],
Cell[261154, 7216, 177, 4, 27, "Text",
 CellTags->"Examples section"],
Cell[261334, 7222, 225, 7, 28, "Input",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[261584, 7233, 209, 6, 28, "Input",
 CellTags->"Examples section"],
Cell[261796, 7241, 2290, 57, 156, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[CellGroupData[{
Cell[264123, 7303, 297, 8, 28, "Input",
 CellTags->"Examples section"],
Cell[264423, 7313, 766, 20, 75, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[265204, 7336, 325, 9, 28, "Text",
 CellTags->"Examples section"],
Cell[265532, 7347, 284, 8, 28, "Input",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[265841, 7359, 271, 8, 28, "Input",
 CellTags->"Examples section"],
Cell[266115, 7369, 879, 24, 138, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[267009, 7396, 267, 9, 28, "Text",
 CellTags->"Examples section"],
Cell[267279, 7407, 294, 9, 28, "Input",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[267598, 7420, 132, 3, 28, "Input",
 CellTags->"Examples section"],
Cell[267733, 7425, 240, 5, 27, "Output",
 CellTags->"Examples section"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[268022, 7436, 79, 1, 25, "Subsubsection",
 CellTags->"Examples section"],
Cell[268104, 7439, 606, 16, 63, "Text",
 CellTags->"Examples section"],
Cell[268713, 7457, 542, 17, 28, "Input",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[269280, 7478, 115, 3, 28, "Input",
 CellTags->"Examples section"],
Cell[269398, 7483, 912, 17, 76, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[270325, 7503, 261, 10, 28, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[270611, 7517, 87, 2, 28, "Input",
 CellTags->"Examples section"],
Cell[270701, 7521, 164, 2, 39, "Print",
 CellTags->{"Examples section", "Info3395144230-6821624"}]
}, Open  ]],
Cell[CellGroupData[{
Cell[270902, 7528, 370, 10, 28, "Input",
 CellTags->"Examples section"],
Cell[271275, 7540, 66797, 1637, 4204, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[338087, 9180, 218, 5, 45, "Text"],
Cell[CellGroupData[{
Cell[338330, 9189, 545, 17, 46, "Input"],
Cell[338878, 9208, 2272, 52, 109, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[341211, 9267, 129, 5, 37, "Subsection",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[341365, 9276, 64, 0, 25, "Subsubsection"],
Cell[341432, 9278, 271, 9, 44, "Text",
 CellTags->"Examples section"],
Cell[341706, 9289, 284, 9, 28, "Input",
 CellTags->"Examples section"],
Cell[341993, 9300, 328, 10, 32, "Input",
 CellTags->"Examples section"],
Cell[342324, 9312, 497, 15, 46, "Input",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[342846, 9331, 173, 5, 29, "Input",
 CellTags->"Examples section"],
Cell[343022, 9338, 1312, 41, 66, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[344349, 9382, 256, 7, 49, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[344630, 9393, 136, 3, 29, "Input",
 CellTags->"Examples section"],
Cell[344769, 9398, 464, 9, 25, "Message",
 CellTags->"Examples section"]
}, Open  ]],
Cell[345248, 9410, 90, 1, 29, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[345363, 9415, 287, 9, 29, "Input",
 CellTags->"Examples section"],
Cell[345653, 9426, 464, 9, 25, "Message",
 CellTags->"Examples section"]
}, Open  ]],
Cell[CellGroupData[{
Cell[346154, 9440, 136, 3, 29, "Input",
 CellTags->"Examples section"],
Cell[346293, 9445, 180, 4, 28, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[346488, 9452, 78, 1, 29, "Text",
 CellTags->"Examples section"],
Cell[346569, 9455, 180, 5, 29, "Input",
 CellTags->"Examples section"],
Cell[346752, 9462, 73, 1, 29, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[346850, 9467, 99, 2, 29, "Input",
 CellTags->"Examples section"],
Cell[346952, 9471, 215, 5, 28, "Output",
 CellTags->"Examples section"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[347216, 9482, 52, 0, 38, "Subsubsection"],
Cell[347271, 9484, 180, 4, 49, "Text"],
Cell[CellGroupData[{
Cell[347476, 9492, 154, 4, 29, "Input"],
Cell[347633, 9498, 72, 1, 28, "Output"]
}, Open  ]],
Cell[347720, 9502, 134, 3, 29, "Text"],
Cell[347857, 9507, 132, 4, 29, "Input"],
Cell[347992, 9513, 231, 7, 29, "Input"],
Cell[348226, 9522, 100, 2, 29, "Text"],
Cell[CellGroupData[{
Cell[348351, 9528, 100, 2, 29, "Input"],
Cell[348454, 9532, 205, 4, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[348696, 9541, 400, 11, 48, "Input"],
Cell[349099, 9554, 4059, 73, 447, "Output"]
}, Open  ]],
Cell[353173, 9630, 140, 1, 29, "Text"],
Cell[353316, 9633, 307, 8, 67, "Input"],
Cell[353626, 9643, 260, 8, 29, "Input"],
Cell[CellGroupData[{
Cell[353911, 9655, 67, 1, 29, "Input"],
Cell[353981, 9658, 393, 7, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[354411, 9670, 70, 1, 29, "Input"],
Cell[354484, 9673, 163, 4, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[354684, 9682, 73, 1, 29, "Input"],
Cell[354760, 9685, 137, 3, 28, "Output"]
}, Open  ]],
Cell[354912, 9691, 87, 2, 29, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[355036, 9698, 79, 0, 38, "Subsubsection"],
Cell[355118, 9700, 381, 7, 67, "Text"],
Cell[355502, 9709, 175, 5, 29, "Input"],
Cell[CellGroupData[{
Cell[355702, 9718, 79, 1, 29, "Input"],
Cell[355784, 9721, 183, 4, 28, "Output"]
}, Open  ]],
Cell[355982, 9728, 240, 4, 48, "Text"],
Cell[356225, 9734, 337, 7, 67, "Text"],
Cell[CellGroupData[{
Cell[356587, 9745, 67, 1, 29, "Input"],
Cell[356657, 9748, 169, 4, 28, "Output"]
}, Open  ]],
Cell[356841, 9755, 113, 3, 29, "Text"],
Cell[CellGroupData[{
Cell[356979, 9762, 137, 3, 29, "Input"],
Cell[357119, 9767, 142, 3, 28, "Output"]
}, Open  ]],
Cell[357276, 9773, 111, 4, 30, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[357424, 9782, 59, 0, 38, "Subsubsection"],
Cell[357486, 9784, 266, 5, 48, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[357777, 9793, 271, 8, 29, "Input",
 CellTags->"Examples section"],
Cell[358051, 9803, 1114, 22, 99, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[359180, 9828, 125, 3, 29, "Text",
 CellTags->"Examples section"]
}, Open  ]],
Cell[CellGroupData[{
Cell[359342, 9836, 55, 0, 38, "Subsubsection"],
Cell[359400, 9838, 169, 4, 29, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[359594, 9846, 270, 8, 67, "Input",
 CellTags->"Examples section"],
Cell[359867, 9856, 192, 3, 28, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[360074, 9862, 203, 7, 29, "Text",
 CellTags->"Examples section"]
}, Open  ]],
Cell[CellGroupData[{
Cell[360314, 9874, 63, 0, 38, "Subsubsection"],
Cell[360380, 9876, 141, 3, 48, "Text"],
Cell[CellGroupData[{
Cell[360546, 9883, 100, 2, 29, "Input"],
Cell[360649, 9887, 145, 3, 28, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[360855, 9897, 101, 1, 47, "Subsection",
 CellTags->"Examples section"],
Cell[360959, 9900, 358, 6, 67, "Text",
 CellTags->"Examples section"],
Cell[361320, 9908, 114, 2, 29, "Input",
 CellTags->"Examples section"],
Cell[361437, 9912, 232, 5, 48, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[361694, 9921, 83, 1, 38, "Subsubsection",
 CellTags->"Examples section"],
Cell[361780, 9924, 125, 3, 29, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[361930, 9931, 93, 2, 29, "Input",
 CellTags->"Examples section"],
Cell[362026, 9935, 448, 8, 25, "Message",
 CellTags->"Examples section"]
}, Open  ]],
Cell[CellGroupData[{
Cell[362511, 9948, 204, 6, 29, "Input",
 CellTags->"Examples section"],
Cell[362718, 9956, 444, 8, 21, "Message",
 CellTags->"Examples section"],
Cell[363165, 9966, 158, 4, 28, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[CellGroupData[{
Cell[363360, 9975, 92, 2, 29, "Input",
 CellTags->"Examples section"],
Cell[363455, 9979, 190, 3, 28, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[CellGroupData[{
Cell[363682, 9987, 210, 4, 29, "Input",
 CellTags->"Examples section"],
Cell[363895, 9993, 446, 8, 82, "Output",
 CellTags->"Examples section"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[364390, 10007, 84, 1, 38, "Subsubsection",
 CellTags->"Examples section"],
Cell[364477, 10010, 125, 3, 29, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[364627, 10017, 86, 2, 29, "Input",
 CellTags->"Examples section"],
Cell[364716, 10021, 310, 5, 42, "Print",
 CellTags->{"Examples section", "Info3395144357-8104660"}]
}, Open  ]],
Cell[CellGroupData[{
Cell[365063, 10031, 114, 2, 29, "Input",
 CellTags->"Examples section"],
Cell[365180, 10035, 111, 2, 28, "Output",
 CellTags->"Examples section"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[365340, 10043, 85, 1, 38, "Subsubsection",
 CellTags->"Examples section"],
Cell[365428, 10046, 116, 3, 29, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[365569, 10053, 96, 2, 29, "Input",
 CellTags->"Examples section"],
Cell[365668, 10057, 303, 5, 42, "Print",
 CellTags->{"Examples section", "Info3395144357-5978858"}]
}, Open  ]],
Cell[CellGroupData[{
Cell[366008, 10067, 177, 4, 48, "Input",
 CellTags->"Examples section"],
Cell[366188, 10073, 197, 5, 28, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[CellGroupData[{
Cell[366422, 10083, 171, 4, 48, "Input",
 CellTags->"Examples section"],
Cell[366596, 10089, 171, 4, 28, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[366782, 10096, 209, 5, 48, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[367016, 10105, 237, 6, 67, "Input",
 CellTags->"Examples section"],
Cell[367256, 10113, 325, 10, 28, "Output",
 CellTags->"Examples section"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[367630, 10129, 72, 1, 38, "Subsubsection",
 CellTags->"Examples section"],
Cell[367705, 10132, 152, 4, 29, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[367882, 10140, 173, 4, 29, "Input",
 CellTags->"Examples section"],
Cell[368058, 10146, 5347, 132, 278, "Output",
 CellTags->"Examples section"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[373454, 10284, 108, 1, 25, "Subsubsection",
 CellTags->"Examples section"],
Cell[373565, 10287, 339, 9, 45, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[373929, 10300, 91, 2, 28, "Input",
 CellTags->"Examples section"],
Cell[374023, 10304, 261, 4, 42, "Print",
 CellTags->{"Examples section", "Info3395144358-4510271"}]
}, Open  ]],
Cell[CellGroupData[{
Cell[374321, 10313, 160, 4, 28, "Input",
 CellTags->"Examples section"],
Cell[374484, 10319, 131, 2, 27, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[374630, 10324, 71, 1, 27, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[374726, 10329, 60, 1, 28, "Input",
 CellTags->"Examples section"],
Cell[374789, 10332, 611, 11, 41, "Message",
 CellTags->"Examples section"],
Cell[375403, 10345, 103, 2, 27, "Output",
 CellTags->"Examples section"]
}, Open  ]],
Cell[375521, 10350, 153, 4, 27, "Text",
 CellTags->"Examples section"],
Cell[375677, 10356, 122, 3, 27, "InputOnly",
 CellTags->"Examples section"],
Cell[375802, 10361, 138, 4, 27, "Text",
 CellTags->"Examples section"],
Cell[CellGroupData[{
Cell[375965, 10369, 178, 6, 50, "Input",
 CellTags->"Examples section"],
Cell[376146, 10377, 221, 7, 49, "Output",
 CellTags->"Examples section"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[376416, 10390, 42, 0, 25, "Subsubsection"],
Cell[CellGroupData[{
Cell[376483, 10394, 430, 13, 46, "Input"],
Cell[376916, 10409, 556, 17, 27, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[377509, 10431, 66, 1, 28, "Input"],
Cell[377578, 10434, 424, 8, 25, "Message"],
Cell[378005, 10444, 424, 8, 25, "Message"],
Cell[378432, 10454, 472, 8, 25, "Message"],
Cell[378907, 10464, 391, 7, 25, "Message"],
Cell[379301, 10473, 389, 7, 25, "Message"],
Cell[379693, 10482, 468, 8, 25, "Message"],
Cell[380164, 10492, 464, 8, 25, "Message"],
Cell[380631, 10502, 1226, 28, 78, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[381894, 10535, 76, 1, 28, "Input"],
Cell[381973, 10538, 539, 9, 25, "Message"],
Cell[382515, 10549, 273, 7, 27, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[382825, 10561, 66, 1, 28, "Input"],
Cell[382894, 10564, 422, 8, 25, "Message"],
Cell[383319, 10574, 422, 8, 25, "Message"],
Cell[383744, 10584, 554, 17, 27, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[384335, 10606, 66, 1, 28, "Input"],
Cell[384404, 10609, 422, 8, 25, "Message"],
Cell[384829, 10619, 424, 8, 25, "Message"],
Cell[385256, 10629, 554, 17, 27, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[385847, 10651, 56, 1, 28, "Input"],
Cell[385906, 10654, 94, 1, 27, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[386073, 10663, 66, 1, 69, "Section",
 CellTags->"palette"],
Cell[386142, 10666, 504, 9, 61, "Text"],
Cell[386649, 10677, 2522, 80, 247, "Input",
 Evaluatable->True,
 CellGroupingRules->"InputGrouping",
 PageBreakAbove->True,
 PageBreakWithin->False,
 CounterIncrements->"Input"],
Cell[389174, 10759, 266, 6, 45, "Text"],
Cell[389443, 10767, 281, 5, 44, "Text"],
Cell[389727, 10774, 281, 5, 44, "Text"],
Cell[CellGroupData[{
Cell[390033, 10783, 63, 1, 28, "Input"],
Cell[390099, 10786, 89, 1, 20, "Print"]
}, Open  ]],
Cell[390203, 10790, 165, 4, 28, "Text"],
Cell[390371, 10796, 1415, 44, 150, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[391823, 10845, 31, 0, 69, "Section"],
Cell[391857, 10847, 152, 4, 27, "Text",
 CellTags->"Wolfram book"],
Cell[392012, 10853, 175, 6, 27, "Text",
 CellTags->"Maeder book"],
Cell[392190, 10861, 185, 3, 17, "Program"],
Cell[392378, 10866, 63, 1, 27, "Text",
 CellTags->"MAD manual"],
Cell[392444, 10869, 140, 3, 17, "Program"]
}, Closed]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
